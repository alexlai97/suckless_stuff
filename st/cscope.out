cscope 15 /mnt/alex/myrepos/suckless_stuff/st               0000815161
	@arg.h

6 #i‚de‡
ARG_H__


7 
	#ARG_H__


	)

9 *
¨gv0
;

12 
	#ARGBEGIN
 
¨gv0
 = *
¨gv
,árgv++, 
¨gc
--;\

13 
¨gv
[0] &&árgv[0][0] == '-'\

14 && 
¨gv
[0][1];\

15 
¨gc
--, 
¨gv
++) {\

16 
¨gc_
;\

17 **
¨gv_
;\

18 
brk_
;\

19 i‡(
¨gv
[0][1] == '-' &&árgv[0][2] == '\0') {\

20 
¨gv
++;\

21 
¨gc
--;\

24 
i_
;\

25 
i_
 = 1, 
brk_
 = 0, 
¨gv_
 = 
¨gv
;\

26 
¨gv
[0][
i_
] && !
brk_
;\

27 
i_
++) {\

28 i‡(
¨gv_
 !
¨gv
)\

30 
¨gc_
 = 
¨gv
[0][
i_
];\

31 
¨gc_
)

	)

33 
	#ARGEND
 }\

34 }

	)

36 
	#ARGC
(Ë
¨gc_


	)

38 
	#EARGF
(
x
Ë((
¨gv
[0][
i_
+1] ='\0' &&árgv[1] =
NULL
)?\

39 ((
x
), 
	`ab‹t
(), (*)0) :\

40 (
brk_
 = 1, (
¨gv
[0][
i_
+1] != '\0')?\

41 (&
¨gv
[0][
i_
+1]) :\

42 (
¨gc
--, 
¨gv
++,árgv[0])))

	)

44 
	#ARGF
(Ë((
¨gv
[0][
i_
+1] ='\0' &&árgv[1] =
NULL
)?\

46 (
brk_
 = 1, (
¨gv
[0][
i_
+1] != '\0')?\

47 (&
¨gv
[0][
i_
+1]) :\

48 (
¨gc
--, 
¨gv
++,árgv[0])))

	)

	@config.def.h

8 *
	gf⁄t
 = "Liberation Mono:pixelsize=12:antialias=true:autohint=true";

9 
	gb‹dîpx
 = 2;

19 *
	gshñl
 = "/bin/sh";

20 *
	gutmp
 = 
NULL
;

21 *
	g°ty_¨gs
 = "sttyÑawÖass8Çl -echo -iexten -cstopb 38400";

24 *
	gvtidí
 = "\033[?6c";

27 
	gcwsˇÀ
 = 1.0;

28 
	gchsˇÀ
 = 1.0;

35 *
	gw‹ddñimôîs
 = " ";

38 
	gdoubÀ˛icktimeout
 = 300;

39 
	gåùÀ˛icktimeout
 = 600;

42 
	gÆlowÆts¸ìn
 = 1;

45 
	gxÂs
 = 120;

46 
	ga˘i⁄Âs
 = 30;

52 
	gblöktimeout
 = 800;

57 
	gcurs‹thick√ss
 = 2;

63 
	gbñlvﬁume
 = 0;

66 *
	gãrm«me
 = "st-256color";

83 
	gèb•a˚s
 = 8;

86 c⁄° *
	gcﬁ‹«me
[] = {

119 
	gdeÁu…fg
 = 7;

120 
	gdeÁu…bg
 = 0;

121 
	gdeÁu…cs
 = 256;

122 
	gdeÁu…rcs
 = 257;

131 
	gcurs‹sh≠e
 = 2;

137 
	gcﬁs
 = 80;

138 
	grows
 = 24;

143 
	gmou£sh≠e
 = 
XC_xãrm
;

144 
	gmou£fg
 = 7;

145 
	gmou£bg
 = 0;

151 
	gdeÁu…©å
 = 11;

157 
Mou£Sh‹tcut
 
	gmsh‹tcuts
[] = {

159 { 
Buâ⁄4
, 
XK_ANY_MOD
, "\031" },

160 { 
Buâ⁄5
, 
XK_ANY_MOD
, "\005" },

164 
	#MODKEY
 
Mod1Mask


	)

165 
	#TERMMOD
 (
C⁄åﬁMask
|
Shi·Mask
)

	)

167 
Sh‹tcut
 
	gsh‹tcuts
[] = {

169 { 
XK_ANY_MOD
, 
XK_Bªak
, 
£ndbªak
, {.
i
 = 0} },

170 { 
	gC⁄åﬁMask
, 
	gXK_Pröt
, 
	gtoggÀ¥öãr
, {.
	gi
 = 0} },

171 { 
	gShi·Mask
, 
	gXK_Pröt
, 
	g¥öts¸ìn
, {.
	gi
 = 0} },

172 { 
	gXK_ANY_MOD
, 
	gXK_Pröt
, 
	g¥öt£l
, {.
	gi
 = 0} },

173 { 
	gTERMMOD
, 
	gXK_Pri‹
, 
	gzoom
, {.
	gf
 = +1} },

174 { 
	gTERMMOD
, 
	gXK_Next
, 
	gzoom
, {.
	gf
 = -1} },

175 { 
	gTERMMOD
, 
	gXK_Home
, 
	gzoomª£t
, {.
	gf
 = 0} },

176 { 
	gTERMMOD
, 
	gXK_C
, 
	g˛ùc›y
, {.
	gi
 = 0} },

177 { 
	gTERMMOD
, 
	gXK_V
, 
	g˛ù∑°e
, {.
	gi
 = 0} },

178 { 
	gTERMMOD
, 
	gXK_Y
, 
	g£Õa°e
, {.
	gi
 = 0} },

179 { 
	gTERMMOD
, 
	gXK_Num_Lock
, 
	gnumlock
, {.
	gi
 = 0} },

211 
KeySym
 
	gm≠≥dkeys
[] = { -1 };

217 
uöt
 
	gign‹emod
 = 
Mod2Mask
|
XK_SWITCH_MOD
;

224 
uöt
 
	gf‹˚£lmod
 = 
Shi·Mask
;

230 
Key
 
	gkey
[] = {

232 { 
XK_KP_Home
, 
Shi·Mask
, "\033[2J", 0, -1},

233 { 
XK_KP_Home
, 
Shi·Mask
, "\033[1;2H", 0, +1},

234 { 
XK_KP_Home
, 
XK_ANY_MOD
, "\033[H", 0, -1},

235 { 
XK_KP_Home
, 
XK_ANY_MOD
, "\033[1~", 0, +1},

236 { 
XK_KP_Up
, 
XK_ANY_MOD
, "\033Ox", +1, 0},

237 { 
XK_KP_Up
, 
XK_ANY_MOD
, "\033[A", 0, -1},

238 { 
XK_KP_Up
, 
XK_ANY_MOD
, "\033OA", 0, +1},

239 { 
XK_KP_Down
, 
XK_ANY_MOD
, "\033Or", +1, 0},

240 { 
XK_KP_Down
, 
XK_ANY_MOD
, "\033[B", 0, -1},

241 { 
XK_KP_Down
, 
XK_ANY_MOD
, "\033OB", 0, +1},

242 { 
XK_KP_Le·
, 
XK_ANY_MOD
, "\033Ot", +1, 0},

243 { 
XK_KP_Le·
, 
XK_ANY_MOD
, "\033[D", 0, -1},

244 { 
XK_KP_Le·
, 
XK_ANY_MOD
, "\033OD", 0, +1},

245 { 
XK_KP_Right
, 
XK_ANY_MOD
, "\033Ov", +1, 0},

246 { 
XK_KP_Right
, 
XK_ANY_MOD
, "\033[C", 0, -1},

247 { 
XK_KP_Right
, 
XK_ANY_MOD
, "\033OC", 0, +1},

248 { 
XK_KP_Pri‹
, 
Shi·Mask
, "\033[5;2~", 0, 0},

249 { 
XK_KP_Pri‹
, 
XK_ANY_MOD
, "\033[5~", 0, 0},

250 { 
XK_KP_Begö
, 
XK_ANY_MOD
, "\033[E", 0, 0},

251 { 
XK_KP_End
, 
C⁄åﬁMask
, "\033[J", -1, 0},

252 { 
XK_KP_End
, 
C⁄åﬁMask
, "\033[1;5F", +1, 0},

253 { 
XK_KP_End
, 
Shi·Mask
, "\033[K", -1, 0},

254 { 
XK_KP_End
, 
Shi·Mask
, "\033[1;2F", +1, 0},

255 { 
XK_KP_End
, 
XK_ANY_MOD
, "\033[4~", 0, 0},

256 { 
XK_KP_Next
, 
Shi·Mask
, "\033[6;2~", 0, 0},

257 { 
XK_KP_Next
, 
XK_ANY_MOD
, "\033[6~", 0, 0},

258 { 
XK_KP_In£π
, 
Shi·Mask
, "\033[2;2~", +1, 0},

259 { 
XK_KP_In£π
, 
Shi·Mask
, "\033[4l", -1, 0},

260 { 
XK_KP_In£π
, 
C⁄åﬁMask
, "\033[L", -1, 0},

261 { 
XK_KP_In£π
, 
C⁄åﬁMask
, "\033[2;5~", +1, 0},

262 { 
XK_KP_In£π
, 
XK_ANY_MOD
, "\033[4h", -1, 0},

263 { 
XK_KP_In£π
, 
XK_ANY_MOD
, "\033[2~", +1, 0},

264 { 
XK_KP_Dñëe
, 
C⁄åﬁMask
, "\033[M", -1, 0},

265 { 
XK_KP_Dñëe
, 
C⁄åﬁMask
, "\033[3;5~", +1, 0},

266 { 
XK_KP_Dñëe
, 
Shi·Mask
, "\033[2K", -1, 0},

267 { 
XK_KP_Dñëe
, 
Shi·Mask
, "\033[3;2~", +1, 0},

268 { 
XK_KP_Dñëe
, 
XK_ANY_MOD
, "\033[P", -1, 0},

269 { 
XK_KP_Dñëe
, 
XK_ANY_MOD
, "\033[3~", +1, 0},

270 { 
XK_KP_Mu…ùly
, 
XK_ANY_MOD
, "\033Oj", +2, 0},

271 { 
XK_KP_Add
, 
XK_ANY_MOD
, "\033Ok", +2, 0},

272 { 
XK_KP_E¡î
, 
XK_ANY_MOD
, "\033OM", +2, 0},

273 { 
XK_KP_E¡î
, 
XK_ANY_MOD
, "\r", -1, 0},

274 { 
XK_KP_Subåa˘
, 
XK_ANY_MOD
, "\033Om", +2, 0},

275 { 
XK_KP_DecimÆ
, 
XK_ANY_MOD
, "\033On", +2, 0},

276 { 
XK_KP_Divide
, 
XK_ANY_MOD
, "\033Oo", +2, 0},

277 { 
XK_KP_0
, 
XK_ANY_MOD
, "\033Op", +2, 0},

278 { 
XK_KP_1
, 
XK_ANY_MOD
, "\033Oq", +2, 0},

279 { 
XK_KP_2
, 
XK_ANY_MOD
, "\033Or", +2, 0},

280 { 
XK_KP_3
, 
XK_ANY_MOD
, "\033Os", +2, 0},

281 { 
XK_KP_4
, 
XK_ANY_MOD
, "\033Ot", +2, 0},

282 { 
XK_KP_5
, 
XK_ANY_MOD
, "\033Ou", +2, 0},

283 { 
XK_KP_6
, 
XK_ANY_MOD
, "\033Ov", +2, 0},

284 { 
XK_KP_7
, 
XK_ANY_MOD
, "\033Ow", +2, 0},

285 { 
XK_KP_8
, 
XK_ANY_MOD
, "\033Ox", +2, 0},

286 { 
XK_KP_9
, 
XK_ANY_MOD
, "\033Oy", +2, 0},

287 { 
XK_Up
, 
Shi·Mask
, "\033[1;2A", 0, 0},

288 { 
XK_Up
, 
Mod1Mask
, "\033[1;3A", 0, 0},

289 { 
XK_Up
, 
Shi·Mask
|
Mod1Mask
,"\033[1;4A", 0, 0},

290 { 
XK_Up
, 
C⁄åﬁMask
, "\033[1;5A", 0, 0},

291 { 
XK_Up
, 
Shi·Mask
|
C⁄åﬁMask
,"\033[1;6A", 0, 0},

292 { 
XK_Up
, 
C⁄åﬁMask
|
Mod1Mask
,"\033[1;7A", 0, 0},

293 { 
XK_Up
,
Shi·Mask
|
C⁄åﬁMask
|
Mod1Mask
,"\033[1;8A", 0, 0},

294 { 
XK_Up
, 
XK_ANY_MOD
, "\033[A", 0, -1},

295 { 
XK_Up
, 
XK_ANY_MOD
, "\033OA", 0, +1},

296 { 
XK_Down
, 
Shi·Mask
, "\033[1;2B", 0, 0},

297 { 
XK_Down
, 
Mod1Mask
, "\033[1;3B", 0, 0},

298 { 
XK_Down
, 
Shi·Mask
|
Mod1Mask
,"\033[1;4B", 0, 0},

299 { 
XK_Down
, 
C⁄åﬁMask
, "\033[1;5B", 0, 0},

300 { 
XK_Down
, 
Shi·Mask
|
C⁄åﬁMask
,"\033[1;6B", 0, 0},

301 { 
XK_Down
, 
C⁄åﬁMask
|
Mod1Mask
,"\033[1;7B", 0, 0},

302 { 
XK_Down
,
Shi·Mask
|
C⁄åﬁMask
|
Mod1Mask
,"\033[1;8B",0, 0},

303 { 
XK_Down
, 
XK_ANY_MOD
, "\033[B", 0, -1},

304 { 
XK_Down
, 
XK_ANY_MOD
, "\033OB", 0, +1},

305 { 
XK_Le·
, 
Shi·Mask
, "\033[1;2D", 0, 0},

306 { 
XK_Le·
, 
Mod1Mask
, "\033[1;3D", 0, 0},

307 { 
XK_Le·
, 
Shi·Mask
|
Mod1Mask
,"\033[1;4D", 0, 0},

308 { 
XK_Le·
, 
C⁄åﬁMask
, "\033[1;5D", 0, 0},

309 { 
XK_Le·
, 
Shi·Mask
|
C⁄åﬁMask
,"\033[1;6D", 0, 0},

310 { 
XK_Le·
, 
C⁄åﬁMask
|
Mod1Mask
,"\033[1;7D", 0, 0},

311 { 
XK_Le·
,
Shi·Mask
|
C⁄åﬁMask
|
Mod1Mask
,"\033[1;8D",0, 0},

312 { 
XK_Le·
, 
XK_ANY_MOD
, "\033[D", 0, -1},

313 { 
XK_Le·
, 
XK_ANY_MOD
, "\033OD", 0, +1},

314 { 
XK_Right
, 
Shi·Mask
, "\033[1;2C", 0, 0},

315 { 
XK_Right
, 
Mod1Mask
, "\033[1;3C", 0, 0},

316 { 
XK_Right
, 
Shi·Mask
|
Mod1Mask
,"\033[1;4C", 0, 0},

317 { 
XK_Right
, 
C⁄åﬁMask
, "\033[1;5C", 0, 0},

318 { 
XK_Right
, 
Shi·Mask
|
C⁄åﬁMask
,"\033[1;6C", 0, 0},

319 { 
XK_Right
, 
C⁄åﬁMask
|
Mod1Mask
,"\033[1;7C", 0, 0},

320 { 
XK_Right
,
Shi·Mask
|
C⁄åﬁMask
|
Mod1Mask
,"\033[1;8C",0, 0},

321 { 
XK_Right
, 
XK_ANY_MOD
, "\033[C", 0, -1},

322 { 
XK_Right
, 
XK_ANY_MOD
, "\033OC", 0, +1},

323 { 
XK_ISO_Le·_Tab
, 
Shi·Mask
, "\033[Z", 0, 0},

324 { 
XK_Rëu∫
, 
Mod1Mask
, "\033\r", 0, 0},

325 { 
XK_Rëu∫
, 
XK_ANY_MOD
, "\r", 0, 0},

326 { 
XK_In£π
, 
Shi·Mask
, "\033[4l", -1, 0},

327 { 
XK_In£π
, 
Shi·Mask
, "\033[2;2~", +1, 0},

328 { 
XK_In£π
, 
C⁄åﬁMask
, "\033[L", -1, 0},

329 { 
XK_In£π
, 
C⁄åﬁMask
, "\033[2;5~", +1, 0},

330 { 
XK_In£π
, 
XK_ANY_MOD
, "\033[4h", -1, 0},

331 { 
XK_In£π
, 
XK_ANY_MOD
, "\033[2~", +1, 0},

332 { 
XK_Dñëe
, 
C⁄åﬁMask
, "\033[M", -1, 0},

333 { 
XK_Dñëe
, 
C⁄åﬁMask
, "\033[3;5~", +1, 0},

334 { 
XK_Dñëe
, 
Shi·Mask
, "\033[2K", -1, 0},

335 { 
XK_Dñëe
, 
Shi·Mask
, "\033[3;2~", +1, 0},

336 { 
XK_Dñëe
, 
XK_ANY_MOD
, "\033[P", -1, 0},

337 { 
XK_Dñëe
, 
XK_ANY_MOD
, "\033[3~", +1, 0},

338 { 
XK_BackS∑˚
, 
XK_NO_MOD
, "\177", 0, 0},

339 { 
XK_BackS∑˚
, 
Mod1Mask
, "\033\177", 0, 0},

340 { 
XK_Home
, 
Shi·Mask
, "\033[2J", 0, -1},

341 { 
XK_Home
, 
Shi·Mask
, "\033[1;2H", 0, +1},

342 { 
XK_Home
, 
XK_ANY_MOD
, "\033[H", 0, -1},

343 { 
XK_Home
, 
XK_ANY_MOD
, "\033[1~", 0, +1},

344 { 
XK_End
, 
C⁄åﬁMask
, "\033[J", -1, 0},

345 { 
XK_End
, 
C⁄åﬁMask
, "\033[1;5F", +1, 0},

346 { 
XK_End
, 
Shi·Mask
, "\033[K", -1, 0},

347 { 
XK_End
, 
Shi·Mask
, "\033[1;2F", +1, 0},

348 { 
XK_End
, 
XK_ANY_MOD
, "\033[4~", 0, 0},

349 { 
XK_Pri‹
, 
C⁄åﬁMask
, "\033[5;5~", 0, 0},

350 { 
XK_Pri‹
, 
Shi·Mask
, "\033[5;2~", 0, 0},

351 { 
XK_Pri‹
, 
XK_ANY_MOD
, "\033[5~", 0, 0},

352 { 
XK_Next
, 
C⁄åﬁMask
, "\033[6;5~", 0, 0},

353 { 
XK_Next
, 
Shi·Mask
, "\033[6;2~", 0, 0},

354 { 
XK_Next
, 
XK_ANY_MOD
, "\033[6~", 0, 0},

355 { 
XK_F1
, 
XK_NO_MOD
, "\033OP" , 0, 0},

356 { 
XK_F1
, 
Shi·Mask
, "\033[1;2P", 0, 0},

357 { 
XK_F1
, 
C⁄åﬁMask
, "\033[1;5P", 0, 0},

358 { 
XK_F1
, 
Mod4Mask
, "\033[1;6P", 0, 0},

359 { 
XK_F1
, 
Mod1Mask
, "\033[1;3P", 0, 0},

360 { 
XK_F1
, 
Mod3Mask
, "\033[1;4P", 0, 0},

361 { 
XK_F2
, 
XK_NO_MOD
, "\033OQ" , 0, 0},

362 { 
XK_F2
, 
Shi·Mask
, "\033[1;2Q", 0, 0},

363 { 
XK_F2
, 
C⁄åﬁMask
, "\033[1;5Q", 0, 0},

364 { 
XK_F2
, 
Mod4Mask
, "\033[1;6Q", 0, 0},

365 { 
XK_F2
, 
Mod1Mask
, "\033[1;3Q", 0, 0},

366 { 
XK_F2
, 
Mod3Mask
, "\033[1;4Q", 0, 0},

367 { 
XK_F3
, 
XK_NO_MOD
, "\033OR" , 0, 0},

368 { 
XK_F3
, 
Shi·Mask
, "\033[1;2R", 0, 0},

369 { 
XK_F3
, 
C⁄åﬁMask
, "\033[1;5R", 0, 0},

370 { 
XK_F3
, 
Mod4Mask
, "\033[1;6R", 0, 0},

371 { 
XK_F3
, 
Mod1Mask
, "\033[1;3R", 0, 0},

372 { 
XK_F3
, 
Mod3Mask
, "\033[1;4R", 0, 0},

373 { 
XK_F4
, 
XK_NO_MOD
, "\033OS" , 0, 0},

374 { 
XK_F4
, 
Shi·Mask
, "\033[1;2S", 0, 0},

375 { 
XK_F4
, 
C⁄åﬁMask
, "\033[1;5S", 0, 0},

376 { 
XK_F4
, 
Mod4Mask
, "\033[1;6S", 0, 0},

377 { 
XK_F4
, 
Mod1Mask
, "\033[1;3S", 0, 0},

378 { 
XK_F5
, 
XK_NO_MOD
, "\033[15~", 0, 0},

379 { 
XK_F5
, 
Shi·Mask
, "\033[15;2~", 0, 0},

380 { 
XK_F5
, 
C⁄åﬁMask
, "\033[15;5~", 0, 0},

381 { 
XK_F5
, 
Mod4Mask
, "\033[15;6~", 0, 0},

382 { 
XK_F5
, 
Mod1Mask
, "\033[15;3~", 0, 0},

383 { 
XK_F6
, 
XK_NO_MOD
, "\033[17~", 0, 0},

384 { 
XK_F6
, 
Shi·Mask
, "\033[17;2~", 0, 0},

385 { 
XK_F6
, 
C⁄åﬁMask
, "\033[17;5~", 0, 0},

386 { 
XK_F6
, 
Mod4Mask
, "\033[17;6~", 0, 0},

387 { 
XK_F6
, 
Mod1Mask
, "\033[17;3~", 0, 0},

388 { 
XK_F7
, 
XK_NO_MOD
, "\033[18~", 0, 0},

389 { 
XK_F7
, 
Shi·Mask
, "\033[18;2~", 0, 0},

390 { 
XK_F7
, 
C⁄åﬁMask
, "\033[18;5~", 0, 0},

391 { 
XK_F7
, 
Mod4Mask
, "\033[18;6~", 0, 0},

392 { 
XK_F7
, 
Mod1Mask
, "\033[18;3~", 0, 0},

393 { 
XK_F8
, 
XK_NO_MOD
, "\033[19~", 0, 0},

394 { 
XK_F8
, 
Shi·Mask
, "\033[19;2~", 0, 0},

395 { 
XK_F8
, 
C⁄åﬁMask
, "\033[19;5~", 0, 0},

396 { 
XK_F8
, 
Mod4Mask
, "\033[19;6~", 0, 0},

397 { 
XK_F8
, 
Mod1Mask
, "\033[19;3~", 0, 0},

398 { 
XK_F9
, 
XK_NO_MOD
, "\033[20~", 0, 0},

399 { 
XK_F9
, 
Shi·Mask
, "\033[20;2~", 0, 0},

400 { 
XK_F9
, 
C⁄åﬁMask
, "\033[20;5~", 0, 0},

401 { 
XK_F9
, 
Mod4Mask
, "\033[20;6~", 0, 0},

402 { 
XK_F9
, 
Mod1Mask
, "\033[20;3~", 0, 0},

403 { 
XK_F10
, 
XK_NO_MOD
, "\033[21~", 0, 0},

404 { 
XK_F10
, 
Shi·Mask
, "\033[21;2~", 0, 0},

405 { 
XK_F10
, 
C⁄åﬁMask
, "\033[21;5~", 0, 0},

406 { 
XK_F10
, 
Mod4Mask
, "\033[21;6~", 0, 0},

407 { 
XK_F10
, 
Mod1Mask
, "\033[21;3~", 0, 0},

408 { 
XK_F11
, 
XK_NO_MOD
, "\033[23~", 0, 0},

409 { 
XK_F11
, 
Shi·Mask
, "\033[23;2~", 0, 0},

410 { 
XK_F11
, 
C⁄åﬁMask
, "\033[23;5~", 0, 0},

411 { 
XK_F11
, 
Mod4Mask
, "\033[23;6~", 0, 0},

412 { 
XK_F11
, 
Mod1Mask
, "\033[23;3~", 0, 0},

413 { 
XK_F12
, 
XK_NO_MOD
, "\033[24~", 0, 0},

414 { 
XK_F12
, 
Shi·Mask
, "\033[24;2~", 0, 0},

415 { 
XK_F12
, 
C⁄åﬁMask
, "\033[24;5~", 0, 0},

416 { 
XK_F12
, 
Mod4Mask
, "\033[24;6~", 0, 0},

417 { 
XK_F12
, 
Mod1Mask
, "\033[24;3~", 0, 0},

418 { 
XK_F13
, 
XK_NO_MOD
, "\033[1;2P", 0, 0},

419 { 
XK_F14
, 
XK_NO_MOD
, "\033[1;2Q", 0, 0},

420 { 
XK_F15
, 
XK_NO_MOD
, "\033[1;2R", 0, 0},

421 { 
XK_F16
, 
XK_NO_MOD
, "\033[1;2S", 0, 0},

422 { 
XK_F17
, 
XK_NO_MOD
, "\033[15;2~", 0, 0},

423 { 
XK_F18
, 
XK_NO_MOD
, "\033[17;2~", 0, 0},

424 { 
XK_F19
, 
XK_NO_MOD
, "\033[18;2~", 0, 0},

425 { 
XK_F20
, 
XK_NO_MOD
, "\033[19;2~", 0, 0},

426 { 
XK_F21
, 
XK_NO_MOD
, "\033[20;2~", 0, 0},

427 { 
XK_F22
, 
XK_NO_MOD
, "\033[21;2~", 0, 0},

428 { 
XK_F23
, 
XK_NO_MOD
, "\033[23;2~", 0, 0},

429 { 
XK_F24
, 
XK_NO_MOD
, "\033[24;2~", 0, 0},

430 { 
XK_F25
, 
XK_NO_MOD
, "\033[1;5P", 0, 0},

431 { 
XK_F26
, 
XK_NO_MOD
, "\033[1;5Q", 0, 0},

432 { 
XK_F27
, 
XK_NO_MOD
, "\033[1;5R", 0, 0},

433 { 
XK_F28
, 
XK_NO_MOD
, "\033[1;5S", 0, 0},

434 { 
XK_F29
, 
XK_NO_MOD
, "\033[15;5~", 0, 0},

435 { 
XK_F30
, 
XK_NO_MOD
, "\033[17;5~", 0, 0},

436 { 
XK_F31
, 
XK_NO_MOD
, "\033[18;5~", 0, 0},

437 { 
XK_F32
, 
XK_NO_MOD
, "\033[19;5~", 0, 0},

438 { 
XK_F33
, 
XK_NO_MOD
, "\033[20;5~", 0, 0},

439 { 
XK_F34
, 
XK_NO_MOD
, "\033[21;5~", 0, 0},

440 { 
XK_F35
, 
XK_NO_MOD
, "\033[23;5~", 0, 0},

450 
uöt
 
	g£lmasks
[] = {

451 [
SEL_RECTANGULAR
] = 
Mod1Mask
,

458 
	gascii_¥öèbÀ
[] =

	@config.h

8 *
	gf⁄t
 = "Liberation Mono:pixelsize=12:antialias=true:autohint=true";

9 
	gb‹dîpx
 = 2;

19 *
	gshñl
 = "/bin/zsh";

20 *
	gutmp
 = 
NULL
;

21 *
	g°ty_¨gs
 = "sttyÑawÖass8Çl -echo -iexten -cstopb 38400";

24 *
	gvtidí
 = "\033[?6c";

27 
	gcwsˇÀ
 = 1.0;

28 
	gchsˇÀ
 = 1.0;

35 *
	gw‹ddñimôîs
 = " ";

38 
	gdoubÀ˛icktimeout
 = 300;

39 
	gåùÀ˛icktimeout
 = 600;

42 
	gÆlowÆts¸ìn
 = 1;

45 
	gxÂs
 = 120;

46 
	ga˘i⁄Âs
 = 30;

52 
	gblöktimeout
 = 800;

57 
	gcurs‹thick√ss
 = 2;

63 
	gbñlvﬁume
 = 0;

66 *
	gãrm«me
 = "st-256color";

83 
	gèb•a˚s
 = 8;

85 
	~"/home/Æexœi/.ˇche/wÆ/cﬁ‹s-wÆ-°.h
"

132 
	gcurs‹sh≠e
 = 7;

138 
	gcﬁs
 = 80;

139 
	grows
 = 24;

144 
	gmou£sh≠e
 = 
XC_xãrm
;

145 
	gmou£fg
 = 7;

146 
	gmou£bg
 = 0;

152 
	gdeÁu…©å
 = 11;

158 
Mou£Sh‹tcut
 
	gmsh‹tcuts
[] = {

160 { 
Buâ⁄4
, 
XK_ANY_MOD
, "\031" },

161 { 
Buâ⁄5
, 
XK_ANY_MOD
, "\005" },

165 
	#MODKEY
 
Mod1Mask


	)

166 
	#TERMMOD
 (
C⁄åﬁMask
|
Shi·Mask
)

	)

168 
Sh‹tcut
 
	gsh‹tcuts
[] = {

170 { 
XK_ANY_MOD
, 
XK_Bªak
, 
£ndbªak
, {.
i
 = 0} },

171 { 
	gC⁄åﬁMask
, 
	gXK_Pröt
, 
	gtoggÀ¥öãr
, {.
	gi
 = 0} },

172 { 
	gShi·Mask
, 
	gXK_Pröt
, 
	g¥öts¸ìn
, {.
	gi
 = 0} },

173 { 
	gXK_ANY_MOD
, 
	gXK_Pröt
, 
	g¥öt£l
, {.
	gi
 = 0} },

174 { 
	gTERMMOD
, 
	gXK_Pri‹
, 
	gzoom
, {.
	gf
 = +1} },

175 { 
	gTERMMOD
, 
	gXK_Next
, 
	gzoom
, {.
	gf
 = -1} },

176 { 
	gTERMMOD
, 
	gXK_Home
, 
	gzoomª£t
, {.
	gf
 = 0} },

177 { 
	gTERMMOD
, 
	gXK_C
, 
	g˛ùc›y
, {.
	gi
 = 0} },

178 { 
	gTERMMOD
, 
	gXK_V
, 
	g˛ù∑°e
, {.
	gi
 = 0} },

179 { 
	gTERMMOD
, 
	gXK_Y
, 
	g£Õa°e
, {.
	gi
 = 0} },

180 { 
	gTERMMOD
, 
	gXK_Num_Lock
, 
	gnumlock
, {.
	gi
 = 0} },

212 
KeySym
 
	gm≠≥dkeys
[] = { -1 };

218 
uöt
 
	gign‹emod
 = 
Mod2Mask
|
XK_SWITCH_MOD
;

225 
uöt
 
	gf‹˚£lmod
 = 
Shi·Mask
;

231 
Key
 
	gkey
[] = {

233 { 
XK_KP_Home
, 
Shi·Mask
, "\033[2J", 0, -1},

234 { 
XK_KP_Home
, 
Shi·Mask
, "\033[1;2H", 0, +1},

235 { 
XK_KP_Home
, 
XK_ANY_MOD
, "\033[H", 0, -1},

236 { 
XK_KP_Home
, 
XK_ANY_MOD
, "\033[1~", 0, +1},

237 { 
XK_KP_Up
, 
XK_ANY_MOD
, "\033Ox", +1, 0},

238 { 
XK_KP_Up
, 
XK_ANY_MOD
, "\033[A", 0, -1},

239 { 
XK_KP_Up
, 
XK_ANY_MOD
, "\033OA", 0, +1},

240 { 
XK_KP_Down
, 
XK_ANY_MOD
, "\033Or", +1, 0},

241 { 
XK_KP_Down
, 
XK_ANY_MOD
, "\033[B", 0, -1},

242 { 
XK_KP_Down
, 
XK_ANY_MOD
, "\033OB", 0, +1},

243 { 
XK_KP_Le·
, 
XK_ANY_MOD
, "\033Ot", +1, 0},

244 { 
XK_KP_Le·
, 
XK_ANY_MOD
, "\033[D", 0, -1},

245 { 
XK_KP_Le·
, 
XK_ANY_MOD
, "\033OD", 0, +1},

246 { 
XK_KP_Right
, 
XK_ANY_MOD
, "\033Ov", +1, 0},

247 { 
XK_KP_Right
, 
XK_ANY_MOD
, "\033[C", 0, -1},

248 { 
XK_KP_Right
, 
XK_ANY_MOD
, "\033OC", 0, +1},

249 { 
XK_KP_Pri‹
, 
Shi·Mask
, "\033[5;2~", 0, 0},

250 { 
XK_KP_Pri‹
, 
XK_ANY_MOD
, "\033[5~", 0, 0},

251 { 
XK_KP_Begö
, 
XK_ANY_MOD
, "\033[E", 0, 0},

252 { 
XK_KP_End
, 
C⁄åﬁMask
, "\033[J", -1, 0},

253 { 
XK_KP_End
, 
C⁄åﬁMask
, "\033[1;5F", +1, 0},

254 { 
XK_KP_End
, 
Shi·Mask
, "\033[K", -1, 0},

255 { 
XK_KP_End
, 
Shi·Mask
, "\033[1;2F", +1, 0},

256 { 
XK_KP_End
, 
XK_ANY_MOD
, "\033[4~", 0, 0},

257 { 
XK_KP_Next
, 
Shi·Mask
, "\033[6;2~", 0, 0},

258 { 
XK_KP_Next
, 
XK_ANY_MOD
, "\033[6~", 0, 0},

259 { 
XK_KP_In£π
, 
Shi·Mask
, "\033[2;2~", +1, 0},

260 { 
XK_KP_In£π
, 
Shi·Mask
, "\033[4l", -1, 0},

261 { 
XK_KP_In£π
, 
C⁄åﬁMask
, "\033[L", -1, 0},

262 { 
XK_KP_In£π
, 
C⁄åﬁMask
, "\033[2;5~", +1, 0},

263 { 
XK_KP_In£π
, 
XK_ANY_MOD
, "\033[4h", -1, 0},

264 { 
XK_KP_In£π
, 
XK_ANY_MOD
, "\033[2~", +1, 0},

265 { 
XK_KP_Dñëe
, 
C⁄åﬁMask
, "\033[M", -1, 0},

266 { 
XK_KP_Dñëe
, 
C⁄åﬁMask
, "\033[3;5~", +1, 0},

267 { 
XK_KP_Dñëe
, 
Shi·Mask
, "\033[2K", -1, 0},

268 { 
XK_KP_Dñëe
, 
Shi·Mask
, "\033[3;2~", +1, 0},

269 { 
XK_KP_Dñëe
, 
XK_ANY_MOD
, "\033[P", -1, 0},

270 { 
XK_KP_Dñëe
, 
XK_ANY_MOD
, "\033[3~", +1, 0},

271 { 
XK_KP_Mu…ùly
, 
XK_ANY_MOD
, "\033Oj", +2, 0},

272 { 
XK_KP_Add
, 
XK_ANY_MOD
, "\033Ok", +2, 0},

273 { 
XK_KP_E¡î
, 
XK_ANY_MOD
, "\033OM", +2, 0},

274 { 
XK_KP_E¡î
, 
XK_ANY_MOD
, "\r", -1, 0},

275 { 
XK_KP_Subåa˘
, 
XK_ANY_MOD
, "\033Om", +2, 0},

276 { 
XK_KP_DecimÆ
, 
XK_ANY_MOD
, "\033On", +2, 0},

277 { 
XK_KP_Divide
, 
XK_ANY_MOD
, "\033Oo", +2, 0},

278 { 
XK_KP_0
, 
XK_ANY_MOD
, "\033Op", +2, 0},

279 { 
XK_KP_1
, 
XK_ANY_MOD
, "\033Oq", +2, 0},

280 { 
XK_KP_2
, 
XK_ANY_MOD
, "\033Or", +2, 0},

281 { 
XK_KP_3
, 
XK_ANY_MOD
, "\033Os", +2, 0},

282 { 
XK_KP_4
, 
XK_ANY_MOD
, "\033Ot", +2, 0},

283 { 
XK_KP_5
, 
XK_ANY_MOD
, "\033Ou", +2, 0},

284 { 
XK_KP_6
, 
XK_ANY_MOD
, "\033Ov", +2, 0},

285 { 
XK_KP_7
, 
XK_ANY_MOD
, "\033Ow", +2, 0},

286 { 
XK_KP_8
, 
XK_ANY_MOD
, "\033Ox", +2, 0},

287 { 
XK_KP_9
, 
XK_ANY_MOD
, "\033Oy", +2, 0},

288 { 
XK_Up
, 
Shi·Mask
, "\033[1;2A", 0, 0},

289 { 
XK_Up
, 
Mod1Mask
, "\033[1;3A", 0, 0},

290 { 
XK_Up
, 
Shi·Mask
|
Mod1Mask
,"\033[1;4A", 0, 0},

291 { 
XK_Up
, 
C⁄åﬁMask
, "\033[1;5A", 0, 0},

292 { 
XK_Up
, 
Shi·Mask
|
C⁄åﬁMask
,"\033[1;6A", 0, 0},

293 { 
XK_Up
, 
C⁄åﬁMask
|
Mod1Mask
,"\033[1;7A", 0, 0},

294 { 
XK_Up
,
Shi·Mask
|
C⁄åﬁMask
|
Mod1Mask
,"\033[1;8A", 0, 0},

295 { 
XK_Up
, 
XK_ANY_MOD
, "\033[A", 0, -1},

296 { 
XK_Up
, 
XK_ANY_MOD
, "\033OA", 0, +1},

297 { 
XK_Down
, 
Shi·Mask
, "\033[1;2B", 0, 0},

298 { 
XK_Down
, 
Mod1Mask
, "\033[1;3B", 0, 0},

299 { 
XK_Down
, 
Shi·Mask
|
Mod1Mask
,"\033[1;4B", 0, 0},

300 { 
XK_Down
, 
C⁄åﬁMask
, "\033[1;5B", 0, 0},

301 { 
XK_Down
, 
Shi·Mask
|
C⁄åﬁMask
,"\033[1;6B", 0, 0},

302 { 
XK_Down
, 
C⁄åﬁMask
|
Mod1Mask
,"\033[1;7B", 0, 0},

303 { 
XK_Down
,
Shi·Mask
|
C⁄åﬁMask
|
Mod1Mask
,"\033[1;8B",0, 0},

304 { 
XK_Down
, 
XK_ANY_MOD
, "\033[B", 0, -1},

305 { 
XK_Down
, 
XK_ANY_MOD
, "\033OB", 0, +1},

306 { 
XK_Le·
, 
Shi·Mask
, "\033[1;2D", 0, 0},

307 { 
XK_Le·
, 
Mod1Mask
, "\033[1;3D", 0, 0},

308 { 
XK_Le·
, 
Shi·Mask
|
Mod1Mask
,"\033[1;4D", 0, 0},

309 { 
XK_Le·
, 
C⁄åﬁMask
, "\033[1;5D", 0, 0},

310 { 
XK_Le·
, 
Shi·Mask
|
C⁄åﬁMask
,"\033[1;6D", 0, 0},

311 { 
XK_Le·
, 
C⁄åﬁMask
|
Mod1Mask
,"\033[1;7D", 0, 0},

312 { 
XK_Le·
,
Shi·Mask
|
C⁄åﬁMask
|
Mod1Mask
,"\033[1;8D",0, 0},

313 { 
XK_Le·
, 
XK_ANY_MOD
, "\033[D", 0, -1},

314 { 
XK_Le·
, 
XK_ANY_MOD
, "\033OD", 0, +1},

315 { 
XK_Right
, 
Shi·Mask
, "\033[1;2C", 0, 0},

316 { 
XK_Right
, 
Mod1Mask
, "\033[1;3C", 0, 0},

317 { 
XK_Right
, 
Shi·Mask
|
Mod1Mask
,"\033[1;4C", 0, 0},

318 { 
XK_Right
, 
C⁄åﬁMask
, "\033[1;5C", 0, 0},

319 { 
XK_Right
, 
Shi·Mask
|
C⁄åﬁMask
,"\033[1;6C", 0, 0},

320 { 
XK_Right
, 
C⁄åﬁMask
|
Mod1Mask
,"\033[1;7C", 0, 0},

321 { 
XK_Right
,
Shi·Mask
|
C⁄åﬁMask
|
Mod1Mask
,"\033[1;8C",0, 0},

322 { 
XK_Right
, 
XK_ANY_MOD
, "\033[C", 0, -1},

323 { 
XK_Right
, 
XK_ANY_MOD
, "\033OC", 0, +1},

324 { 
XK_ISO_Le·_Tab
, 
Shi·Mask
, "\033[Z", 0, 0},

325 { 
XK_Rëu∫
, 
Mod1Mask
, "\033\r", 0, 0},

326 { 
XK_Rëu∫
, 
XK_ANY_MOD
, "\r", 0, 0},

327 { 
XK_In£π
, 
Shi·Mask
, "\033[4l", -1, 0},

328 { 
XK_In£π
, 
Shi·Mask
, "\033[2;2~", +1, 0},

329 { 
XK_In£π
, 
C⁄åﬁMask
, "\033[L", -1, 0},

330 { 
XK_In£π
, 
C⁄åﬁMask
, "\033[2;5~", +1, 0},

331 { 
XK_In£π
, 
XK_ANY_MOD
, "\033[4h", -1, 0},

332 { 
XK_In£π
, 
XK_ANY_MOD
, "\033[2~", +1, 0},

333 { 
XK_Dñëe
, 
C⁄åﬁMask
, "\033[M", -1, 0},

334 { 
XK_Dñëe
, 
C⁄åﬁMask
, "\033[3;5~", +1, 0},

335 { 
XK_Dñëe
, 
Shi·Mask
, "\033[2K", -1, 0},

336 { 
XK_Dñëe
, 
Shi·Mask
, "\033[3;2~", +1, 0},

337 { 
XK_Dñëe
, 
XK_ANY_MOD
, "\033[P", -1, 0},

338 { 
XK_Dñëe
, 
XK_ANY_MOD
, "\033[3~", +1, 0},

339 { 
XK_BackS∑˚
, 
XK_NO_MOD
, "\177", 0, 0},

340 { 
XK_BackS∑˚
, 
Mod1Mask
, "\033\177", 0, 0},

341 { 
XK_Home
, 
Shi·Mask
, "\033[2J", 0, -1},

342 { 
XK_Home
, 
Shi·Mask
, "\033[1;2H", 0, +1},

343 { 
XK_Home
, 
XK_ANY_MOD
, "\033[H", 0, -1},

344 { 
XK_Home
, 
XK_ANY_MOD
, "\033[1~", 0, +1},

345 { 
XK_End
, 
C⁄åﬁMask
, "\033[J", -1, 0},

346 { 
XK_End
, 
C⁄åﬁMask
, "\033[1;5F", +1, 0},

347 { 
XK_End
, 
Shi·Mask
, "\033[K", -1, 0},

348 { 
XK_End
, 
Shi·Mask
, "\033[1;2F", +1, 0},

349 { 
XK_End
, 
XK_ANY_MOD
, "\033[4~", 0, 0},

350 { 
XK_Pri‹
, 
C⁄åﬁMask
, "\033[5;5~", 0, 0},

351 { 
XK_Pri‹
, 
Shi·Mask
, "\033[5;2~", 0, 0},

352 { 
XK_Pri‹
, 
XK_ANY_MOD
, "\033[5~", 0, 0},

353 { 
XK_Next
, 
C⁄åﬁMask
, "\033[6;5~", 0, 0},

354 { 
XK_Next
, 
Shi·Mask
, "\033[6;2~", 0, 0},

355 { 
XK_Next
, 
XK_ANY_MOD
, "\033[6~", 0, 0},

356 { 
XK_F1
, 
XK_NO_MOD
, "\033OP" , 0, 0},

357 { 
XK_F1
, 
Shi·Mask
, "\033[1;2P", 0, 0},

358 { 
XK_F1
, 
C⁄åﬁMask
, "\033[1;5P", 0, 0},

359 { 
XK_F1
, 
Mod4Mask
, "\033[1;6P", 0, 0},

360 { 
XK_F1
, 
Mod1Mask
, "\033[1;3P", 0, 0},

361 { 
XK_F1
, 
Mod3Mask
, "\033[1;4P", 0, 0},

362 { 
XK_F2
, 
XK_NO_MOD
, "\033OQ" , 0, 0},

363 { 
XK_F2
, 
Shi·Mask
, "\033[1;2Q", 0, 0},

364 { 
XK_F2
, 
C⁄åﬁMask
, "\033[1;5Q", 0, 0},

365 { 
XK_F2
, 
Mod4Mask
, "\033[1;6Q", 0, 0},

366 { 
XK_F2
, 
Mod1Mask
, "\033[1;3Q", 0, 0},

367 { 
XK_F2
, 
Mod3Mask
, "\033[1;4Q", 0, 0},

368 { 
XK_F3
, 
XK_NO_MOD
, "\033OR" , 0, 0},

369 { 
XK_F3
, 
Shi·Mask
, "\033[1;2R", 0, 0},

370 { 
XK_F3
, 
C⁄åﬁMask
, "\033[1;5R", 0, 0},

371 { 
XK_F3
, 
Mod4Mask
, "\033[1;6R", 0, 0},

372 { 
XK_F3
, 
Mod1Mask
, "\033[1;3R", 0, 0},

373 { 
XK_F3
, 
Mod3Mask
, "\033[1;4R", 0, 0},

374 { 
XK_F4
, 
XK_NO_MOD
, "\033OS" , 0, 0},

375 { 
XK_F4
, 
Shi·Mask
, "\033[1;2S", 0, 0},

376 { 
XK_F4
, 
C⁄åﬁMask
, "\033[1;5S", 0, 0},

377 { 
XK_F4
, 
Mod4Mask
, "\033[1;6S", 0, 0},

378 { 
XK_F4
, 
Mod1Mask
, "\033[1;3S", 0, 0},

379 { 
XK_F5
, 
XK_NO_MOD
, "\033[15~", 0, 0},

380 { 
XK_F5
, 
Shi·Mask
, "\033[15;2~", 0, 0},

381 { 
XK_F5
, 
C⁄åﬁMask
, "\033[15;5~", 0, 0},

382 { 
XK_F5
, 
Mod4Mask
, "\033[15;6~", 0, 0},

383 { 
XK_F5
, 
Mod1Mask
, "\033[15;3~", 0, 0},

384 { 
XK_F6
, 
XK_NO_MOD
, "\033[17~", 0, 0},

385 { 
XK_F6
, 
Shi·Mask
, "\033[17;2~", 0, 0},

386 { 
XK_F6
, 
C⁄åﬁMask
, "\033[17;5~", 0, 0},

387 { 
XK_F6
, 
Mod4Mask
, "\033[17;6~", 0, 0},

388 { 
XK_F6
, 
Mod1Mask
, "\033[17;3~", 0, 0},

389 { 
XK_F7
, 
XK_NO_MOD
, "\033[18~", 0, 0},

390 { 
XK_F7
, 
Shi·Mask
, "\033[18;2~", 0, 0},

391 { 
XK_F7
, 
C⁄åﬁMask
, "\033[18;5~", 0, 0},

392 { 
XK_F7
, 
Mod4Mask
, "\033[18;6~", 0, 0},

393 { 
XK_F7
, 
Mod1Mask
, "\033[18;3~", 0, 0},

394 { 
XK_F8
, 
XK_NO_MOD
, "\033[19~", 0, 0},

395 { 
XK_F8
, 
Shi·Mask
, "\033[19;2~", 0, 0},

396 { 
XK_F8
, 
C⁄åﬁMask
, "\033[19;5~", 0, 0},

397 { 
XK_F8
, 
Mod4Mask
, "\033[19;6~", 0, 0},

398 { 
XK_F8
, 
Mod1Mask
, "\033[19;3~", 0, 0},

399 { 
XK_F9
, 
XK_NO_MOD
, "\033[20~", 0, 0},

400 { 
XK_F9
, 
Shi·Mask
, "\033[20;2~", 0, 0},

401 { 
XK_F9
, 
C⁄åﬁMask
, "\033[20;5~", 0, 0},

402 { 
XK_F9
, 
Mod4Mask
, "\033[20;6~", 0, 0},

403 { 
XK_F9
, 
Mod1Mask
, "\033[20;3~", 0, 0},

404 { 
XK_F10
, 
XK_NO_MOD
, "\033[21~", 0, 0},

405 { 
XK_F10
, 
Shi·Mask
, "\033[21;2~", 0, 0},

406 { 
XK_F10
, 
C⁄åﬁMask
, "\033[21;5~", 0, 0},

407 { 
XK_F10
, 
Mod4Mask
, "\033[21;6~", 0, 0},

408 { 
XK_F10
, 
Mod1Mask
, "\033[21;3~", 0, 0},

409 { 
XK_F11
, 
XK_NO_MOD
, "\033[23~", 0, 0},

410 { 
XK_F11
, 
Shi·Mask
, "\033[23;2~", 0, 0},

411 { 
XK_F11
, 
C⁄åﬁMask
, "\033[23;5~", 0, 0},

412 { 
XK_F11
, 
Mod4Mask
, "\033[23;6~", 0, 0},

413 { 
XK_F11
, 
Mod1Mask
, "\033[23;3~", 0, 0},

414 { 
XK_F12
, 
XK_NO_MOD
, "\033[24~", 0, 0},

415 { 
XK_F12
, 
Shi·Mask
, "\033[24;2~", 0, 0},

416 { 
XK_F12
, 
C⁄åﬁMask
, "\033[24;5~", 0, 0},

417 { 
XK_F12
, 
Mod4Mask
, "\033[24;6~", 0, 0},

418 { 
XK_F12
, 
Mod1Mask
, "\033[24;3~", 0, 0},

419 { 
XK_F13
, 
XK_NO_MOD
, "\033[1;2P", 0, 0},

420 { 
XK_F14
, 
XK_NO_MOD
, "\033[1;2Q", 0, 0},

421 { 
XK_F15
, 
XK_NO_MOD
, "\033[1;2R", 0, 0},

422 { 
XK_F16
, 
XK_NO_MOD
, "\033[1;2S", 0, 0},

423 { 
XK_F17
, 
XK_NO_MOD
, "\033[15;2~", 0, 0},

424 { 
XK_F18
, 
XK_NO_MOD
, "\033[17;2~", 0, 0},

425 { 
XK_F19
, 
XK_NO_MOD
, "\033[18;2~", 0, 0},

426 { 
XK_F20
, 
XK_NO_MOD
, "\033[19;2~", 0, 0},

427 { 
XK_F21
, 
XK_NO_MOD
, "\033[20;2~", 0, 0},

428 { 
XK_F22
, 
XK_NO_MOD
, "\033[21;2~", 0, 0},

429 { 
XK_F23
, 
XK_NO_MOD
, "\033[23;2~", 0, 0},

430 { 
XK_F24
, 
XK_NO_MOD
, "\033[24;2~", 0, 0},

431 { 
XK_F25
, 
XK_NO_MOD
, "\033[1;5P", 0, 0},

432 { 
XK_F26
, 
XK_NO_MOD
, "\033[1;5Q", 0, 0},

433 { 
XK_F27
, 
XK_NO_MOD
, "\033[1;5R", 0, 0},

434 { 
XK_F28
, 
XK_NO_MOD
, "\033[1;5S", 0, 0},

435 { 
XK_F29
, 
XK_NO_MOD
, "\033[15;5~", 0, 0},

436 { 
XK_F30
, 
XK_NO_MOD
, "\033[17;5~", 0, 0},

437 { 
XK_F31
, 
XK_NO_MOD
, "\033[18;5~", 0, 0},

438 { 
XK_F32
, 
XK_NO_MOD
, "\033[19;5~", 0, 0},

439 { 
XK_F33
, 
XK_NO_MOD
, "\033[20;5~", 0, 0},

440 { 
XK_F34
, 
XK_NO_MOD
, "\033[21;5~", 0, 0},

441 { 
XK_F35
, 
XK_NO_MOD
, "\033[23;5~", 0, 0},

451 
uöt
 
	g£lmasks
[] = {

452 [
SEL_RECTANGULAR
] = 
Mod1Mask
,

459 
	gascii_¥öèbÀ
[] =

	@st.c

2 
	~<˘y≥.h
>

3 
	~<î∫o.h
>

4 
	~<f˙é.h
>

5 
	~<limôs.h
>

6 
	~<pwd.h
>

7 
	~<°d¨g.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<sig«l.h
>

12 
	~<sys/io˘l.h
>

13 
	~<sys/£À˘.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/waô.h
>

16 
	~<ãrmios.h
>

17 
	~<uni°d.h
>

18 
	~<wch¨.h
>

20 
	~"°.h
"

21 
	~"wö.h
"

23 #i‡ 
deföed
(
__löux
)

24 
	~<±y.h
>

25 #ñi‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__APPLE__
)

26 
	~<utû.h
>

27 #ñi‡
deföed
(
__FªeBSD__
Ë|| deföed(
__Døg⁄Fly__
)

28 
	~<libutû.h
>

32 
	#UTF_INVALID
 0xFFFD

	)

33 
	#UTF_SIZ
 4

	)

34 
	#ESC_BUF_SIZ
 (128*
UTF_SIZ
)

	)

35 
	#ESC_ARG_SIZ
 16

	)

36 
	#STR_BUF_SIZ
 
ESC_BUF_SIZ


	)

37 
	#STR_ARG_SIZ
 
ESC_ARG_SIZ


	)

40 
	#IS_SET
(
Êag
Ë((
ãrm
.
mode
 & (Êag)Ë!0)

	)

41 
	#ISCONTROLC0
(
c
Ë(
	`BETWEEN
(c, 0, 0x1fË|| (cË='\177')

	)

42 
	#ISCONTROLC1
(
c
Ë(
	`BETWEEN
(c, 0x80, 0x9f))

	)

43 
	#ISCONTROL
(
c
Ë(
	`ISCONTROLC0
(cË|| 
	`ISCONTROLC1
(c))

	)

44 
	#ISDELIM
(
u
Ë(
	`utf8°rchr
(
w‹ddñimôîs
, uË!
NULL
)

	)

46 
	eãrm_mode
 {

47 
	mMODE_WRAP
 = 1 << 0,

48 
	mMODE_INSERT
 = 1 << 1,

49 
	mMODE_ALTSCREEN
 = 1 << 2,

50 
	mMODE_CRLF
 = 1 << 3,

51 
	mMODE_ECHO
 = 1 << 4,

52 
	mMODE_PRINT
 = 1 << 5,

53 
	mMODE_UTF8
 = 1 << 6,

54 
	mMODE_SIXEL
 = 1 << 7,

57 
	ecurs‹_movemít
 {

58 
	mCURSOR_SAVE
,

59 
	mCURSOR_LOAD


62 
	ecurs‹_°©e
 {

63 
	mCURSOR_DEFAULT
 = 0,

64 
	mCURSOR_WRAPNEXT
 = 1,

65 
	mCURSOR_ORIGIN
 = 2

68 
	ech¨£t
 {

69 
	mCS_GRAPHIC0
,

70 
	mCS_GRAPHIC1
,

71 
	mCS_UK
,

72 
	mCS_USA
,

73 
	mCS_MULTI
,

74 
	mCS_GER
,

75 
	mCS_FIN


78 
	eesˇ≥_°©e
 {

79 
	mESC_START
 = 1,

80 
	mESC_CSI
 = 2,

81 
	mESC_STR
 = 4,

82 
	mESC_ALTCHARSET
 = 8,

83 
	mESC_STR_END
 = 16,

84 
	mESC_TEST
 = 32,

85 
	mESC_UTF8
 = 64,

86 
	mESC_DCS
 =128,

90 
Glyph
 
	m©å
;

91 
	mx
;

92 
	my
;

93 
	m°©e
;

94 } 
	tTCurs‹
;

97 
	mmode
;

98 
	mty≥
;

99 
	m¢≠
;

108 
	mx
, 
	my
;

109 } 
	mnb
, 
	m√
, 
	mob
, 
	m€
;

111 
	mÆt
;

112 } 
	tSñe˘i⁄
;

116 
	mrow
;

117 
	mcﬁ
;

118 
Löe
 *
	mlöe
;

119 
Löe
 *
	mÆt
;

120 *
	mdúty
;

121 
TCurs‹
 
	mc
;

122 
	mocx
;

123 
	mocy
;

124 
	mt›
;

125 
	mbŸ
;

126 
	mmode
;

127 
	mesc
;

128 
	må™tbl
[4];

129 
	mch¨£t
;

130 
	mich¨£t
;

131 *
	mèbs
;

132 } 
	tTîm
;

137 
	mbuf
[
ESC_BUF_SIZ
];

138 
	mÀn
;

139 
	m¥iv
;

140 
	m¨g
[
ESC_ARG_SIZ
];

141 
	m«rg
;

142 
	mmode
[2];

143 } 
	tCSIEsˇ≥
;

148 
	mty≥
;

149 
	mbuf
[
STR_BUF_SIZ
];

150 
	mÀn
;

151 *
	m¨gs
[
STR_ARG_SIZ
];

152 
	m«rg
;

153 } 
	tSTREsˇ≥
;

155 
execsh
(*, **);

156 
°ty
(**);

157 
sigchld
();

158 
âywrôîaw
(c⁄° *, 
size_t
);

160 
csidump
();

161 
csih™dÀ
();

162 
csù¨£
();

163 
csúe£t
();

164 
esch™dÀ
(
uch¨
);

165 
°rdump
();

166 
°rh™dÀ
();

167 
°Ω¨£
();

168 
°ºe£t
();

170 
çröãr
(*, 
size_t
);

171 
tdump£l
();

172 
tdum∂öe
();

173 
tdump
();

174 
t˛óºegi⁄
(, , , );

175 
tcurs‹
();

176 
tdñëech¨
();

177 
tdñëñöe
();

178 
tö£πbœnk
();

179 
tö£πbœnklöe
();

180 
éöñí
();

181 
tmovëo
(, );

182 
tmovóto
(, );

183 
äewlöe
();

184 
çuâab
();

185 
çutc
(
Ru√
);

186 
åe£t
();

187 
ts¸ﬁlup
(, );

188 
ts¸ﬁldown
(, );

189 
t£èâr
(*, );

190 
t£tch¨
(
Ru√
, 
Glyph
 *, , );

191 
t£tdút
(, );

192 
t£ts¸ﬁl
(, );

193 
tsw≠s¸ìn
();

194 
t£tmode
(, , *, );

195 
twrôe
(const *, , );

196 
tfuŒdút
();

197 
tc⁄åﬁcode
(
uch¨
 );

198 
tde˘e°
();

199 
tdefutf8
();

200 
öt32_t
 
tdefcﬁ‹
(*, *, );

201 
tde·øn
();

202 
t°r£quí˚
(
uch¨
);

204 
døwªgi⁄
(, , , );

206 
£ ‹mÆize
();

207 
£ls¸ﬁl
(, );

208 
£l¢≠
(*, *, );

210 
size_t
 
utf8decode
(c⁄° *, 
Ru√
 *, size_t);

211 
Ru√
 
utf8decodebyã
(, 
size_t
 *);

212 
utf8ícodebyã
(
Ru√
, 
size_t
);

213 *
utf8°rchr
(*, 
Ru√
);

214 
size_t
 
utf8vÆid©e
(
Ru√
 *, size_t);

216 *
ba£64dec
(const *);

217 
ba£64dec_gëc
(const **);

219 
ssize_t
 
xwrôe
(, c⁄° *, 
size_t
);

222 
Tîm
 
	gãrm
;

223 
Sñe˘i⁄
 
	g£l
;

224 
CSIEsˇ≥
 
	gcsõsc£q
;

225 
STREsˇ≥
 
	g°ªsc£q
;

226 
	giofd
 = 1;

227 
	gcmdfd
;

228 
pid_t
 
	gpid
;

230 
uch¨
 
	gutfbyã
[
UTF_SIZ
 + 1] = {0x80, 0, 0xC0, 0xE0, 0xF0};

231 
uch¨
 
	gutfmask
[
UTF_SIZ
 + 1] = {0xC0, 0x80, 0xE0, 0xF0, 0xF8};

232 
Ru√
 
	gutfmö
[
UTF_SIZ
 + 1] = { 0, 0, 0x80, 0x800, 0x10000};

233 
Ru√
 
	gutfmax
[
UTF_SIZ
 + 1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};

235 
ssize_t


236 
	$xwrôe
(
fd
, c⁄° *
s
, 
size_t
 
Àn
)

238 
size_t
 
aux
 = 
Àn
;

239 
ssize_t
 
r
;

241 
Àn
 > 0) {

242 
r
 = 
	`wrôe
(
fd
, 
s
, 
Àn
);

243 i‡(
r
 < 0)

244  
r
;

245 
Àn
 -
r
;

246 
s
 +
r
;

249  
aux
;

250 
	}
}

253 
	$xmÆloc
(
size_t
 
Àn
)

255 *
p
;

257 i‡(!(
p
 = 
	`mÆloc
(
Àn
)))

258 
	`dõ
("mÆloc: %s\n", 
	`°ªº‹
(
î∫o
));

260  
p
;

261 
	}
}

264 
	$xªÆloc
(*
p
, 
size_t
 
Àn
)

266 i‡((
p
 = 
	`ªÆloc
’, 
Àn
)Ë=
NULL
)

267 
	`dõ
("ªÆloc: %s\n", 
	`°ªº‹
(
î∫o
));

269  
p
;

270 
	}
}

273 
	$x°rdup
(*
s
)

275 i‡((
s
 = 
	`°rdup
(s)Ë=
NULL
)

276 
	`dõ
("°rdup: %s\n", 
	`°ªº‹
(
î∫o
));

278  
s
;

279 
	}
}

281 
size_t


282 
	$utf8decode
(c⁄° *
c
, 
Ru√
 *
u
, 
size_t
 
˛í
)

284 
size_t
 
i
, 
j
, 
Àn
, 
ty≥
;

285 
Ru√
 
udecoded
;

287 *
u
 = 
UTF_INVALID
;

288 i‡(!
˛í
)

290 
udecoded
 = 
	`utf8decodebyã
(
c
[0], &
Àn
);

291 i‡(!
	`BETWEEN
(
Àn
, 1, 
UTF_SIZ
))

293 
i
 = 1, 
j
 = 1; i < 
˛í
 && j < 
Àn
; ++i, ++j) {

294 
udecoded
 = (udecoded << 6Ë| 
	`utf8decodebyã
(
c
[
i
], &
ty≥
);

295 i‡(
ty≥
 != 0)

296  
j
;

298 i‡(
j
 < 
Àn
)

300 *
u
 = 
udecoded
;

301 
	`utf8vÆid©e
(
u
, 
Àn
);

303  
Àn
;

304 
	}
}

306 
Ru√


307 
	$utf8decodebyã
(
c
, 
size_t
 *
i
)

309 *
i
 = 0; *ò< 
	`LEN
(
utfmask
); ++(*i))

310 i‡(((
uch¨
)
c
 & 
utfmask
[*
i
]Ë=
utfbyã
[*i])

311  (
uch¨
)
c
 & ~
utfmask
[*
i
];

314 
	}
}

316 
size_t


317 
	$utf8ícode
(
Ru√
 
u
, *
c
)

319 
size_t
 
Àn
, 
i
;

321 
Àn
 = 
	`utf8vÆid©e
(&
u
, 0);

322 i‡(
Àn
 > 
UTF_SIZ
)

325 
i
 = 
Àn
 - 1; i != 0; --i) {

326 
c
[
i
] = 
	`utf8ícodebyã
(
u
, 0);

327 
u
 >>= 6;

329 
c
[0] = 
	`utf8ícodebyã
(
u
, 
Àn
);

331  
Àn
;

332 
	}
}

335 
	$utf8ícodebyã
(
Ru√
 
u
, 
size_t
 
i
)

337  
utfbyã
[
i
] | (
u
 & ~
utfmask
[i]);

338 
	}
}

341 
	$utf8°rchr
(*
s
, 
Ru√
 
u
)

343 
Ru√
 
r
;

344 
size_t
 
i
, 
j
, 
Àn
;

346 
Àn
 = 
	`°æí
(
s
);

347 
i
 = 0, 
j
 = 0; i < 
Àn
; i += j) {

348 i‡(!(
j
 = 
	`utf8decode
(&
s
[
i
], &
r
, 
Àn
 - i)))

350 i‡(
r
 =
u
)

351  &(
s
[
i
]);

354  
NULL
;

355 
	}
}

357 
size_t


358 
	$utf8vÆid©e
(
Ru√
 *
u
, 
size_t
 
i
)

360 i‡(!
	`BETWEEN
(*
u
, 
utfmö
[
i
], 
utfmax
[i]) || BETWEEN(*u, 0xD800, 0xDFFF))

361 *
u
 = 
UTF_INVALID
;

362 
i
 = 1; *
u
 > 
utfmax
[i]; ++i)

365  
i
;

366 
	}
}

368 c⁄° 
	gba£64_digôs
[] = {

384 
	$ba£64dec_gëc
(c⁄° **
§c
)

386 **
§c
 && !
	`i•röt
(**src)) (*src)++;

387  *((*
§c
)++);

388 
	}
}

391 
	$ba£64dec
(c⁄° *
§c
)

393 
size_t
 
ö_Àn
 = 
	`°æí
(
§c
);

394 *
ªsu…
, *
d°
;

396 i‡(
ö_Àn
 % 4)

397 
ö_Àn
 += 4 - (in_len % 4);

398 
ªsu…
 = 
d°
 = 
	`xmÆloc
(
ö_Àn
 / 4 * 3 + 1);

399 *
§c
) {

400 
a
 = 
ba£64_digôs
[(Ë
	`ba£64dec_gëc
(&
§c
)];

401 
b
 = 
ba£64_digôs
[(Ë
	`ba£64dec_gëc
(&
§c
)];

402 
c
 = 
ba£64_digôs
[(Ë
	`ba£64dec_gëc
(&
§c
)];

403 
d
 = 
ba£64_digôs
[(Ë
	`ba£64dec_gëc
(&
§c
)];

405 *
d°
++ = (
a
 << 2Ë| ((
b
 & 0x30) >> 4);

406 i‡(
c
 == -1)

408 *
d°
++ = ((
b
 & 0x0fË<< 4Ë| ((
c
 & 0x3c) >> 2);

409 i‡(
d
 == -1)

411 *
d°
++ = ((
c
 & 0x03Ë<< 6Ë| 
d
;

413 *
d°
 = '\0';

414  
ªsu…
;

415 
	}
}

418 
	$£löô
()

420 
£l
.
mode
 = 
SEL_IDLE
;

421 
£l
.
¢≠
 = 0;

422 
£l
.
ob
.
x
 = -1;

423 
	}
}

426 
	$éöñí
(
y
)

428 
i
 = 
ãrm
.
cﬁ
;

430 i‡(
ãrm
.
löe
[
y
][
i
 - 1].
mode
 & 
ATTR_WRAP
)

431  
i
;

433 
i
 > 0 && 
ãrm
.
löe
[
y
][ò- 1].
u
 == ' ')

434 --
i
;

436  
i
;

437 
	}
}

440 
	$£l°¨t
(
cﬁ
, 
row
, 
¢≠
)

442 
	`£l˛ór
();

443 
£l
.
mode
 = 
SEL_EMPTY
;

444 
£l
.
ty≥
 = 
SEL_REGULAR
;

445 
£l
.
Æt
 = 
	`IS_SET
(
MODE_ALTSCREEN
);

446 
£l
.
¢≠
 = snap;

447 
£l
.
€
.
x
 = sñ.
ob
.x = 
cﬁ
;

448 
£l
.
€
.
y
 = sñ.
ob
.y = 
row
;

449 
	`£ ‹mÆize
();

451 i‡(
£l
.
¢≠
 != 0)

452 
£l
.
mode
 = 
SEL_READY
;

453 
	`t£tdút
(
£l
.
nb
.
y
, sñ.
√
.y);

454 
	}
}

457 
	$£Àxãnd
(
cﬁ
, 
row
, 
ty≥
, 
d⁄e
)

459 
ﬁdey
, 
ﬁdex
, 
ﬁdsby
, 
ﬁd£y
, 
ﬁdty≥
;

461 i‡(
£l
.
mode
 =
SEL_IDLE
)

463 i‡(
d⁄e
 && 
£l
.
mode
 =
SEL_EMPTY
) {

464 
	`£l˛ór
();

468 
ﬁdey
 = 
£l
.
€
.
y
;

469 
ﬁdex
 = 
£l
.
€
.
x
;

470 
ﬁdsby
 = 
£l
.
nb
.
y
;

471 
ﬁd£y
 = 
£l
.
√
.
y
;

472 
ﬁdty≥
 = 
£l
.
ty≥
;

474 
£l
.
€
.
x
 = 
cﬁ
;

475 
£l
.
€
.
y
 = 
row
;

476 
	`£ ‹mÆize
();

477 
£l
.
ty≥
 =Åype;

479 i‡(
ﬁdey
 !
£l
.
€
.
y
 || 
ﬁdex
 !£l.€.
x
 || 
ﬁdty≥
 !£l.
ty≥
)

480 
	`t£tdút
(
	`MIN
(
£l
.
nb
.
y
, 
ﬁdsby
), 
	`MAX
(£l.
√
.y, 
ﬁd£y
));

482 
£l
.
mode
 = 
d⁄e
 ? 
SEL_IDLE
 : 
SEL_READY
;

483 
	}
}

486 
	$£ ‹mÆize
()

488 
i
;

490 i‡(
£l
.
ty≥
 =
SEL_REGULAR
 && sñ.
ob
.
y
 !£l.
€
.y) {

491 
£l
.
nb
.
x
 = sñ.
ob
.
y
 < sñ.
€
.y ? sel.ob.x : sel.oe.x;

492 
£l
.
√
.
x
 = sñ.
ob
.
y
 < sñ.
€
.y ? sel.oe.x : sel.ob.x;

494 
£l
.
nb
.
x
 = 
	`MIN
(£l.
ob
.x, sñ.
€
.x);

495 
£l
.
√
.
x
 = 
	`MAX
(£l.
ob
.x, sñ.
€
.x);

497 
£l
.
nb
.
y
 = 
	`MIN
(£l.
ob
.y, sñ.
€
.y);

498 
£l
.
√
.
y
 = 
	`MAX
(£l.
ob
.y, sñ.
€
.y);

500 
	`£l¢≠
(&
£l
.
nb
.
x
, &£l.nb.
y
, -1);

501 
	`£l¢≠
(&
£l
.
√
.
x
, &£l.√.
y
, +1);

504 i‡(
£l
.
ty≥
 =
SEL_RECTANGULAR
)

506 
i
 = 
	`éöñí
(
£l
.
nb
.
y
);

507 i‡(
i
 < 
£l
.
nb
.
x
)

508 
£l
.
nb
.
x
 = 
i
;

509 i‡(
	`éöñí
(
£l
.
√
.
y
Ë<£l.√.
x
)

510 
£l
.
√
.
x
 = 
ãrm
.
cﬁ
 - 1;

511 
	}
}

514 
	$£À˘ed
(
x
, 
y
)

516 i‡(
£l
.
mode
 =
SEL_EMPTY
 || sñ.
ob
.
x
 == -1 ||

517 
£l
.
Æt
 !
	`IS_SET
(
MODE_ALTSCREEN
))

520 i‡(
£l
.
ty≥
 =
SEL_RECTANGULAR
)

521  
	`BETWEEN
(
y
, 
£l
.
nb
.y, sñ.
√
.y)

522 && 
	`BETWEEN
(
x
, 
£l
.
nb
.x, sñ.
√
.x);

524  
	`BETWEEN
(
y
, 
£l
.
nb
.y, sñ.
√
.y)

525 && (
y
 !
£l
.
nb
.y || 
x
 >= sel.nb.x)

526 && (
y
 !
£l
.
√
.y || 
x
 <= sel.ne.x);

527 
	}
}

530 
	$£l¢≠
(*
x
, *
y
, 
dúe˘i⁄
)

532 
√wx
, 
√wy
, 
xt
, 
yt
;

533 
dñim
, 
¥evdñim
;

534 
Glyph
 *
gp
, *
¥evgp
;

536 
£l
.
¢≠
) {

537 
SNAP_WORD
:

542 
¥evgp
 = &
ãrm
.
löe
[*
y
][*
x
];

543 
¥evdñim
 = 
	`ISDELIM
(
¥evgp
->
u
);

545 
√wx
 = *
x
 + 
dúe˘i⁄
;

546 
√wy
 = *
y
;

547 i‡(!
	`BETWEEN
(
√wx
, 0, 
ãrm
.
cﬁ
 - 1)) {

548 
√wy
 +
dúe˘i⁄
;

549 
√wx
 = (√wx + 
ãrm
.
cﬁ
) %Åerm.col;

550 i‡(!
	`BETWEEN
(
√wy
, 0, 
ãrm
.
row
 - 1))

553 i‡(
dúe˘i⁄
 > 0)

554 
yt
 = *
y
, 
xt
 = *
x
;

556 
yt
 = 
√wy
, 
xt
 = 
√wx
;

557 i‡(!(
ãrm
.
löe
[
yt
][
xt
].
mode
 & 
ATTR_WRAP
))

561 i‡(
√wx
 >
	`éöñí
(
√wy
))

564 
gp
 = &
ãrm
.
löe
[
√wy
][
√wx
];

565 
dñim
 = 
	`ISDELIM
(
gp
->
u
);

566 i‡(!(
gp
->
mode
 & 
ATTR_WDUMMY
Ë&& (
dñim
 !
¥evdñim


567 || (
dñim
 && 
gp
->
u
 !
¥evgp
->u)))

570 *
x
 = 
√wx
;

571 *
y
 = 
√wy
;

572 
¥evgp
 = 
gp
;

573 
¥evdñim
 = 
dñim
;

576 
SNAP_LINE
:

582 *
x
 = (
dúe˘i⁄
 < 0Ë? 0 : 
ãrm
.
cﬁ
 - 1;

583 i‡(
dúe˘i⁄
 < 0) {

584 ; *
y
 > 0; *y +
dúe˘i⁄
) {

585 i‡(!(
ãrm
.
löe
[*
y
-1][ãrm.
cﬁ
-1].
mode


586 & 
ATTR_WRAP
)) {

590 } i‡(
dúe˘i⁄
 > 0) {

591 ; *
y
 < 
ãrm
.
row
-1; *y +
dúe˘i⁄
) {

592 i‡(!(
ãrm
.
löe
[*
y
][ãrm.
cﬁ
-1].
mode


593 & 
ATTR_WRAP
)) {

600 
	}
}

603 
	$gë£l
()

605 *
°r
, *
±r
;

606 
y
, 
bufsize
, 
œ°x
, 
löñí
;

607 
Glyph
 *
gp
, *
œ°
;

609 i‡(
£l
.
ob
.
x
 == -1)

610  
NULL
;

612 
bufsize
 = (
ãrm
.
cﬁ
+1Ë* (
£l
.
√
.
y
-£l.
nb
.y+1Ë* 
UTF_SIZ
;

613 
±r
 = 
°r
 = 
	`xmÆloc
(
bufsize
);

616 
y
 = 
£l
.
nb
.y; y <£l.
√
.y; y++) {

617 i‡((
löñí
 = 
	`éöñí
(
y
)) == 0) {

618 *
±r
++ = '\n';

622 i‡(
£l
.
ty≥
 =
SEL_RECTANGULAR
) {

623 
gp
 = &
ãrm
.
löe
[
y
][
£l
.
nb
.
x
];

624 
œ°x
 = 
£l
.
√
.
x
;

626 
gp
 = &
ãrm
.
löe
[
y
][
£l
.
nb
.y =y ? sñ.nb.
x
 : 0];

627 
œ°x
 = (
£l
.
√
.
y
 =yË? sñ.√.
x
 : 
ãrm
.
cﬁ
-1;

629 
œ°
 = &
ãrm
.
löe
[
y
][
	`MIN
(
œ°x
, 
löñí
-1)];

630 
œ°
 >
gp
 &&Üa°->
u
 == ' ')

631 --
œ°
;

633  ; 
gp
 <
œ°
; ++gp) {

634 i‡(
gp
->
mode
 & 
ATTR_WDUMMY
)

637 
±r
 +
	`utf8ícode
(
gp
->
u
,Ötr);

649 i‡((
y
 < 
£l
.
√
.y || 
œ°x
 >
löñí
Ë&& !(
œ°
->
mode
 & 
ATTR_WRAP
))

650 *
±r
++ = '\n';

652 *
±r
 = 0;

653  
°r
;

654 
	}
}

657 
	$£l˛ór
()

659 i‡(
£l
.
ob
.
x
 == -1)

661 
£l
.
mode
 = 
SEL_IDLE
;

662 
£l
.
ob
.
x
 = -1;

663 
	`t£tdút
(
£l
.
nb
.
y
, sñ.
√
.y);

664 
	}
}

667 
	$dõ
(c⁄° *
îr°r
, ...)

669 
va_li°
 
≠
;

671 
	`va_°¨t
(
≠
, 
îr°r
);

672 
	`vÂrötf
(
°dîr
, 
îr°r
, 
≠
);

673 
	`va_íd
(
≠
);

674 
	`exô
(1);

675 
	}
}

678 
	$execsh
(*
cmd
, **
¨gs
)

680 *
sh
, *
¥og
;

681 c⁄° 
∑sswd
 *
pw
;

683 
î∫o
 = 0;

684 i‡((
pw
 = 
	`gëpwuid
(
	`gëuid
())Ë=
NULL
) {

685 i‡(
î∫o
)

686 
	`dõ
("gëpwuid: %s\n", 
	`°ªº‹
(
î∫o
));

688 
	`dõ
("whoáre you?\n");

691 i‡((
sh
 = 
	`gëív
("SHELL")Ë=
NULL
)

692 
sh
 = (
pw
->
pw_shñl
[0]Ë?Öw->pw_shñ»: 
cmd
;

694 i‡(
¨gs
)

695 
¥og
 = 
¨gs
[0];

696 i‡(
utmp
)

697 
¥og
 = 
utmp
;

699 
¥og
 = 
sh
;

700 
	`DEFAULT
(
¨gs
, ((*[]Ë{
¥og
, 
NULL
}));

702 
	`un£ãnv
("COLUMNS");

703 
	`un£ãnv
("LINES");

704 
	`un£ãnv
("TERMCAP");

705 
	`£ãnv
("LOGNAME", 
pw
->
pw_«me
, 1);

706 
	`£ãnv
("USER", 
pw
->
pw_«me
, 1);

707 
	`£ãnv
("SHELL", 
sh
, 1);

708 
	`£ãnv
("HOME", 
pw
->
pw_dú
, 1);

709 
	`£ãnv
("TERM", 
ãrm«me
, 1);

711 
	`sig«l
(
SIGCHLD
, 
SIG_DFL
);

712 
	`sig«l
(
SIGHUP
, 
SIG_DFL
);

713 
	`sig«l
(
SIGINT
, 
SIG_DFL
);

714 
	`sig«l
(
SIGQUIT
, 
SIG_DFL
);

715 
	`sig«l
(
SIGTERM
, 
SIG_DFL
);

716 
	`sig«l
(
SIGALRM
, 
SIG_DFL
);

718 
	`execvp
(
¥og
, 
¨gs
);

719 
	`_exô
(1);

720 
	}
}

723 
	$sigchld
(
a
)

725 
°©
;

726 
pid_t
 
p
;

728 i‡((
p
 = 
	`waôpid
(
pid
, &
°©
, 
WNOHANG
)) < 0)

729 
	`dõ
("waôög f‹Öid %hd faûed: %s\n", 
pid
, 
	`°ªº‹
(
î∫o
));

731 i‡(
pid
 !
p
)

734 i‡(!
	`WIFEXITED
(
°©
Ë|| 
	`WEXITSTATUS
(stat))

735 
	`dõ
("chûd föished wôhÉº‹ '%d'\n", 
°©
);

736 
	`exô
(0);

737 
	}
}

740 
	$°ty
(**
¨gs
)

742 
cmd
[
_POSIX_ARG_MAX
], **
p
, *
q
, *
s
;

743 
size_t
 
n
, 
siz
;

745 i‡((
n
 = 
	`°æí
(
°ty_¨gs
)Ë> (
cmd
)-1)

746 
	`dõ
("incorrect sttyÖarameters\n");

747 
	`mem˝y
(
cmd
, 
°ty_¨gs
, 
n
);

748 
q
 = 
cmd
 + 
n
;

749 
siz
 = (
cmd
Ë- 
n
;

750 
p
 = 
¨gs
;Ö && (
s
 = *p); ++p) {

751 i‡((
n
 = 
	`°æí
(
s
)Ë> 
siz
-1)

752 
	`dõ
("sttyÖarameterÜengthÅooÜong\n");

753 *
q
++ = ' ';

754 
	`mem˝y
(
q
, 
s
, 
n
);

755 
q
 +
n
;

756 
siz
 -
n
 + 1;

758 *
q
 = '\0';

759 i‡(
	`sy°em
(
cmd
) != 0)

760 
	`≥º‹
("Couldn't call stty");

761 
	}
}

764 
	$ây√w
(*
löe
, *
cmd
, *
out
, **
¨gs
)

766 
m
, 
s
;

768 i‡(
out
) {

769 
ãrm
.
mode
 |
MODE_PRINT
;

770 
iofd
 = (!
	`°rcmp
(
out
, "-")) ?

771 1 : 
	`›í
(
out
, 
O_WRONLY
 | 
O_CREAT
, 0666);

772 i‡(
iofd
 < 0) {

773 
	`Ârötf
(
°dîr
, "Error opening %s:%s\n",

774 
out
, 
	`°ªº‹
(
î∫o
));

778 i‡(
löe
) {

779 i‡((
cmdfd
 = 
	`›í
(
löe
, 
O_RDWR
)) < 0)

780 
	`dõ
("openÜine '%s' failed: %s\n",

781 
löe
, 
	`°ªº‹
(
î∫o
));

782 
	`dup2
(
cmdfd
, 0);

783 
	`°ty
(
¨gs
);

784  
cmdfd
;

788 i‡(
	`›í±y
(&
m
, &
s
, 
NULL
, NULL, NULL) < 0)

789 
	`dõ
("›í±y faûed: %s\n", 
	`°ªº‹
(
î∫o
));

791 
pid
 = 
	`f‹k
()) {

793 
	`dõ
("f‹k faûed: %s\n", 
	`°ªº‹
(
î∫o
));

796 
	`˛o£
(
iofd
);

797 
	`£tsid
();

798 
	`dup2
(
s
, 0);

799 
	`dup2
(
s
, 1);

800 
	`dup2
(
s
, 2);

801 i‡(
	`io˘l
(
s
, 
TIOCSCTTY
, 
NULL
) < 0)

802 
	`dõ
("io˘»TIOCSCTTY faûed: %s\n", 
	`°ªº‹
(
î∫o
));

803 
	`˛o£
(
s
);

804 
	`˛o£
(
m
);

805 #ifde‡
__O≥nBSD__


806 i‡(
	`∂edge
("°diÿgëpwÖro¯exec", 
NULL
) == -1)

807 
	`dõ
("pledge\n");

809 
	`execsh
(
cmd
, 
¨gs
);

812 #ifde‡
__O≥nBSD__


813 i‡(
	`∂edge
("°diÿΩ©hÅtyÖroc", 
NULL
) == -1)

814 
	`dõ
("pledge\n");

816 
	`˛o£
(
s
);

817 
cmdfd
 = 
m
;

818 
	`sig«l
(
SIGCHLD
, 
sigchld
);

821  
cmdfd
;

822 
	}
}

824 
size_t


825 
	$âyªad
()

827 
buf
[
BUFSIZ
];

828 
buÊí
 = 0;

829 
wrôãn
;

830 
ªt
;

833 i‡((
ªt
 = 
	`ªad
(
cmdfd
, 
buf
+
buÊí
, 
	`LEN
(buf)-buflen)) < 0)

834 
	`dõ
("couldn'àªad from shñl: %s\n", 
	`°ªº‹
(
î∫o
));

835 
buÊí
 +
ªt
;

837 
wrôãn
 = 
	`twrôe
(
buf
, 
buÊí
, 0);

838 
buÊí
 -
wrôãn
;

840 i‡(
buÊí
 > 0)

841 
	`memmove
(
buf
, bu‡+ 
wrôãn
, 
buÊí
);

843  
ªt
;

844 
	}
}

847 
	$âywrôe
(c⁄° *
s
, 
size_t
 
n
, 
may_echo
)

849 c⁄° *
√xt
;

851 i‡(
may_echo
 && 
	`IS_SET
(
MODE_ECHO
))

852 
	`twrôe
(
s
, 
n
, 1);

854 i‡(!
	`IS_SET
(
MODE_CRLF
)) {

855 
	`âywrôîaw
(
s
, 
n
);

860 
n
 > 0) {

861 i‡(*
s
 == '\r') {

862 
√xt
 = 
s
 + 1;

863 
	`âywrôîaw
("\r\n", 2);

865 
√xt
 = 
	`memchr
(
s
, '\r', 
n
);

866 
	`DEFAULT
(
√xt
, 
s
 + 
n
);

867 
	`âywrôîaw
(
s
, 
√xt
 - s);

869 
n
 -
√xt
 - 
s
;

870 
s
 = 
√xt
;

872 
	}
}

875 
	$âywrôîaw
(c⁄° *
s
, 
size_t
 
n
)

877 
fd_£t
 
wfd
, 
rfd
;

878 
ssize_t
 
r
;

879 
size_t
 
lim
 = 256;

887 
n
 > 0) {

888 
	`FD_ZERO
(&
wfd
);

889 
	`FD_ZERO
(&
rfd
);

890 
	`FD_SET
(
cmdfd
, &
wfd
);

891 
	`FD_SET
(
cmdfd
, &
rfd
);

894 i‡(
	`p£À˘
(
cmdfd
+1, &
rfd
, &
wfd
, 
NULL
, NULL, NULL) < 0) {

895 i‡(
î∫o
 =
EINTR
)

897 
	`dõ
("£À˘ faûed: %s\n", 
	`°ªº‹
(
î∫o
));

899 i‡(
	`FD_ISSET
(
cmdfd
, &
wfd
)) {

905 i‡((
r
 = 
	`wrôe
(
cmdfd
, 
s
, (
n
 < 
lim
)?Ç :Üim)) < 0)

906 
wrôe_îr‹
;

907 i‡(
r
 < 
n
) {

913 i‡(
n
 < 
lim
)

914 
lim
 = 
	`âyªad
();

915 
n
 -
r
;

916 
s
 +
r
;

922 i‡(
	`FD_ISSET
(
cmdfd
, &
rfd
))

923 
lim
 = 
	`âyªad
();

927 
wrôe_îr‹
:

928 
	`dõ
("wrôêîr‹ o¿ây: %s\n", 
	`°ªº‹
(
î∫o
));

929 
	}
}

932 
	$âyªsize
(
tw
, 
th
)

934 
wösize
 
w
;

936 
w
.
ws_row
 = 
ãrm
.
row
;

937 
w
.
ws_cﬁ
 = 
ãrm
.
cﬁ
;

938 
w
.
ws_xpixñ
 = 
tw
;

939 
w
.
ws_ypixñ
 = 
th
;

940 i‡(
	`io˘l
(
cmdfd
, 
TIOCSWINSZ
, &
w
) < 0)

941 
	`Ârötf
(
°dîr
, "Couldn'à£àwödow size: %s\n", 
	`°ªº‹
(
î∫o
));

942 
	}
}

945 
	$âyh™gup
()

948 
	`kûl
(
pid
, 
SIGHUP
);

949 
	}
}

952 
	$èâr£t
(
©å
)

954 
i
, 
j
;

956 
i
 = 0; i < 
ãrm
.
row
-1; i++) {

957 
j
 = 0; j < 
ãrm
.
cﬁ
-1; j++) {

958 i‡(
ãrm
.
löe
[
i
][
j
].
mode
 & 
©å
)

964 
	}
}

967 
	$t£tdút
(
t›
, 
bŸ
)

969 
i
;

971 
	`LIMIT
(
t›
, 0, 
ãrm
.
row
-1);

972 
	`LIMIT
(
bŸ
, 0, 
ãrm
.
row
-1);

974 
i
 = 
t›
; i <
bŸ
; i++)

975 
ãrm
.
dúty
[
i
] = 1;

976 
	}
}

979 
	$t£tdúèâr
(
©å
)

981 
i
, 
j
;

983 
i
 = 0; i < 
ãrm
.
row
-1; i++) {

984 
j
 = 0; j < 
ãrm
.
cﬁ
-1; j++) {

985 i‡(
ãrm
.
löe
[
i
][
j
].
mode
 & 
©å
) {

986 
	`t£tdút
(
i
, i);

991 
	}
}

994 
	$tfuŒdút
()

996 
	`t£tdút
(0, 
ãrm
.
row
-1);

997 
	}
}

1000 
	$tcurs‹
(
mode
)

1002 
TCurs‹
 
c
[2];

1003 
Æt
 = 
	`IS_SET
(
MODE_ALTSCREEN
);

1005 i‡(
mode
 =
CURSOR_SAVE
) {

1006 
c
[
Æt
] = 
ãrm
.c;

1007 } i‡(
mode
 =
CURSOR_LOAD
) {

1008 
ãrm
.
c
 = c[
Æt
];

1009 
	`tmovëo
(
c
[
Æt
].
x
, c[Æt].
y
);

1011 
	}
}

1014 
	$åe£t
()

1016 
uöt
 
i
;

1018 
ãrm
.
c
 = (
TCurs‹
){{

1019 .
mode
 = 
ATTR_NULL
,

1020 .
fg
 = 
deÁu…fg
,

1021 .
bg
 = 
deÁu…bg


1022 }, .
x
 = 0, .
y
 = 0, .
°©e
 = 
CURSOR_DEFAULT
};

1024 
	`mem£t
(
ãrm
.
èbs
, 0,Åîm.
cﬁ
 * (*term.tabs));

1025 
i
 = 
èb•a˚s
; i < 
ãrm
.
cﬁ
; i +=Åabspaces)

1026 
ãrm
.
èbs
[
i
] = 1;

1027 
ãrm
.
t›
 = 0;

1028 
ãrm
.
bŸ
 =Åîm.
row
 - 1;

1029 
ãrm
.
mode
 = 
MODE_WRAP
|
MODE_UTF8
;

1030 
	`mem£t
(
ãrm
.
å™tbl
, 
CS_USA
, (term.trantbl));

1031 
ãrm
.
ch¨£t
 = 0;

1033 
i
 = 0; i < 2; i++) {

1034 
	`tmovëo
(0, 0);

1035 
	`tcurs‹
(
CURSOR_SAVE
);

1036 
	`t˛óºegi⁄
(0, 0, 
ãrm
.
cﬁ
-1,Åîm.
row
-1);

1037 
	`tsw≠s¸ìn
();

1039 
	}
}

1042 
	$äew
(
cﬁ
, 
row
)

1044 
ãrm
 = (
Tîm
){ .
c
 = { .
©å
 = { .
fg
 = 
deÁu…fg
, .
bg
 = 
deÁu…bg
 } } };

1045 
	`åesize
(
cﬁ
, 
row
);

1046 
	`åe£t
();

1047 
	}
}

1050 
	$tsw≠s¸ìn
()

1052 
Löe
 *
tmp
 = 
ãrm
.
löe
;

1054 
ãrm
.
löe
 =Åîm.
Æt
;

1055 
ãrm
.
Æt
 = 
tmp
;

1056 
ãrm
.
mode
 ^
MODE_ALTSCREEN
;

1057 
	`tfuŒdút
();

1058 
	}
}

1061 
	$ts¸ﬁldown
(
‹ig
, 
n
)

1063 
i
;

1064 
Löe
 
ãmp
;

1066 
	`LIMIT
(
n
, 0, 
ãrm
.
bŸ
-
‹ig
+1);

1068 
	`t£tdút
(
‹ig
, 
ãrm
.
bŸ
-
n
);

1069 
	`t˛óºegi⁄
(0, 
ãrm
.
bŸ
-
n
+1,Åîm.
cﬁ
-1,Åerm.bot);

1071 
i
 = 
ãrm
.
bŸ
; i >
‹ig
+
n
; i--) {

1072 
ãmp
 = 
ãrm
.
löe
[
i
];

1073 
ãrm
.
löe
[
i
] =Åîm.löe[i-
n
];

1074 
ãrm
.
löe
[
i
-
n
] = 
ãmp
;

1077 
	`£ls¸ﬁl
(
‹ig
, 
n
);

1078 
	}
}

1081 
	$ts¸ﬁlup
(
‹ig
, 
n
)

1083 
i
;

1084 
Löe
 
ãmp
;

1086 
	`LIMIT
(
n
, 0, 
ãrm
.
bŸ
-
‹ig
+1);

1088 
	`t˛óºegi⁄
(0, 
‹ig
, 
ãrm
.
cﬁ
-1, orig+
n
-1);

1089 
	`t£tdút
(
‹ig
+
n
, 
ãrm
.
bŸ
);

1091 
i
 = 
‹ig
; i <
ãrm
.
bŸ
-
n
; i++) {

1092 
ãmp
 = 
ãrm
.
löe
[
i
];

1093 
ãrm
.
löe
[
i
] =Åîm.löe[i+
n
];

1094 
ãrm
.
löe
[
i
+
n
] = 
ãmp
;

1097 
	`£ls¸ﬁl
(
‹ig
, -
n
);

1098 
	}
}

1101 
	$£ls¸ﬁl
(
‹ig
, 
n
)

1103 i‡(
£l
.
ob
.
x
 == -1)

1106 i‡(
	`BETWEEN
(
£l
.
ob
.
y
, 
‹ig
, 
ãrm
.
bŸ
Ë|| BETWEEN(£l.
€
.y, orig,Åerm.bot)) {

1107 i‡((
£l
.
ob
.
y
 +
n
Ë> 
ãrm
.
bŸ
 || (£l.
€
.y +nË<Åîm.
t›
) {

1108 
	`£l˛ór
();

1111 i‡(
£l
.
ty≥
 =
SEL_RECTANGULAR
) {

1112 i‡(
£l
.
ob
.
y
 < 
ãrm
.
t›
)

1113 
£l
.
ob
.
y
 = 
ãrm
.
t›
;

1114 i‡(
£l
.
€
.
y
 > 
ãrm
.
bŸ
)

1115 
£l
.
€
.
y
 = 
ãrm
.
bŸ
;

1117 i‡(
£l
.
ob
.
y
 < 
ãrm
.
t›
) {

1118 
£l
.
ob
.
y
 = 
ãrm
.
t›
;

1119 
£l
.
ob
.
x
 = 0;

1121 i‡(
£l
.
€
.
y
 > 
ãrm
.
bŸ
) {

1122 
£l
.
€
.
y
 = 
ãrm
.
bŸ
;

1123 
£l
.
€
.
x
 = 
ãrm
.
cﬁ
;

1126 
	`£ ‹mÆize
();

1128 
	}
}

1131 
	$äewlöe
(
fú°_cﬁ
)

1133 
y
 = 
ãrm
.
c
.y;

1135 i‡(
y
 =
ãrm
.
bŸ
) {

1136 
	`ts¸ﬁlup
(
ãrm
.
t›
, 1);

1138 
y
++;

1140 
	`tmovëo
(
fú°_cﬁ
 ? 0 : 
ãrm
.
c
.
x
, 
y
);

1141 
	}
}

1144 
	$csù¨£
()

1146 *
p
 = 
csõsc£q
.
buf
, *
≈
;

1147 
v
;

1149 
csõsc£q
.
«rg
 = 0;

1150 i‡(*
p
 == '?') {

1151 
csõsc£q
.
¥iv
 = 1;

1152 
p
++;

1155 
csõsc£q
.
buf
[csõsc£q.
Àn
] = '\0';

1156 
p
 < 
csõsc£q
.
buf
+csõsc£q.
Àn
) {

1157 
≈
 = 
NULL
;

1158 
v
 = 
	`°πﬁ
(
p
, &
≈
, 10);

1159 i‡(
≈
 =
p
)

1160 
v
 = 0;

1161 i‡(
v
 =
LONG_MAX
 || v =
LONG_MIN
)

1162 
v
 = -1;

1163 
csõsc£q
.
¨g
[csõsc£q.
«rg
++] = 
v
;

1164 
p
 = 
≈
;

1165 i‡(*
p
 !';' || 
csõsc£q
.
«rg
 =
ESC_ARG_SIZ
)

1167 
p
++;

1169 
csõsc£q
.
mode
[0] = *
p
++;

1170 
csõsc£q
.
mode
[1] = (
p
 < csõsc£q.
buf
+csõsc£q.
Àn
) ? *p : '\0';

1171 
	}
}

1175 
	$tmovóto
(
x
, 
y
)

1177 
	`tmovëo
(
x
, 
y
 + ((
ãrm
.
c
.
°©e
 & 
CURSOR_ORIGIN
Ë?Åîm.
t›
: 0));

1178 
	}
}

1181 
	$tmovëo
(
x
, 
y
)

1183 
möy
, 
maxy
;

1185 i‡(
ãrm
.
c
.
°©e
 & 
CURSOR_ORIGIN
) {

1186 
möy
 = 
ãrm
.
t›
;

1187 
maxy
 = 
ãrm
.
bŸ
;

1189 
möy
 = 0;

1190 
maxy
 = 
ãrm
.
row
 - 1;

1192 
ãrm
.
c
.
°©e
 &~
CURSOR_WRAPNEXT
;

1193 
ãrm
.
c
.
x
 = 
	`LIMIT
(x, 0,Åîm.
cﬁ
-1);

1194 
ãrm
.
c
.
y
 = 
	`LIMIT
(y, 
möy
, 
maxy
);

1195 
	}
}

1198 
	$t£tch¨
(
Ru√
 
u
, 
Glyph
 *
©å
, 
x
, 
y
)

1200 *
vt100_0
[62] = {

1214 i‡(
ãrm
.
å™tbl
[ãrm.
ch¨£t
] =
CS_GRAPHIC0
 &&

1215 
	`BETWEEN
(
u
, 0x41, 0x7eË&& 
vt100_0
[u - 0x41])

1216 
	`utf8decode
(
vt100_0
[
u
 - 0x41], &u, 
UTF_SIZ
);

1218 i‡(
ãrm
.
löe
[
y
][
x
].
mode
 & 
ATTR_WIDE
) {

1219 i‡(
x
+1 < 
ãrm
.
cﬁ
) {

1220 
ãrm
.
löe
[
y
][
x
+1].
u
 = ' ';

1221 
ãrm
.
löe
[
y
][
x
+1].
mode
 &~
ATTR_WDUMMY
;

1223 } i‡(
ãrm
.
löe
[
y
][
x
].
mode
 & 
ATTR_WDUMMY
) {

1224 
ãrm
.
löe
[
y
][
x
-1].
u
 = ' ';

1225 
ãrm
.
löe
[
y
][
x
-1].
mode
 &~
ATTR_WIDE
;

1228 
ãrm
.
dúty
[
y
] = 1;

1229 
ãrm
.
löe
[
y
][
x
] = *
©å
;

1230 
ãrm
.
löe
[
y
][
x
].
u
 = u;

1231 
	}
}

1234 
	$t˛óºegi⁄
(
x1
, 
y1
, 
x2
, 
y2
)

1236 
x
, 
y
, 
ãmp
;

1237 
Glyph
 *
gp
;

1239 i‡(
x1
 > 
x2
)

1240 
ãmp
 = 
x1
, x1 = 
x2
, x2 =Åemp;

1241 i‡(
y1
 > 
y2
)

1242 
ãmp
 = 
y1
, y1 = 
y2
, y2 =Åemp;

1244 
	`LIMIT
(
x1
, 0, 
ãrm
.
cﬁ
-1);

1245 
	`LIMIT
(
x2
, 0, 
ãrm
.
cﬁ
-1);

1246 
	`LIMIT
(
y1
, 0, 
ãrm
.
row
-1);

1247 
	`LIMIT
(
y2
, 0, 
ãrm
.
row
-1);

1249 
y
 = 
y1
; y <
y2
; y++) {

1250 
ãrm
.
dúty
[
y
] = 1;

1251 
x
 = 
x1
; x <
x2
; x++) {

1252 
gp
 = &
ãrm
.
löe
[
y
][
x
];

1253 i‡(
	`£À˘ed
(
x
, 
y
))

1254 
	`£l˛ór
();

1255 
gp
->
fg
 = 
ãrm
.
c
.
©å
.fg;

1256 
gp
->
bg
 = 
ãrm
.
c
.
©å
.bg;

1257 
gp
->
mode
 = 0;

1258 
gp
->
u
 = ' ';

1261 
	}
}

1264 
	$tdñëech¨
(
n
)

1266 
d°
, 
§c
, 
size
;

1267 
Glyph
 *
löe
;

1269 
	`LIMIT
(
n
, 0, 
ãrm
.
cﬁ
 -Åîm.
c
.
x
);

1271 
d°
 = 
ãrm
.
c
.
x
;

1272 
§c
 = 
ãrm
.
c
.
x
 + 
n
;

1273 
size
 = 
ãrm
.
cﬁ
 - 
§c
;

1274 
löe
 = 
ãrm
.löe[ãrm.
c
.
y
];

1276 
	`memmove
(&
löe
[
d°
], &löe[
§c
], 
size
 * (
Glyph
));

1277 
	`t˛óºegi⁄
(
ãrm
.
cﬁ
-
n
,Åîm.
c
.
y
,Åerm.col-1,Åerm.c.y);

1278 
	}
}

1281 
	$tö£πbœnk
(
n
)

1283 
d°
, 
§c
, 
size
;

1284 
Glyph
 *
löe
;

1286 
	`LIMIT
(
n
, 0, 
ãrm
.
cﬁ
 -Åîm.
c
.
x
);

1288 
d°
 = 
ãrm
.
c
.
x
 + 
n
;

1289 
§c
 = 
ãrm
.
c
.
x
;

1290 
size
 = 
ãrm
.
cﬁ
 - 
d°
;

1291 
löe
 = 
ãrm
.löe[ãrm.
c
.
y
];

1293 
	`memmove
(&
löe
[
d°
], &löe[
§c
], 
size
 * (
Glyph
));

1294 
	`t˛óºegi⁄
(
§c
, 
ãrm
.
c
.
y
, 
d°
 - 1,Åerm.c.y);

1295 
	}
}

1298 
	$tö£πbœnklöe
(
n
)

1300 i‡(
	`BETWEEN
(
ãrm
.
c
.
y
,Åîm.
t›
,Åîm.
bŸ
))

1301 
	`ts¸ﬁldown
(
ãrm
.
c
.
y
, 
n
);

1302 
	}
}

1305 
	$tdñëñöe
(
n
)

1307 i‡(
	`BETWEEN
(
ãrm
.
c
.
y
,Åîm.
t›
,Åîm.
bŸ
))

1308 
	`ts¸ﬁlup
(
ãrm
.
c
.
y
, 
n
);

1309 
	}
}

1311 
öt32_t


1312 
	$tdefcﬁ‹
(*
©å
, *
≈¨
, 
l
)

1314 
öt32_t
 
idx
 = -1;

1315 
uöt
 
r
, 
g
, 
b
;

1317 
©å
[*
≈¨
 + 1]) {

1319 i‡(*
≈¨
 + 4 >
l
) {

1320 
	`Ârötf
(
°dîr
,

1322 *
≈¨
);

1325 
r
 = 
©å
[*
≈¨
 + 2];

1326 
g
 = 
©å
[*
≈¨
 + 3];

1327 
b
 = 
©å
[*
≈¨
 + 4];

1328 *
≈¨
 += 4;

1329 i‡(!
	`BETWEEN
(
r
, 0, 255Ë|| !BETWEEN(
g
, 0, 255Ë|| !BETWEEN(
b
, 0, 255))

1330 
	`Ârötf
(
°dîr
, "erresc: badÑgb color (%u,%u,%u)\n",

1331 
r
, 
g
, 
b
);

1333 
idx
 = 
	`TRUECOLOR
(
r
, 
g
, 
b
);

1336 i‡(*
≈¨
 + 2 >
l
) {

1337 
	`Ârötf
(
°dîr
,

1339 *
≈¨
);

1342 *
≈¨
 += 2;

1343 i‡(!
	`BETWEEN
(
©å
[*
≈¨
], 0, 255))

1344 
	`Ârötf
(
°dîr
, "îªsc: bad fgcﬁ‹ %d\n", 
©å
[*
≈¨
]);

1346 
idx
 = 
©å
[*
≈¨
];

1353 
	`Ârötf
(
°dîr
,

1354 "îªsc(38): gfxáâ∏%d unknown\n", 
©å
[*
≈¨
]);

1358  
idx
;

1359 
	}
}

1362 
	$t£èâr
(*
©å
, 
l
)

1364 
i
;

1365 
öt32_t
 
idx
;

1367 
i
 = 0; i < 
l
; i++) {

1368 
©å
[
i
]) {

1370 
ãrm
.
c
.
©å
.
mode
 &= ~(

1371 
ATTR_BOLD
 |

1372 
ATTR_FAINT
 |

1373 
ATTR_ITALIC
 |

1374 
ATTR_UNDERLINE
 |

1375 
ATTR_BLINK
 |

1376 
ATTR_REVERSE
 |

1377 
ATTR_INVISIBLE
 |

1378 
ATTR_STRUCK
 );

1379 
ãrm
.
c
.
©å
.
fg
 = 
deÁu…fg
;

1380 
ãrm
.
c
.
©å
.
bg
 = 
deÁu…bg
;

1383 
ãrm
.
c
.
©å
.
mode
 |
ATTR_BOLD
;

1386 
ãrm
.
c
.
©å
.
mode
 |
ATTR_FAINT
;

1389 
ãrm
.
c
.
©å
.
mode
 |
ATTR_ITALIC
;

1392 
ãrm
.
c
.
©å
.
mode
 |
ATTR_UNDERLINE
;

1397 
ãrm
.
c
.
©å
.
mode
 |
ATTR_BLINK
;

1400 
ãrm
.
c
.
©å
.
mode
 |
ATTR_REVERSE
;

1403 
ãrm
.
c
.
©å
.
mode
 |
ATTR_INVISIBLE
;

1406 
ãrm
.
c
.
©å
.
mode
 |
ATTR_STRUCK
;

1409 
ãrm
.
c
.
©å
.
mode
 &~(
ATTR_BOLD
 | 
ATTR_FAINT
);

1412 
ãrm
.
c
.
©å
.
mode
 &~
ATTR_ITALIC
;

1415 
ãrm
.
c
.
©å
.
mode
 &~
ATTR_UNDERLINE
;

1418 
ãrm
.
c
.
©å
.
mode
 &~
ATTR_BLINK
;

1421 
ãrm
.
c
.
©å
.
mode
 &~
ATTR_REVERSE
;

1424 
ãrm
.
c
.
©å
.
mode
 &~
ATTR_INVISIBLE
;

1427 
ãrm
.
c
.
©å
.
mode
 &~
ATTR_STRUCK
;

1430 i‡((
idx
 = 
	`tdefcﬁ‹
(
©å
, &
i
, 
l
)) >= 0)

1431 
ãrm
.
c
.
©å
.
fg
 = 
idx
;

1434 
ãrm
.
c
.
©å
.
fg
 = 
deÁu…fg
;

1437 i‡((
idx
 = 
	`tdefcﬁ‹
(
©å
, &
i
, 
l
)) >= 0)

1438 
ãrm
.
c
.
©å
.
bg
 = 
idx
;

1441 
ãrm
.
c
.
©å
.
bg
 = 
deÁu…bg
;

1444 i‡(
	`BETWEEN
(
©å
[
i
], 30, 37)) {

1445 
ãrm
.
c
.
©å
.
fg
 =áâr[
i
] - 30;

1446 } i‡(
	`BETWEEN
(
©å
[
i
], 40, 47)) {

1447 
ãrm
.
c
.
©å
.
bg
 =áâr[
i
] - 40;

1448 } i‡(
	`BETWEEN
(
©å
[
i
], 90, 97)) {

1449 
ãrm
.
c
.
©å
.
fg
 =áâr[
i
] - 90 + 8;

1450 } i‡(
	`BETWEEN
(
©å
[
i
], 100, 107)) {

1451 
ãrm
.
c
.
©å
.
bg
 =áâr[
i
] - 100 + 8;

1453 
	`Ârötf
(
°dîr
,

1455 
©å
[
i
]);

1456 
	`csidump
();

1461 
	}
}

1464 
	$t£ts¸ﬁl
(
t
, 
b
)

1466 
ãmp
;

1468 
	`LIMIT
(
t
, 0, 
ãrm
.
row
-1);

1469 
	`LIMIT
(
b
, 0, 
ãrm
.
row
-1);

1470 i‡(
t
 > 
b
) {

1471 
ãmp
 = 
t
;

1472 
t
 = 
b
;

1473 
b
 = 
ãmp
;

1475 
ãrm
.
t›
 = 
t
;

1476 
ãrm
.
bŸ
 = 
b
;

1477 
	}
}

1480 
	$t£tmode
(
¥iv
, 
£t
, *
¨gs
, 
«rg
)

1482 
Æt
, *
lim
;

1484 
lim
 = 
¨gs
 + 
«rg
;árgs <Üim; ++args) {

1485 i‡(
¥iv
) {

1486 *
¨gs
) {

1488 
	`x£tmode
(
£t
, 
MODE_APPCURSOR
);

1491 
	`x£tmode
(
£t
, 
MODE_REVERSE
);

1494 
	`MODBIT
(
ãrm
.
c
.
°©e
, 
£t
, 
CURSOR_ORIGIN
);

1495 
	`tmovóto
(0, 0);

1498 
	`MODBIT
(
ãrm
.
mode
, 
£t
, 
MODE_WRAP
);

1511 
	`x£tmode
(!
£t
, 
MODE_HIDE
);

1514 
	`x£çoöãrmŸi⁄
(0);

1515 
	`x£tmode
(0, 
MODE_MOUSE
);

1516 
	`x£tmode
(
£t
, 
MODE_MOUSEX10
);

1519 
	`x£çoöãrmŸi⁄
(0);

1520 
	`x£tmode
(0, 
MODE_MOUSE
);

1521 
	`x£tmode
(
£t
, 
MODE_MOUSEBTN
);

1524 
	`x£çoöãrmŸi⁄
(0);

1525 
	`x£tmode
(0, 
MODE_MOUSE
);

1526 
	`x£tmode
(
£t
, 
MODE_MOUSEMOTION
);

1529 
	`x£çoöãrmŸi⁄
(
£t
);

1530 
	`x£tmode
(0, 
MODE_MOUSE
);

1531 
	`x£tmode
(
£t
, 
MODE_MOUSEMANY
);

1534 
	`x£tmode
(
£t
, 
MODE_FOCUS
);

1537 
	`x£tmode
(
£t
, 
MODE_MOUSESGR
);

1540 
	`x£tmode
(
£t
, 
MODE_8BIT
);

1543 i‡(!
ÆlowÆts¸ìn
)

1545 
	`tcurs‹
((
£t
Ë? 
CURSOR_SAVE
 : 
CURSOR_LOAD
);

1549 i‡(!
ÆlowÆts¸ìn
)

1551 
Æt
 = 
	`IS_SET
(
MODE_ALTSCREEN
);

1552 i‡(
Æt
) {

1553 
	`t˛óºegi⁄
(0, 0, 
ãrm
.
cﬁ
-1,

1554 
ãrm
.
row
-1);

1556 i‡(
£t
 ^ 
Æt
)

1557 
	`tsw≠s¸ìn
();

1558 i‡(*
¨gs
 != 1049)

1562 
	`tcurs‹
((
£t
Ë? 
CURSOR_SAVE
 : 
CURSOR_LOAD
);

1565 
	`x£tmode
(
£t
, 
MODE_BRCKTPASTE
);

1577 
	`Ârötf
(
°dîr
,

1579 *
¨gs
);

1583 *
¨gs
) {

1587 
	`x£tmode
(
£t
, 
MODE_KBDLOCK
);

1590 
	`MODBIT
(
ãrm
.
mode
, 
£t
, 
MODE_INSERT
);

1593 
	`MODBIT
(
ãrm
.
mode
, !
£t
, 
MODE_ECHO
);

1596 
	`MODBIT
(
ãrm
.
mode
, 
£t
, 
MODE_CRLF
);

1599 
	`Ârötf
(
°dîr
,

1601 *
¨gs
);

1606 
	}
}

1609 
	$csih™dÀ
()

1611 
buf
[40];

1612 
Àn
;

1614 
csõsc£q
.
mode
[0]) {

1616 
unknown
:

1617 
	`Ârötf
(
°dîr
, "erresc: unknown csi ");

1618 
	`csidump
();

1622 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1623 
	`tö£πbœnk
(
csõsc£q
.
¨g
[0]);

1626 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1627 
	`tmovëo
(
ãrm
.
c
.
x
,Åîm.c.
y
-
csõsc£q
.
¨g
[0]);

1631 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1632 
	`tmovëo
(
ãrm
.
c
.
x
,Åîm.c.
y
+
csõsc£q
.
¨g
[0]);

1635 
csõsc£q
.
¨g
[0]) {

1637 
	`tdump
();

1640 
	`tdum∂öe
(
ãrm
.
c
.
y
);

1643 
	`tdump£l
();

1646 
ãrm
.
mode
 &~
MODE_PRINT
;

1649 
ãrm
.
mode
 |
MODE_PRINT
;

1654 i‡(
csõsc£q
.
¨g
[0] == 0)

1655 
	`âywrôe
(
vtidí
, 
	`°æí
(vtiden), 0);

1659 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1660 
	`tmovëo
(
ãrm
.
c
.
x
+
csõsc£q
.
¨g
[0],Åîm.c.
y
);

1663 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1664 
	`tmovëo
(
ãrm
.
c
.
x
-
csõsc£q
.
¨g
[0],Åîm.c.
y
);

1667 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1668 
	`tmovëo
(0, 
ãrm
.
c
.
y
+
csõsc£q
.
¨g
[0]);

1671 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1672 
	`tmovëo
(0, 
ãrm
.
c
.
y
-
csõsc£q
.
¨g
[0]);

1675 
csõsc£q
.
¨g
[0]) {

1677 
ãrm
.
èbs
[ãrm.
c
.
x
] = 0;

1680 
	`mem£t
(
ãrm
.
èbs
, 0,Åîm.
cﬁ
 * (*term.tabs));

1683 
unknown
;

1688 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1689 
	`tmovëo
(
csõsc£q
.
¨g
[0]-1, 
ãrm
.
c
.
y
);

1693 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1694 
	`DEFAULT
(
csõsc£q
.
¨g
[1], 1);

1695 
	`tmovóto
(
csõsc£q
.
¨g
[1]-1, csiescseq.arg[0]-1);

1698 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1699 
	`çuâab
(
csõsc£q
.
¨g
[0]);

1702 
csõsc£q
.
¨g
[0]) {

1704 
	`t˛óºegi⁄
(
ãrm
.
c
.
x
,Åîm.c.
y
,Åîm.
cﬁ
-1,Åerm.c.y);

1705 i‡(
ãrm
.
c
.
y
 <Åîm.
row
-1) {

1706 
	`t˛óºegi⁄
(0, 
ãrm
.
c
.
y
+1,Åîm.
cﬁ
-1,

1707 
ãrm
.
row
-1);

1711 i‡(
ãrm
.
c
.
y
 > 1)

1712 
	`t˛óºegi⁄
(0, 0, 
ãrm
.
cﬁ
-1,Åîm.
c
.
y
-1);

1713 
	`t˛óºegi⁄
(0, 
ãrm
.
c
.
y
,Åîm.c.
x
,Åerm.c.y);

1716 
	`t˛óºegi⁄
(0, 0, 
ãrm
.
cﬁ
-1,Åîm.
row
-1);

1719 
unknown
;

1723 
csõsc£q
.
¨g
[0]) {

1725 
	`t˛óºegi⁄
(
ãrm
.
c
.
x
,Åîm.c.
y
,Åîm.
cﬁ
-1,

1726 
ãrm
.
c
.
y
);

1729 
	`t˛óºegi⁄
(0, 
ãrm
.
c
.
y
,Åîm.c.
x
,Åerm.c.y);

1732 
	`t˛óºegi⁄
(0, 
ãrm
.
c
.
y
,Åîm.
cﬁ
-1,Åerm.c.y);

1737 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1738 
	`ts¸ﬁlup
(
ãrm
.
t›
, 
csõsc£q
.
¨g
[0]);

1741 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1742 
	`ts¸ﬁldown
(
ãrm
.
t›
, 
csõsc£q
.
¨g
[0]);

1745 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1746 
	`tö£πbœnklöe
(
csõsc£q
.
¨g
[0]);

1749 
	`t£tmode
(
csõsc£q
.
¥iv
, 0, csõsc£q.
¨g
, csõsc£q.
«rg
);

1752 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1753 
	`tdñëñöe
(
csõsc£q
.
¨g
[0]);

1756 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1757 
	`t˛óºegi⁄
(
ãrm
.
c
.
x
,Åîm.c.
y
,

1758 
ãrm
.
c
.
x
 + 
csõsc£q
.
¨g
[0] - 1,Åîm.c.
y
);

1761 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1762 
	`tdñëech¨
(
csõsc£q
.
¨g
[0]);

1765 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1766 
	`çuâab
(-
csõsc£q
.
¨g
[0]);

1769 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1770 
	`tmovóto
(
ãrm
.
c
.
x
, 
csõsc£q
.
¨g
[0]-1);

1773 
	`t£tmode
(
csõsc£q
.
¥iv
, 1, csõsc£q.
¨g
, csõsc£q.
«rg
);

1776 
	`t£èâr
(
csõsc£q
.
¨g
, csõsc£q.
«rg
);

1779 i‡(
csõsc£q
.
¨g
[0] == 6) {

1780 
Àn
 = 
	`¢¥ötf
(
buf
, (buf),"\033[%i;%iR",

1781 
ãrm
.
c
.
y
+1,Åîm.c.
x
+1);

1782 
	`âywrôe
(
buf
, 
Àn
, 0);

1786 i‡(
csõsc£q
.
¥iv
) {

1787 
unknown
;

1789 
	`DEFAULT
(
csõsc£q
.
¨g
[0], 1);

1790 
	`DEFAULT
(
csõsc£q
.
¨g
[1], 
ãrm
.
row
);

1791 
	`t£ts¸ﬁl
(
csõsc£q
.
¨g
[0]-1, csiescseq.arg[1]-1);

1792 
	`tmovóto
(0, 0);

1796 
	`tcurs‹
(
CURSOR_SAVE
);

1799 
	`tcurs‹
(
CURSOR_LOAD
);

1802 
csõsc£q
.
mode
[1]) {

1804 i‡(
	`x£tcurs‹
(
csõsc£q
.
¨g
[0]))

1805 
unknown
;

1808 
unknown
;

1812 
	}
}

1815 
	$csidump
()

1817 
i
;

1818 
uöt
 
c
;

1820 
	`Ârötf
(
°dîr
, "ESC[");

1821 
i
 = 0; i < 
csõsc£q
.
Àn
; i++) {

1822 
c
 = 
csõsc£q
.
buf
[
i
] & 0xff;

1823 i‡(
	`i•röt
(
c
)) {

1824 
	`putc
(
c
, 
°dîr
);

1825 } i‡(
c
 == '\n') {

1826 
	`Ârötf
(
°dîr
, "(\\n)");

1827 } i‡(
c
 == '\r') {

1828 
	`Ârötf
(
°dîr
, "(\\r)");

1829 } i‡(
c
 == 0x1b) {

1830 
	`Ârötf
(
°dîr
, "(\\e)");

1832 
	`Ârötf
(
°dîr
, "(%02x)", 
c
);

1835 
	`putc
('\n', 
°dîr
);

1836 
	}
}

1839 
	$csúe£t
()

1841 
	`mem£t
(&
csõsc£q
, 0, (csiescseq));

1842 
	}
}

1845 
	$°rh™dÀ
()

1847 *
p
 = 
NULL
;

1848 
j
, 
«rg
, 
∑r
;

1850 
ãrm
.
esc
 &~(
ESC_STR_END
|
ESC_STR
);

1851 
	`°Ω¨£
();

1852 
∑r
 = (
«rg
 = 
°ªsc£q
.«rgË? 
	`©oi
(°ªsc£q.
¨gs
[0]) : 0;

1854 
°ªsc£q
.
ty≥
) {

1856 
∑r
) {

1860 i‡(
«rg
 > 1)

1861 
	`x£âôÀ
(
°ªsc£q
.
¨gs
[1]);

1864 i‡(
«rg
 > 2) {

1865 *
dec
;

1867 
dec
 = 
	`ba£64dec
(
°ªsc£q
.
¨gs
[2]);

1868 i‡(
dec
) {

1869 
	`x£t£l
(
dec
);

1870 
	`x˛ùc›y
();

1872 
	`Ârötf
(
°dîr
, "erresc: invalid base64\n");

1877 i‡(
«rg
 < 3)

1879 
p
 = 
°ªsc£q
.
¨gs
[2];

1882 
j
 = (
«rg
 > 1Ë? 
	`©oi
(
°ªsc£q
.
¨gs
[1]) : -1;

1883 i‡(
	`x£tcﬁ‹«me
(
j
, 
p
)) {

1884 
	`Ârötf
(
°dîr
, "îªsc: invÆid cﬁ‹ %s\n", 
p
);

1890 
	`ªdøw
();

1896 
	`x£âôÀ
(
°ªsc£q
.
¨gs
[0]);

1899 
ãrm
.
mode
 |
ESC_DCS
;

1905 
	`Ârötf
(
°dîr
, "erresc: unknown str ");

1906 
	`°rdump
();

1907 
	}
}

1910 
	$°Ω¨£
()

1912 
c
;

1913 *
p
 = 
°ªsc£q
.
buf
;

1915 
°ªsc£q
.
«rg
 = 0;

1916 
°ªsc£q
.
buf
[°ªsc£q.
Àn
] = '\0';

1918 i‡(*
p
 == '\0')

1921 
°ªsc£q
.
«rg
 < 
STR_ARG_SIZ
) {

1922 
°ªsc£q
.
¨gs
[°ªsc£q.
«rg
++] = 
p
;

1923 (
c
 = *
p
) != ';' && c != '\0')

1924 ++
p
;

1925 i‡(
c
 == '\0')

1927 *
p
++ = '\0';

1929 
	}
}

1932 
	$°rdump
()

1934 
i
;

1935 
uöt
 
c
;

1937 
	`Ârötf
(
°dîr
, "ESC%c", 
°ªsc£q
.
ty≥
);

1938 
i
 = 0; i < 
°ªsc£q
.
Àn
; i++) {

1939 
c
 = 
°ªsc£q
.
buf
[
i
] & 0xff;

1940 i‡(
c
 == '\0') {

1941 
	`putc
('\n', 
°dîr
);

1943 } i‡(
	`i•röt
(
c
)) {

1944 
	`putc
(
c
, 
°dîr
);

1945 } i‡(
c
 == '\n') {

1946 
	`Ârötf
(
°dîr
, "(\\n)");

1947 } i‡(
c
 == '\r') {

1948 
	`Ârötf
(
°dîr
, "(\\r)");

1949 } i‡(
c
 == 0x1b) {

1950 
	`Ârötf
(
°dîr
, "(\\e)");

1952 
	`Ârötf
(
°dîr
, "(%02x)", 
c
);

1955 
	`Ârötf
(
°dîr
, "ESC\\\n");

1956 
	}
}

1959 
	$°ºe£t
()

1961 
	`mem£t
(&
°ªsc£q
, 0, (strescseq));

1962 
	}
}

1965 
	$£ndbªak
(c⁄° 
Arg
 *
¨g
)

1967 i‡(
	`tc£ndbªak
(
cmdfd
, 0))

1968 
	`≥º‹
("Error sending break");

1969 
	}
}

1972 
	$çröãr
(*
s
, 
size_t
 
Àn
)

1974 i‡(
iofd
 !-1 && 
	`xwrôe
(iofd, 
s
, 
Àn
) < 0) {

1975 
	`≥º‹
("Error writingÅo output file");

1976 
	`˛o£
(
iofd
);

1977 
iofd
 = -1;

1979 
	}
}

1982 
	$toggÀ¥öãr
(c⁄° 
Arg
 *
¨g
)

1984 
ãrm
.
mode
 ^
MODE_PRINT
;

1985 
	}
}

1988 
	$¥öts¸ìn
(c⁄° 
Arg
 *
¨g
)

1990 
	`tdump
();

1991 
	}
}

1994 
	$¥öt£l
(c⁄° 
Arg
 *
¨g
)

1996 
	`tdump£l
();

1997 
	}
}

2000 
	$tdump£l
()

2002 *
±r
;

2004 i‡((
±r
 = 
	`gë£l
())) {

2005 
	`çröãr
(
±r
, 
	`°æí
(ptr));

2006 
	`‰ì
(
±r
);

2008 
	}
}

2011 
	$tdum∂öe
(
n
)

2013 
buf
[
UTF_SIZ
];

2014 
Glyph
 *
bp
, *
íd
;

2016 
bp
 = &
ãrm
.
löe
[
n
][0];

2017 
íd
 = &
bp
[
	`MIN
(
	`éöñí
(
n
), 
ãrm
.
cﬁ
) - 1];

2018 i‡(
bp
 !
íd
 || bp->
u
 != ' ') {

2019  ;
bp
 <
íd
; ++bp)

2020 
	`çröãr
(
buf
, 
	`utf8ícode
(
bp
->
u
, buf));

2022 
	`çröãr
("\n", 1);

2023 
	}
}

2026 
	$tdump
()

2028 
i
;

2030 
i
 = 0; i < 
ãrm
.
row
; ++i)

2031 
	`tdum∂öe
(
i
);

2032 
	}
}

2035 
	$çuâab
(
n
)

2037 
uöt
 
x
 = 
ãrm
.
c
.x;

2039 i‡(
n
 > 0) {

2040 
x
 < 
ãrm
.
cﬁ
 && 
n
--)

2041 ++
x
; x < 
ãrm
.
cﬁ
 && !ãrm.
èbs
[x]; ++x)

2043 } i‡(
n
 < 0) {

2044 
x
 > 0 && 
n
++)

2045 --
x
; x > 0 && !
ãrm
.
èbs
[x]; --x)

2048 
ãrm
.
c
.
x
 = 
	`LIMIT
(x, 0,Åîm.
cﬁ
-1);

2049 
	}
}

2052 
	$tdefutf8
(
ascii
)

2054 i‡(
ascii
 == 'G')

2055 
ãrm
.
mode
 |
MODE_UTF8
;

2056 i‡(
ascii
 == '@')

2057 
ãrm
.
mode
 &~
MODE_UTF8
;

2058 
	}
}

2061 
	$tde·øn
(
ascii
)

2063 
cs
[] = "0B";

2064 
vcs
[] = {
CS_GRAPHIC0
, 
CS_USA
};

2065 *
p
;

2067 i‡((
p
 = 
	`°rchr
(
cs
, 
ascii
)Ë=
NULL
) {

2068 
	`Ârötf
(
°dîr
, "es¯unh™dÀd ch¨£t: ESC ( %c\n", 
ascii
);

2070 
ãrm
.
å™tbl
[ãrm.
ich¨£t
] = 
vcs
[
p
 - 
cs
];

2072 
	}
}

2075 
	$tde˘e°
(
c
)

2077 
x
, 
y
;

2079 i‡(
c
 == '8') {

2080 
x
 = 0; x < 
ãrm
.
cﬁ
; ++x) {

2081 
y
 = 0; y < 
ãrm
.
row
; ++y)

2082 
	`t£tch¨
('E', &
ãrm
.
c
.
©å
, 
x
, 
y
);

2085 
	}
}

2088 
	$t°r£quí˚
(
uch¨
 
c
)

2090 
	`°ºe£t
();

2092 
c
) {

2094 
c
 = 'P';

2095 
ãrm
.
esc
 |
ESC_DCS
;

2098 
c
 = '_';

2101 
c
 = '^';

2104 
c
 = ']';

2107 
°ªsc£q
.
ty≥
 = 
c
;

2108 
ãrm
.
esc
 |
ESC_STR
;

2109 
	}
}

2112 
	$tc⁄åﬁcode
(
uch¨
 
ascii
)

2114 
ascii
) {

2116 
	`çuâab
(1);

2119 
	`tmovëo
(
ãrm
.
c
.
x
-1,Åîm.c.
y
);

2122 
	`tmovëo
(0, 
ãrm
.
c
.
y
);

2128 
	`äewlöe
(
	`IS_SET
(
MODE_CRLF
));

2131 i‡(
ãrm
.
esc
 & 
ESC_STR_END
) {

2133 
	`°rh™dÀ
();

2135 
	`xbñl
();

2139 
	`csúe£t
();

2140 
ãrm
.
esc
 &~(
ESC_CSI
|
ESC_ALTCHARSET
|
ESC_TEST
);

2141 
ãrm
.
esc
 |
ESC_START
;

2145 
ãrm
.
ch¨£t
 = 1 - (
ascii
 - '\016');

2148 
	`t£tch¨
('?', &
ãrm
.
c
.
©å
,Åîm.c.
x
,Åîm.c.
y
);

2150 
	`csúe£t
();

2165 
	`äewlöe
(1);

2171 
ãrm
.
èbs
[ãrm.
c
.
x
] = 1;

2191 
	`âywrôe
(
vtidí
, 
	`°æí
(vtiden), 0);

2200 
	`t°r£quí˚
(
ascii
);

2204 
ãrm
.
esc
 &~(
ESC_STR_END
|
ESC_STR
);

2205 
	}
}

2212 
	$esch™dÀ
(
uch¨
 
ascii
)

2214 
ascii
) {

2216 
ãrm
.
esc
 |
ESC_CSI
;

2219 
ãrm
.
esc
 |
ESC_TEST
;

2222 
ãrm
.
esc
 |
ESC_UTF8
;

2229 
	`t°r£quí˚
(
ascii
);

2233 
ãrm
.
ch¨£t
 = 2 + (
ascii
 - 'n');

2239 
ãrm
.
ich¨£t
 = 
ascii
 - '(';

2240 
ãrm
.
esc
 |
ESC_ALTCHARSET
;

2243 i‡(
ãrm
.
c
.
y
 =ãrm.
bŸ
) {

2244 
	`ts¸ﬁlup
(
ãrm
.
t›
, 1);

2246 
	`tmovëo
(
ãrm
.
c
.
x
,Åîm.c.
y
+1);

2250 
	`äewlöe
(1);

2253 
ãrm
.
èbs
[ãrm.
c
.
x
] = 1;

2256 i‡(
ãrm
.
c
.
y
 =ãrm.
t›
) {

2257 
	`ts¸ﬁldown
(
ãrm
.
t›
, 1);

2259 
	`tmovëo
(
ãrm
.
c
.
x
,Åîm.c.
y
-1);

2263 
	`âywrôe
(
vtidí
, 
	`°æí
(vtiden), 0);

2266 
	`åe£t
();

2267 
	`ª£âôÀ
();

2268 
	`xlﬂdcﬁs
();

2271 
	`x£tmode
(1, 
MODE_APPKEYPAD
);

2274 
	`x£tmode
(0, 
MODE_APPKEYPAD
);

2277 
	`tcurs‹
(
CURSOR_SAVE
);

2280 
	`tcurs‹
(
CURSOR_LOAD
);

2283 i‡(
ãrm
.
esc
 & 
ESC_STR_END
)

2284 
	`°rh™dÀ
();

2287 
	`Ârötf
(
°dîr
, "erresc: unknown sequence ESC 0x%02X '%c'\n",

2288 (
uch¨
Ë
ascii
, 
	`i•röt
(ascii)?áscii:'.');

2292 
	}
}

2295 
	$çutc
(
Ru√
 
u
)

2297 
c
[
UTF_SIZ
];

2298 
c⁄åﬁ
;

2299 
width
, 
Àn
;

2300 
Glyph
 *
gp
;

2302 
c⁄åﬁ
 = 
	`ISCONTROL
(
u
);

2303 i‡(!
	`IS_SET
(
MODE_UTF8
Ë&& !IS_SET(
MODE_SIXEL
)) {

2304 
c
[0] = 
u
;

2305 
width
 = 
Àn
 = 1;

2307 
Àn
 = 
	`utf8ícode
(
u
, 
c
);

2308 i‡(!
c⁄åﬁ
 && (
width
 = 
	`wcwidth
(
u
)) == -1) {

2309 
	`mem˝y
(
c
, "\357\277\275", 4);

2310 
width
 = 1;

2314 i‡(
	`IS_SET
(
MODE_PRINT
))

2315 
	`çröãr
(
c
, 
Àn
);

2323 i‡(
ãrm
.
esc
 & 
ESC_STR
) {

2324 i‡(
u
 == '\a' || u == 030 || u == 032 || u == 033 ||

2325 
	`ISCONTROLC1
(
u
)) {

2326 
ãrm
.
esc
 &~(
ESC_START
|
ESC_STR
|
ESC_DCS
);

2327 i‡(
	`IS_SET
(
MODE_SIXEL
)) {

2329 
ãrm
.
mode
 &~
MODE_SIXEL
;

2332 
ãrm
.
esc
 |
ESC_STR_END
;

2333 
check_c⁄åﬁ_code
;

2337 i‡(
	`IS_SET
(
MODE_SIXEL
)) {

2341 i‡(
ãrm
.
esc
&
ESC_DCS
 && 
°ªsc£q
.
Àn
 =0 && 
u
 == 'q')

2342 
ãrm
.
mode
 |
MODE_SIXEL
;

2344 i‡(
°ªsc£q
.
Àn
+À¿>(°ªsc£q.
buf
)-1) {

2361 
	`memmove
(&
°ªsc£q
.
buf
[°ªsc£q.
Àn
], 
c
,Üen);

2362 
°ªsc£q
.
Àn
 +=Üen;

2366 
check_c⁄åﬁ_code
:

2372 i‡(
c⁄åﬁ
) {

2373 
	`tc⁄åﬁcode
(
u
);

2378 } i‡(
ãrm
.
esc
 & 
ESC_START
) {

2379 i‡(
ãrm
.
esc
 & 
ESC_CSI
) {

2380 
csõsc£q
.
buf
[csõsc£q.
Àn
++] = 
u
;

2381 i‡(
	`BETWEEN
(
u
, 0x40, 0x7E)

2382 || 
csõsc£q
.
Àn
 >= \

2383 (
csõsc£q
.
buf
)-1) {

2384 
ãrm
.
esc
 = 0;

2385 
	`csù¨£
();

2386 
	`csih™dÀ
();

2389 } i‡(
ãrm
.
esc
 & 
ESC_UTF8
) {

2390 
	`tdefutf8
(
u
);

2391 } i‡(
ãrm
.
esc
 & 
ESC_ALTCHARSET
) {

2392 
	`tde·øn
(
u
);

2393 } i‡(
ãrm
.
esc
 & 
ESC_TEST
) {

2394 
	`tde˘e°
(
u
);

2396 i‡(!
	`esch™dÀ
(
u
))

2400 
ãrm
.
esc
 = 0;

2407 i‡(
£l
.
ob
.
x
 !-1 && 
	`BETWEEN
(
ãrm
.
c
.
y
, sñ.ob.y, sñ.
€
.y))

2408 
	`£l˛ór
();

2410 
gp
 = &
ãrm
.
löe
[ãrm.
c
.
y
][ãrm.c.
x
];

2411 i‡(
	`IS_SET
(
MODE_WRAP
Ë&& (
ãrm
.
c
.
°©e
 & 
CURSOR_WRAPNEXT
)) {

2412 
gp
->
mode
 |
ATTR_WRAP
;

2413 
	`äewlöe
(1);

2414 
gp
 = &
ãrm
.
löe
[ãrm.
c
.
y
][ãrm.c.
x
];

2417 i‡(
	`IS_SET
(
MODE_INSERT
Ë&& 
ãrm
.
c
.
x
+
width
 <Åîm.
cﬁ
)

2418 
	`memmove
(
gp
+
width
, gp, (
ãrm
.
cﬁ
 -Åîm.
c
.
x
 - widthË* (
Glyph
));

2420 i‡(
ãrm
.
c
.
x
+
width
 >Åîm.
cﬁ
) {

2421 
	`äewlöe
(1);

2422 
gp
 = &
ãrm
.
löe
[ãrm.
c
.
y
][ãrm.c.
x
];

2425 
	`t£tch¨
(
u
, &
ãrm
.
c
.
©å
,Åîm.c.
x
,Åîm.c.
y
);

2427 i‡(
width
 == 2) {

2428 
gp
->
mode
 |
ATTR_WIDE
;

2429 i‡(
ãrm
.
c
.
x
+1 <Åîm.
cﬁ
) {

2430 
gp
[1].
u
 = '\0';

2431 
gp
[1].
mode
 = 
ATTR_WDUMMY
;

2434 i‡(
ãrm
.
c
.
x
+
width
 <Åîm.
cﬁ
) {

2435 
	`tmovëo
(
ãrm
.
c
.
x
+
width
,Åîm.c.
y
);

2437 
ãrm
.
c
.
°©e
 |
CURSOR_WRAPNEXT
;

2439 
	}
}

2442 
	$twrôe
(c⁄° *
buf
, 
buÊí
, 
show_˘æ
)

2444 
ch¨size
;

2445 
Ru√
 
u
;

2446 
n
;

2448 
n
 = 0;Ç < 
buÊí
;Ç +
ch¨size
) {

2449 i‡(
	`IS_SET
(
MODE_UTF8
Ë&& !IS_SET(
MODE_SIXEL
)) {

2451 
ch¨size
 = 
	`utf8decode
(
buf
 + 
n
, &
u
, 
buÊí
 -Ç);

2452 i‡(
ch¨size
 == 0)

2455 
u
 = 
buf
[
n
] & 0xFF;

2456 
ch¨size
 = 1;

2458 i‡(
show_˘æ
 && 
	`ISCONTROL
(
u
)) {

2459 i‡(
u
 & 0x80) {

2460 
u
 &= 0x7f;

2461 
	`çutc
('^');

2462 
	`çutc
('[');

2463 } i‡(
u
 != '\n' && u != '\r' && u != '\t') {

2464 
u
 ^= 0x40;

2465 
	`çutc
('^');

2468 
	`çutc
(
u
);

2470  
n
;

2471 
	}
}

2474 
	$åesize
(
cﬁ
, 
row
)

2476 
i
;

2477 
mörow
 = 
	`MIN
(
row
, 
ãrm
.row);

2478 
möcﬁ
 = 
	`MIN
(
cﬁ
, 
ãrm
.col);

2479 *
bp
;

2480 
TCurs‹
 
c
;

2482 i‡(
cﬁ
 < 1 || 
row
 < 1) {

2483 
	`Ârötf
(
°dîr
,

2484 "åesize:Éº‹ÑesizögÅÿ%dx%d\n", 
cﬁ
, 
row
);

2493 
i
 = 0; i <
ãrm
.
c
.
y
 - 
row
; i++) {

2494 
	`‰ì
(
ãrm
.
löe
[
i
]);

2495 
	`‰ì
(
ãrm
.
Æt
[
i
]);

2498 i‡(
i
 > 0) {

2499 
	`memmove
(
ãrm
.
löe
,Åîm.löê+ 
i
, 
row
 * (
Löe
));

2500 
	`memmove
(
ãrm
.
Æt
,Åîm.Æà+ 
i
, 
row
 * (
Löe
));

2502 
i
 +
row
; i < 
ãrm
.row; i++) {

2503 
	`‰ì
(
ãrm
.
löe
[
i
]);

2504 
	`‰ì
(
ãrm
.
Æt
[
i
]);

2508 
ãrm
.
löe
 = 
	`xªÆloc
—îm.löe, 
row
 * (
Löe
));

2509 
ãrm
.
Æt
 = 
	`xªÆloc
—îm.Æt, 
row
 * (
Löe
));

2510 
ãrm
.
dúty
 = 
	`xªÆloc
—îm.dúty, 
row
 * (*term.dirty));

2511 
ãrm
.
èbs
 = 
	`xªÆloc
—îm.èbs, 
cﬁ
 * (*term.tabs));

2514 
i
 = 0; i < 
mörow
; i++) {

2515 
ãrm
.
löe
[
i
] = 
	`xªÆloc
—îm.löe[i], 
cﬁ
 * (
Glyph
));

2516 
ãrm
.
Æt
[
i
] = 
	`xªÆloc
—îm.Æt[i], 
cﬁ
 * (
Glyph
));

2520  ; 
i
 < 
row
; i++) {

2521 
ãrm
.
löe
[
i
] = 
	`xmÆloc
(
cﬁ
 * (
Glyph
));

2522 
ãrm
.
Æt
[
i
] = 
	`xmÆloc
(
cﬁ
 * (
Glyph
));

2524 i‡(
cﬁ
 > 
ãrm
.col) {

2525 
bp
 = 
ãrm
.
èbs
 +Åîm.
cﬁ
;

2527 
	`mem£t
(
bp
, 0, (*
ãrm
.
èbs
Ë* (
cﬁ
 -Åerm.col));

2528 --
bp
 > 
ãrm
.
èbs
 && !*bp)

2530 
bp
 +
èb•a˚s
; b∞< 
ãrm
.
èbs
 + 
cﬁ
; bp +=Åabspaces)

2531 *
bp
 = 1;

2534 
ãrm
.
cﬁ
 = col;

2535 
ãrm
.
row
 =Ñow;

2537 
	`t£ts¸ﬁl
(0, 
row
-1);

2539 
	`tmovëo
(
ãrm
.
c
.
x
,Åîm.c.
y
);

2541 
c
 = 
ãrm
.c;

2542 
i
 = 0; i < 2; i++) {

2543 i‡(
möcﬁ
 < 
cﬁ
 && 0 < 
mörow
) {

2544 
	`t˛óºegi⁄
(
möcﬁ
, 0, 
cﬁ
 - 1, 
mörow
 - 1);

2546 i‡(0 < 
cﬁ
 && 
mörow
 < 
row
) {

2547 
	`t˛óºegi⁄
(0, 
mörow
, 
cﬁ
 - 1, 
row
 - 1);

2549 
	`tsw≠s¸ìn
();

2550 
	`tcurs‹
(
CURSOR_LOAD
);

2552 
ãrm
.
c
 = c;

2553 
	}
}

2556 
	$ª£âôÀ
()

2558 
	`x£âôÀ
(
NULL
);

2559 
	}
}

2562 
	$døwªgi⁄
(
x1
, 
y1
, 
x2
, 
y2
)

2564 
y
;

2565 
y
 = 
y1
; y < 
y2
; y++) {

2566 i‡(!
ãrm
.
dúty
[
y
])

2569 
ãrm
.
dúty
[
y
] = 0;

2570 
	`xdøwlöe
(
ãrm
.
löe
[
y
], 
x1
, y, 
x2
);

2572 
	}
}

2575 
	$døw
()

2577 
cx
 = 
ãrm
.
c
.
x
;

2579 i‡(!
	`x°¨tdøw
())

2583 
	`LIMIT
(
ãrm
.
ocx
, 0,Åîm.
cﬁ
-1);

2584 
	`LIMIT
(
ãrm
.
ocy
, 0,Åîm.
row
-1);

2585 i‡(
ãrm
.
löe
[ãrm.
ocy
][ãrm.
ocx
].
mode
 & 
ATTR_WDUMMY
)

2586 
ãrm
.
ocx
--;

2587 i‡(
ãrm
.
löe
[ãrm.
c
.
y
][
cx
].
mode
 & 
ATTR_WDUMMY
)

2588 
cx
--;

2590 
	`døwªgi⁄
(0, 0, 
ãrm
.
cﬁ
,Åîm.
row
);

2591 
	`xdøwcurs‹
(
cx
, 
ãrm
.
c
.
y
,Åîm.
löe
[term.c.y][cx],

2592 
ãrm
.
ocx
,Åîm.
ocy
,Åîm.
löe
[term.ocy][term.ocx]);

2593 
ãrm
.
ocx
 = 
cx
,Åîm.
ocy
 =Åîm.
c
.
y
;

2594 
	`xföishdøw
();

2595 
	}
}

2598 
	$ªdøw
()

2600 
	`tfuŒdút
();

2601 
	`døw
();

2602 
	}
}

	@st.h

3 
	~<°döt.h
>

4 
	~<sys/ty≥s.h
>

7 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

8 
	#MAX
(
a
, 
b
Ë(◊Ë< (bË? (bË: (a))

	)

9 
	#LEN
(
a
Ë(◊Ë/ ◊)[0])

	)

10 
	#BETWEEN
(
x
, 
a
, 
b
Ë(◊Ë<(xË&& (xË<(b))

	)

11 
	#DIVCEIL
(
n
, 
d
Ë((“Ë+ ((dË- 1)Ë/ (d))

	)

12 
	#DEFAULT
(
a
, 
b
Ë◊Ë◊Ë? (aË: (b)

	)

13 
	#LIMIT
(
x
, 
a
, 
b
Ë(xË(xË< (aË? (aË: (xË> (bË? (bË: (x)

	)

14 
	#ATTRCMP
(
a
, 
b
Ë(◊).
mode
 !(b).modê|| (a).
fg
 != (b).fg || \

15 (
a
).
bg
 !(
b
).bg)

	)

16 
	#TIMEDIFF
(
t1
, 
t2
Ë(—1.
tv_£c
-t2.tv_sec)*1000 + \

17 (
t1
.
tv_n£c
-
t2
.tv_n£c)/1E6)

	)

18 
	#MODBIT
(
x
, 
£t
, 
bô
Ë((£tË? ((xË|(bô)Ë: ((xË&~(bô)))

	)

20 
	#TRUECOLOR
(
r
,
g
,
b
Ë(1 << 24 | (rË<< 16 | (gË<< 8 | (b))

	)

21 
	#IS_TRUECOL
(
x
Ë(1 << 24 & (x))

	)

23 
	eglyph_©åibuã
 {

24 
	mATTR_NULL
 = 0,

25 
	mATTR_BOLD
 = 1 << 0,

26 
	mATTR_FAINT
 = 1 << 1,

27 
	mATTR_ITALIC
 = 1 << 2,

28 
	mATTR_UNDERLINE
 = 1 << 3,

29 
	mATTR_BLINK
 = 1 << 4,

30 
	mATTR_REVERSE
 = 1 << 5,

31 
	mATTR_INVISIBLE
 = 1 << 6,

32 
	mATTR_STRUCK
 = 1 << 7,

33 
	mATTR_WRAP
 = 1 << 8,

34 
	mATTR_WIDE
 = 1 << 9,

35 
	mATTR_WDUMMY
 = 1 << 10,

36 
	mATTR_BOLD_FAINT
 = 
ATTR_BOLD
 | 
ATTR_FAINT
,

39 
	e£À˘i⁄_mode
 {

40 
	mSEL_IDLE
 = 0,

41 
	mSEL_EMPTY
 = 1,

42 
	mSEL_READY
 = 2

45 
	e£À˘i⁄_ty≥
 {

46 
	mSEL_REGULAR
 = 1,

47 
	mSEL_RECTANGULAR
 = 2

50 
	e£À˘i⁄_¢≠
 {

51 
	mSNAP_WORD
 = 1,

52 
	mSNAP_LINE
 = 2

55 
	tuch¨
;

56 
	tuöt
;

57 
	tul⁄g
;

58 
	tush‹t
;

60 
uöt_Àa°32_t
 
	tRu√
;

62 
	#Glyph
 
Glyph_


	)

64 
Ru√
 
	mu
;

65 
ush‹t
 
	mmode
;

66 
uöt32_t
 
	mfg
;

67 
uöt32_t
 
	mbg
;

68 } 
	tGlyph
;

70 
Glyph
 *
	tLöe
;

73 
	mi
;

74 
uöt
 
	mui
;

75 
	mf
;

76 c⁄° *
	mv
;

77 } 
	tArg
;

79 
dõ
(const *, ...);

80 
ªdøw
();

81 
døw
();

83 
¥öts¸ìn
(c⁄° 
Arg
 *);

84 
¥öt£l
(c⁄° 
Arg
 *);

85 
£ndbªak
(c⁄° 
Arg
 *);

86 
toggÀ¥öãr
(c⁄° 
Arg
 *);

88 
èâr£t
();

89 
äew
(, );

90 
åesize
(, );

91 
t£tdúèâr
();

92 
âyh™gup
();

93 
ây√w
(*, *, *, **);

94 
size_t
 
âyªad
();

95 
âyªsize
(, );

96 
âywrôe
(c⁄° *, 
size_t
, );

98 
ª£âôÀ
();

100 
£l˛ór
();

101 
£löô
();

102 
£l°¨t
(, , );

103 
£Àxãnd
(, , , );

104 
£À˘ed
(, );

105 *
gë£l
();

107 
size_t
 
utf8ícode
(
Ru√
, *);

109 *
xmÆloc
(
size_t
);

110 *
xªÆloc
(*, 
size_t
);

111 *
x°rdup
(*);

114 *
utmp
;

115 *
°ty_¨gs
;

116 *
vtidí
;

117 *
w‹ddñimôîs
;

118 
ÆlowÆts¸ìn
;

119 *
ãrm«me
;

120 
èb•a˚s
;

121 
deÁu…fg
;

122 
deÁu…bg
;

	@win.h

3 
	ewö_mode
 {

4 
	mMODE_VISIBLE
 = 1 << 0,

5 
	mMODE_FOCUSED
 = 1 << 1,

6 
	mMODE_APPKEYPAD
 = 1 << 2,

7 
	mMODE_MOUSEBTN
 = 1 << 3,

8 
	mMODE_MOUSEMOTION
 = 1 << 4,

9 
	mMODE_REVERSE
 = 1 << 5,

10 
	mMODE_KBDLOCK
 = 1 << 6,

11 
	mMODE_HIDE
 = 1 << 7,

12 
	mMODE_APPCURSOR
 = 1 << 8,

13 
	mMODE_MOUSESGR
 = 1 << 9,

14 
	mMODE_8BIT
 = 1 << 10,

15 
	mMODE_BLINK
 = 1 << 11,

16 
	mMODE_FBLINK
 = 1 << 12,

17 
	mMODE_FOCUS
 = 1 << 13,

18 
	mMODE_MOUSEX10
 = 1 << 14,

19 
	mMODE_MOUSEMANY
 = 1 << 15,

20 
	mMODE_BRCKTPASTE
 = 1 << 16,

21 
	mMODE_NUMLOCK
 = 1 << 17,

22 
	mMODE_MOUSE
 = 
MODE_MOUSEBTN
|
MODE_MOUSEMOTION
|
MODE_MOUSEX10
\

23 |
MODE_MOUSEMANY
,

26 
xbñl
();

27 
x˛ùc›y
();

28 
xdøwcurs‹
(, , 
Glyph
, , , Glyph);

29 
xdøwlöe
(
Löe
, , , );

30 
xföishdøw
();

31 
xlﬂdcﬁs
();

32 
x£tcﬁ‹«me
(, const *);

33 
x£âôÀ
(*);

34 
x£tcurs‹
();

35 
x£tmode
(, );

36 
x£çoöãrmŸi⁄
();

37 
x£t£l
(*);

38 
x°¨tdøw
();

	@x.c

2 
	~<î∫o.h
>

3 
	~<m©h.h
>

4 
	~<limôs.h
>

5 
	~<loˇÀ.h
>

6 
	~<sig«l.h
>

7 
	~<sys/£À˘.h
>

8 
	~<time.h
>

9 
	~<uni°d.h
>

10 
	~<libgí.h
>

11 
	~<X11/X©om.h
>

12 
	~<X11/Xlib.h
>

13 
	~<X11/curs‹f⁄t.h
>

14 
	~<X11/keysym.h
>

15 
	~<X11/X·/X·.h
>

16 
	~<X11/XKBlib.h
>

18 *
	g¨gv0
;

19 
	~"¨g.h
"

20 
	~"°.h
"

21 
	~"wö.h
"

25 
uöt
 
	mmod
;

26 
KeySym
 
	mkeysym
;

27 (*
	mfunc
)(c⁄° 
	mArg
 *);

28 c⁄° 
Arg
 
	m¨g
;

29 } 
	tSh‹tcut
;

32 
uöt
 
	mb
;

33 
uöt
 
	mmask
;

34 *
	ms
;

35 } 
	tMou£Sh‹tcut
;

38 
KeySym
 
	mk
;

39 
uöt
 
	mmask
;

40 *
	ms
;

42 sig√d 
	m≠pkey
;

43 sig√d 
	m≠pcurs‹
;

44 } 
	tKey
;

47 
	#XK_ANY_MOD
 
UINT_MAX


	)

48 
	#XK_NO_MOD
 0

	)

49 
	#XK_SWITCH_MOD
 (1<<13)

	)

52 
˛ùc›y
(c⁄° 
Arg
 *);

53 
˛ù∑°e
(c⁄° 
Arg
 *);

54 
numlock
(c⁄° 
Arg
 *);

55 
£Õa°e
(c⁄° 
Arg
 *);

56 
zoom
(c⁄° 
Arg
 *);

57 
zoomabs
(c⁄° 
Arg
 *);

58 
zoomª£t
(c⁄° 
Arg
 *);

61 
	~"c⁄fig.h
"

64 
	#XEMBED_FOCUS_IN
 4

	)

65 
	#XEMBED_FOCUS_OUT
 5

	)

68 
	#IS_SET
(
Êag
Ë((
wö
.
mode
 & (Êag)Ë!0)

	)

69 
	#TRUERED
(
x
Ë(((xË& 0xff0000Ë>> 8)

	)

70 
	#TRUEGREEN
(
x
Ë(((xË& 0xff00))

	)

71 
	#TRUEBLUE
(
x
Ë(((xË& 0xffË<< 8)

	)

73 
X·Døw
 *
	tDøw
;

74 
X·Cﬁ‹
 
	tCﬁ‹
;

75 
X·GlyphF⁄tS≥c
 
	tGlyphF⁄tS≥c
;

79 
	mtw
, 
	mth
;

80 
	mw
, 
	mh
;

81 
	mch
;

82 
	mcw
;

83 
	mmode
;

84 
	mcurs‹
;

85 } 
	tTîmWödow
;

88 
Di•œy
 *
	mdpy
;

89 
Cﬁ‹m≠
 
	mcm≠
;

90 
Wödow
 
	mwö
;

91 
DøwabÀ
 
	mbuf
;

92 
GlyphF⁄tS≥c
 *
	m•ecbuf
;

93 
Atom
 
	mxembed
, 
	mwmdñëewö
, 
	m√twm«me
, 
	m√twmpid
;

94 
XIM
 
	mxim
;

95 
XIC
 
	mxic
;

96 
Døw
 
	mdøw
;

97 
VisuÆ
 *
	mvis
;

98 
XSëWödowAâribuãs
 
	m©ås
;

99 
	ms¸
;

100 
	misfixed
;

101 
	ml
, 
	mt
;

102 
	mgm
;

103 } 
	tXWödow
;

106 
Atom
 
	mxèrgë
;

107 *
	m¥im¨y
, *
	m˛ùbﬂrd
;

108 
time•ec
 
	mt˛ick1
;

109 
time•ec
 
	mt˛ick2
;

110 } 
	tXSñe˘i⁄
;

113 
	#F⁄t
 
F⁄t_


	)

115 
	mheight
;

116 
	mwidth
;

117 
	mas˚¡
;

118 
	mdes˚¡
;

119 
	mbad¶™t
;

120 
	mbadweight
;

121 
	mlbórög
;

122 
	mrbórög
;

123 
X·F⁄t
 *
	mm©ch
;

124 
FcF⁄tSë
 *
	m£t
;

125 
FcP©ã∫
 *
	m∑âîn
;

126 } 
	tF⁄t
;

130 
Cﬁ‹
 *
	mcﬁ
;

131 
size_t
 
	mcﬁÀn
;

132 
F⁄t
 
	mf⁄t
, 
	mbf⁄t
, 
	mif⁄t
, 
	mibf⁄t
;

133 
GC
 
	mgc
;

134 } 
	tDC
;

136 
ölöe
 
ush‹t
 
sixd_to_16bô
();

137 
xmakeglyphf⁄t•ecs
(
X·GlyphF⁄tS≥c
 *, c⁄° 
Glyph
 *, , , );

138 
xdøwglyphf⁄t•ecs
(c⁄° 
X·GlyphF⁄tS≥c
 *, 
Glyph
, , , );

139 
xdøwglyph
(
Glyph
, , );

140 
x˛ór
(, , , );

141 
xgeommasktogøvôy
();

142 
xöô
(, );

143 
¸esize
(, );

144 
xªsize
(, );

145 
xhöts
();

146 
xlﬂdcﬁ‹
(, c⁄° *, 
Cﬁ‹
 *);

147 
xlﬂdf⁄t
(
F⁄t
 *, 
FcP©ã∫
 *);

148 
xlﬂdf⁄ts
(*, );

149 
xu∆ﬂdf⁄t
(
F⁄t
 *);

150 
xu∆ﬂdf⁄ts
();

151 
x£ãnv
();

152 
x£turgícy
();

153 
evcﬁ
(
XEvít
 *);

154 
evrow
(
XEvít
 *);

156 
expo£
(
XEvít
 *);

157 
visibûôy
(
XEvít
 *);

158 
unm≠
(
XEvít
 *);

159 
k¥ess
(
XEvít
 *);

160 
cmesßge
(
XEvít
 *);

161 
ªsize
(
XEvít
 *);

162 
focus
(
XEvít
 *);

163 
bªÀa£
(
XEvít
 *);

164 
b¥ess
(
XEvít
 *);

165 
bmŸi⁄
(
XEvít
 *);

166 
¥›nŸify
(
XEvít
 *);

167 
£ Ÿify
(
XEvít
 *);

168 
£l˛ór_
(
XEvít
 *);

169 
£Ãeque°
(
XEvít
 *);

170 
£t£l
(*, 
Time
);

171 
mou££l
(
XEvít
 *, );

172 
mou£ªp‹t
(
XEvít
 *);

173 *
km≠
(
KeySym
, 
uöt
);

174 
m©ch
(
uöt
, uint);

176 
run
();

177 
ußge
();

179 (*
h™dÀr
[
LASTEvít
])(
XEvít
 *) = {

180 [
KeyPªss
] = 
k¥ess
,

181 [
Clõ¡Mesßge
] = 
cmesßge
,

182 [
C⁄figuªNŸify
] = 
ªsize
,

183 [
VisibûôyNŸify
] = 
visibûôy
,

184 [
Unm≠NŸify
] = 
unm≠
,

185 [
Expo£
] = 
expo£
,

186 [
FocusIn
] = 
focus
,

187 [
FocusOut
] = 
focus
,

188 [
MŸi⁄NŸify
] = 
bmŸi⁄
,

189 [
Buâ⁄Pªss
] = 
b¥ess
,

190 [
Buâ⁄Rñó£
] = 
bªÀa£
,

196 [
Sñe˘i⁄NŸify
] = 
£ Ÿify
,

201 [
Pr›îtyNŸify
] = 
¥›nŸify
,

202 [
Sñe˘i⁄Reque°
] = 
£Ãeque°
,

203 
	}
};

206 
DC
 
	gdc
;

207 
XWödow
 
	gxw
;

208 
XSñe˘i⁄
 
	gx£l
;

209 
TîmWödow
 
	gwö
;

213 
	mFRC_NORMAL
,

214 
	mFRC_ITALIC
,

215 
	mFRC_BOLD
,

216 
	mFRC_ITALICBOLD


220 
X·F⁄t
 *
	mf⁄t
;

221 
	mÊags
;

222 
Ru√
 
	municodï
;

223 } 
	tF⁄tˇche
;

226 
F⁄tˇche
 
	g‰c
[16];

227 
	g‰˛í
 = 0;

228 *
	gu£df⁄t
 = 
NULL
;

229 
	gu£df⁄tsize
 = 0;

230 
	gdeÁu…f⁄tsize
 = 0;

232 *
	g›t_˛ass
 = 
NULL
;

233 **
	g›t_cmd
 = 
NULL
;

234 *
	g›t_embed
 = 
NULL
;

235 *
	g›t_f⁄t
 = 
NULL
;

236 *
	g›t_io
 = 
NULL
;

237 *
	g›t_löe
 = 
NULL
;

238 *
	g›t_«me
 = 
NULL
;

239 *
	g›t_tôÀ
 = 
NULL
;

241 
	gﬁdbuâ⁄
 = 3;

244 
	$˛ùc›y
(c⁄° 
Arg
 *
dummy
)

246 
Atom
 
˛ùbﬂrd
;

248 
	`‰ì
(
x£l
.
˛ùbﬂrd
);

249 
x£l
.
˛ùbﬂrd
 = 
NULL
;

251 i‡(
x£l
.
¥im¨y
 !
NULL
) {

252 
x£l
.
˛ùbﬂrd
 = 
	`x°rdup
(x£l.
¥im¨y
);

253 
˛ùbﬂrd
 = 
	`XI¡înAtom
(
xw
.
dpy
, "CLIPBOARD", 0);

254 
	`XSëSñe˘i⁄Ow√r
(
xw
.
dpy
, 
˛ùbﬂrd
, xw.
wö
, 
CuºítTime
);

256 
	}
}

259 
	$˛ù∑°e
(c⁄° 
Arg
 *
dummy
)

261 
Atom
 
˛ùbﬂrd
;

263 
˛ùbﬂrd
 = 
	`XI¡înAtom
(
xw
.
dpy
, "CLIPBOARD", 0);

264 
	`XC⁄vîtSñe˘i⁄
(
xw
.
dpy
, 
˛ùbﬂrd
, 
x£l
.
xèrgë
, clipboard,

265 
xw
.
wö
, 
CuºítTime
);

266 
	}
}

269 
	$£Õa°e
(c⁄° 
Arg
 *
dummy
)

271 
	`XC⁄vîtSñe˘i⁄
(
xw
.
dpy
, 
XA_PRIMARY
, 
x£l
.
xèrgë
, XA_PRIMARY,

272 
xw
.
wö
, 
CuºítTime
);

273 
	}
}

276 
	$numlock
(c⁄° 
Arg
 *
dummy
)

278 
wö
.
mode
 ^
MODE_NUMLOCK
;

279 
	}
}

282 
	$zoom
(c⁄° 
Arg
 *
¨g
)

284 
Arg
 
œrg
;

286 
œrg
.
f
 = 
u£df⁄tsize
 + 
¨g
->f;

287 
	`zoomabs
(&
œrg
);

288 
	}
}

291 
	$zoomabs
(c⁄° 
Arg
 *
¨g
)

293 
	`xu∆ﬂdf⁄ts
();

294 
	`xlﬂdf⁄ts
(
u£df⁄t
, 
¨g
->
f
);

295 
	`¸esize
(0, 0);

296 
	`ªdøw
();

297 
	`xhöts
();

298 
	}
}

301 
	$zoomª£t
(c⁄° 
Arg
 *
¨g
)

303 
Arg
 
œrg
;

305 i‡(
deÁu…f⁄tsize
 > 0) {

306 
œrg
.
f
 = 
deÁu…f⁄tsize
;

307 
	`zoomabs
(&
œrg
);

309 
	}
}

312 
	$evcﬁ
(
XEvít
 *
e
)

314 
x
 = 
e
->
xbuâ⁄
.x - 
b‹dîpx
;

315 
	`LIMIT
(
x
, 0, 
wö
.
tw
 - 1);

316  
x
 / 
wö
.
cw
;

317 
	}
}

320 
	$evrow
(
XEvít
 *
e
)

322 
y
 = 
e
->
xbuâ⁄
.y - 
b‹dîpx
;

323 
	`LIMIT
(
y
, 0, 
wö
.
th
 - 1);

324  
y
 / 
wö
.
ch
;

325 
	}
}

328 
	$mou££l
(
XEvít
 *
e
, 
d⁄e
)

330 
ty≥
, 
£…y≥
 = 
SEL_REGULAR
;

331 
uöt
 
°©e
 = 
e
->
xbuâ⁄
.°©ê& ~(
Buâ⁄1Mask
 | 
f‹˚£lmod
);

333 
ty≥
 = 1;Åy≥ < 
	`LEN
(
£lmasks
); ++type) {

334 i‡(
	`m©ch
(
£lmasks
[
ty≥
], 
°©e
)) {

335 
£…y≥
 = 
ty≥
;

339 
	`£Àxãnd
(
	`evcﬁ
(
e
), 
	`evrow
”), 
£…y≥
, 
d⁄e
);

340 i‡(
d⁄e
)

341 
	`£t£l
(
	`gë£l
(), 
e
->
xbuâ⁄
.
time
);

342 
	}
}

345 
	$mou£ªp‹t
(
XEvít
 *
e
)

347 
Àn
, 
x
 = 
	`evcﬁ
(
e
), 
y
 = 
	`evrow
(e),

348 
buâ⁄
 = 
e
->
xbuâ⁄
.buâ⁄, 
°©e
 =É->xbutton.state;

349 
buf
[40];

350 
ox
, 
oy
;

353 i‡(
e
->
xbuâ⁄
.
ty≥
 =
MŸi⁄NŸify
) {

354 i‡(
x
 =
ox
 && 
y
 =
oy
)

356 i‡(!
	`IS_SET
(
MODE_MOUSEMOTION
Ë&& !IS_SET(
MODE_MOUSEMANY
))

359 i‡(
	`IS_SET
(
MODE_MOUSEMOTION
Ë&& 
ﬁdbuâ⁄
 == 3)

362 
buâ⁄
 = 
ﬁdbuâ⁄
 + 32;

363 
ox
 = 
x
;

364 
oy
 = 
y
;

366 i‡(!
	`IS_SET
(
MODE_MOUSESGR
Ë&& 
e
->
xbuâ⁄
.
ty≥
 =
Buâ⁄Rñó£
) {

367 
buâ⁄
 = 3;

369 
buâ⁄
 -
Buâ⁄1
;

370 i‡(
buâ⁄
 >= 3)

371 
buâ⁄
 += 64 - 3;

373 i‡(
e
->
xbuâ⁄
.
ty≥
 =
Buâ⁄Pªss
) {

374 
ﬁdbuâ⁄
 = 
buâ⁄
;

375 
ox
 = 
x
;

376 
oy
 = 
y
;

377 } i‡(
e
->
xbuâ⁄
.
ty≥
 =
Buâ⁄Rñó£
) {

378 
ﬁdbuâ⁄
 = 3;

380 i‡(
	`IS_SET
(
MODE_MOUSEX10
))

382 i‡(
buâ⁄
 == 64 || button == 65)

387 i‡(!
	`IS_SET
(
MODE_MOUSEX10
)) {

388 
buâ⁄
 +((
°©e
 & 
Shi·Mask
 ) ? 4 : 0)

389 + ((
°©e
 & 
Mod4Mask
 ) ? 8 : 0)

390 + ((
°©e
 & 
C⁄åﬁMask
) ? 16 : 0);

393 i‡(
	`IS_SET
(
MODE_MOUSESGR
)) {

394 
Àn
 = 
	`¢¥ötf
(
buf
, (buf), "\033[<%d;%d;%d%c",

395 
buâ⁄
, 
x
+1, 
y
+1,

396 
e
->
xbuâ⁄
.
ty≥
 =
Buâ⁄Rñó£
 ? 'm' : 'M');

397 } i‡(
x
 < 223 && 
y
 < 223) {

398 
Àn
 = 
	`¢¥ötf
(
buf
, (buf), "\033[M%c%c%c",

399 32+
buâ⁄
, 32+
x
+1, 32+
y
+1);

404 
	`âywrôe
(
buf
, 
Àn
, 0);

405 
	}
}

408 
	$b¥ess
(
XEvít
 *
e
)

410 
time•ec
 
now
;

411 
Mou£Sh‹tcut
 *
ms
;

412 
¢≠
;

414 i‡(
	`IS_SET
(
MODE_MOUSE
Ë&& !(
e
->
xbuâ⁄
.
°©e
 & 
f‹˚£lmod
)) {

415 
	`mou£ªp‹t
(
e
);

419 
ms
 = 
msh‹tcuts
; m†< msh‹tcut†+ 
	`LEN
(mshortcuts); ms++) {

420 i‡(
e
->
xbuâ⁄
.
buâ⁄
 =
ms
->
b


421 && 
	`m©ch
(
ms
->
mask
, 
e
->
xbuâ⁄
.
°©e
)) {

422 
	`âywrôe
(
ms
->
s
, 
	`°æí
(ms->s), 1);

427 i‡(
e
->
xbuâ⁄
.
buâ⁄
 =
Buâ⁄1
) {

432 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
now
);

433 i‡(
	`TIMEDIFF
(
now
, 
x£l
.
t˛ick2
Ë<
åùÀ˛icktimeout
) {

434 
¢≠
 = 
SNAP_LINE
;

435 } i‡(
	`TIMEDIFF
(
now
, 
x£l
.
t˛ick1
Ë<
doubÀ˛icktimeout
) {

436 
¢≠
 = 
SNAP_WORD
;

438 
¢≠
 = 0;

440 
x£l
.
t˛ick2
 = x£l.
t˛ick1
;

441 
x£l
.
t˛ick1
 = 
now
;

443 
	`£l°¨t
(
	`evcﬁ
(
e
), 
	`evrow
”), 
¢≠
);

445 
	}
}

448 
	$¥›nŸify
(
XEvít
 *
e
)

450 
XPr›îtyEvít
 *
x≥v
;

451 
Atom
 
˛ùbﬂrd
 = 
	`XI¡înAtom
(
xw
.
dpy
, "CLIPBOARD", 0);

453 
x≥v
 = &
e
->
x¥›îty
;

454 i‡(
x≥v
->
°©e
 =
Pr›îtyNewVÆue
 &&

455 (
x≥v
->
©om
 =
XA_PRIMARY
 ||

456 
x≥v
->
©om
 =
˛ùbﬂrd
)) {

457 
	`£ Ÿify
(
e
);

459 
	}
}

462 
	$£ Ÿify
(
XEvít
 *
e
)

464 
ul⁄g
 
nôems
, 
ofs
, 
ªm
;

465 
f‹m©
;

466 
uch¨
 *
d©a
, *
œ°
, *
ª∂
;

467 
Atom
 
ty≥
, 
ö¸©om
, 
¥›îty
 = 
N⁄e
;

469 
ö¸©om
 = 
	`XI¡înAtom
(
xw
.
dpy
, "INCR", 0);

471 
ofs
 = 0;

472 i‡(
e
->
ty≥
 =
Sñe˘i⁄NŸify
)

473 
¥›îty
 = 
e
->
x£À˘i⁄
.property;

474 i‡(
e
->
ty≥
 =
Pr›îtyNŸify
)

475 
¥›îty
 = 
e
->
x¥›îty
.
©om
;

477 i‡(
¥›îty
 =
N⁄e
)

481 i‡(
	`XGëWödowPr›îty
(
xw
.
dpy
, xw.
wö
, 
¥›îty
, 
ofs
,

482 
BUFSIZ
/4, 
FÆ£
, 
AnyPr›îtyTy≥
,

483 &
ty≥
, &
f‹m©
, &
nôems
, &
ªm
,

484 &
d©a
)) {

485 
	`Ârötf
(
°dîr
, "Clipboardállocation failed\n");

489 i‡(
e
->
ty≥
 =
Pr›îtyNŸify
 && 
nôems
 =0 && 
ªm
 == 0) {

496 
	`MODBIT
(
xw
.
©ås
.
evít_mask
, 0, 
Pr›îtyCh™geMask
);

497 
	`XCh™geWödowAâribuãs
(
xw
.
dpy
, xw.
wö
, 
CWEvítMask
,

498 &
xw
.
©ås
);

501 i‡(
ty≥
 =
ö¸©om
) {

507 
	`MODBIT
(
xw
.
©ås
.
evít_mask
, 1, 
Pr›îtyCh™geMask
);

508 
	`XCh™geWödowAâribuãs
(
xw
.
dpy
, xw.
wö
, 
CWEvítMask
,

509 &
xw
.
©ås
);

514 
	`XDñëePr›îty
(
xw
.
dpy
, xw.
wö
, ()
¥›îty
);

525 
ª∂
 = 
d©a
;

526 
œ°
 = 
d©a
 + 
nôems
 * 
f‹m©
 / 8;

527 (
ª∂
 = 
	`memchr
‘ïl, '\n', 
œ°
 -Ñepl))) {

528 *
ª∂
++ = '\r';

531 i‡(
	`IS_SET
(
MODE_BRCKTPASTE
Ë&& 
ofs
 == 0)

532 
	`âywrôe
("\033[200~", 6, 0);

533 
	`âywrôe
((*)
d©a
, 
nôems
 * 
f‹m©
 / 8, 1);

534 i‡(
	`IS_SET
(
MODE_BRCKTPASTE
Ë&& 
ªm
 == 0)

535 
	`âywrôe
("\033[201~", 6, 0);

536 
	`XFªe
(
d©a
);

538 
ofs
 +
nôems
 * 
f‹m©
 / 32;

539 } 
ªm
 > 0);

545 
	`XDñëePr›îty
(
xw
.
dpy
, xw.
wö
, ()
¥›îty
);

546 
	}
}

549 
	$x˛ùc›y
()

551 
	`˛ùc›y
(
NULL
);

552 
	}
}

555 
	$£l˛ór_
(
XEvít
 *
e
)

557 
	`£l˛ór
();

558 
	}
}

561 
	$£Ãeque°
(
XEvít
 *
e
)

563 
XSñe˘i⁄Reque°Evít
 *
x§e
;

564 
XSñe˘i⁄Evít
 
xev
;

565 
Atom
 
xa_èrgës
, 
°rög
, 
˛ùbﬂrd
;

566 *
£…ext
;

568 
x§e
 = (
XSñe˘i⁄Reque°Evít
 *Ë
e
;

569 
xev
.
ty≥
 = 
Sñe˘i⁄NŸify
;

570 
xev
.
ªque°‹
 = 
x§e
->requestor;

571 
xev
.
£À˘i⁄
 = 
x§e
->selection;

572 
xev
.
èrgë
 = 
x§e
->target;

573 
xev
.
time
 = 
x§e
->time;

574 i‡(
x§e
->
¥›îty
 =
N⁄e
)

575 
x§e
->
¥›îty
 = x§e->
èrgë
;

578 
xev
.
¥›îty
 = 
N⁄e
;

580 
xa_èrgës
 = 
	`XI¡înAtom
(
xw
.
dpy
, "TARGETS", 0);

581 i‡(
x§e
->
èrgë
 =
xa_èrgës
) {

583 
°rög
 = 
x£l
.
xèrgë
;

584 
	`XCh™gePr›îty
(
x§e
->
di•œy
, x§e->
ªque°‹
, x§e->
¥›îty
,

585 
XA_ATOM
, 32, 
Pr›ModeRïœ˚
,

586 (
uch¨
 *Ë&
°rög
, 1);

587 
xev
.
¥›îty
 = 
x§e
->property;

588 } i‡(
x§e
->
èrgë
 =
x£l
.
xèrgë
 || x§e->èrgë =
XA_STRING
) {

593 
˛ùbﬂrd
 = 
	`XI¡înAtom
(
xw
.
dpy
, "CLIPBOARD", 0);

594 i‡(
x§e
->
£À˘i⁄
 =
XA_PRIMARY
) {

595 
£…ext
 = 
x£l
.
¥im¨y
;

596 } i‡(
x§e
->
£À˘i⁄
 =
˛ùbﬂrd
) {

597 
£…ext
 = 
x£l
.
˛ùbﬂrd
;

599 
	`Ârötf
(
°dîr
,

601 
x§e
->
£À˘i⁄
);

604 i‡(
£…ext
 !
NULL
) {

605 
	`XCh™gePr›îty
(
x§e
->
di•œy
, x§e->
ªque°‹
,

606 
x§e
->
¥›îty
, x§e->
èrgë
,

607 8, 
Pr›ModeRïœ˚
,

608 (
uch¨
 *)
£…ext
, 
	`°æí
(seltext));

609 
xev
.
¥›îty
 = 
x§e
->property;

614 i‡(!
	`XSídEvít
(
x§e
->
di•œy
, x§e->
ªque°‹
, 1, 0, (
XEvít
 *Ë&
xev
))

615 
	`Ârötf
(
°dîr
, "Error sending SelectionNotifyÉvent\n");

616 
	}
}

619 
	$£t£l
(*
°r
, 
Time
 
t
)

621 i‡(!
°r
)

624 
	`‰ì
(
x£l
.
¥im¨y
);

625 
x£l
.
¥im¨y
 = 
°r
;

627 
	`XSëSñe˘i⁄Ow√r
(
xw
.
dpy
, 
XA_PRIMARY
, xw.
wö
, 
t
);

628 i‡(
	`XGëSñe˘i⁄Ow√r
(
xw
.
dpy
, 
XA_PRIMARY
Ë!xw.
wö
)

629 
	`£l˛ór
();

630 
	}
}

633 
	$x£t£l
(*
°r
)

635 
	`£t£l
(
°r
, 
CuºítTime
);

636 
	}
}

639 
	$bªÀa£
(
XEvít
 *
e
)

641 i‡(
	`IS_SET
(
MODE_MOUSE
Ë&& !(
e
->
xbuâ⁄
.
°©e
 & 
f‹˚£lmod
)) {

642 
	`mou£ªp‹t
(
e
);

646 i‡(
e
->
xbuâ⁄
.
buâ⁄
 =
Buâ⁄2
)

647 
	`£Õa°e
(
NULL
);

648 i‡(
e
->
xbuâ⁄
.
buâ⁄
 =
Buâ⁄1
)

649 
	`mou££l
(
e
, 1);

650 
	}
}

653 
	$bmŸi⁄
(
XEvít
 *
e
)

655 i‡(
	`IS_SET
(
MODE_MOUSE
Ë&& !(
e
->
xbuâ⁄
.
°©e
 & 
f‹˚£lmod
)) {

656 
	`mou£ªp‹t
(
e
);

660 
	`mou££l
(
e
, 0);

661 
	}
}

664 
	$¸esize
(
width
, 
height
)

666 
cﬁ
, 
row
;

668 i‡(
width
 != 0)

669 
wö
.
w
 = 
width
;

670 i‡(
height
 != 0)

671 
wö
.
h
 = 
height
;

673 
cﬁ
 = (
wö
.
w
 - 2 * 
b‹dîpx
Ë/ wö.
cw
;

674 
row
 = (
wö
.
h
 - 2 * 
b‹dîpx
Ë/ wö.
ch
;

675 
cﬁ
 = 
	`MAX
(1, col);

676 
row
 = 
	`MAX
(1,Ñow);

678 
	`åesize
(
cﬁ
, 
row
);

679 
	`xªsize
(
cﬁ
, 
row
);

680 
	`âyªsize
(
wö
.
tw
, wö.
th
);

681 
	}
}

684 
	$xªsize
(
cﬁ
, 
row
)

686 
wö
.
tw
 = 
cﬁ
 * wö.
cw
;

687 
wö
.
th
 = 
row
 * wö.
ch
;

689 
	`XFªePixm≠
(
xw
.
dpy
, xw.
buf
);

690 
xw
.
buf
 = 
	`XCª©ePixm≠
(xw.
dpy
, xw.
wö
, wö.
w
, wö.
h
,

691 
	`DeÁu…Dïth
(
xw
.
dpy
, xw.
s¸
));

692 
	`X·DøwCh™ge
(
xw
.
døw
, xw.
buf
);

693 
	`x˛ór
(0, 0, 
wö
.
w
, wö.
h
);

696 
xw
.
•ecbuf
 = 
	`xªÆloc
(xw.•ecbuf, 
cﬁ
 * (
GlyphF⁄tS≥c
));

697 
	}
}

699 
ush‹t


700 
	$sixd_to_16bô
(
x
)

702  
x
 == 0 ? 0 : 0x3737 + 0x2828 * x;

703 
	}
}

706 
	$xlﬂdcﬁ‹
(
i
, c⁄° *
«me
, 
Cﬁ‹
 *
ncﬁ‹
)

708 
XRídîCﬁ‹
 
cﬁ‹
 = { .
Æpha
 = 0xffff };

710 i‡(!
«me
) {

711 i‡(
	`BETWEEN
(
i
, 16, 255)) {

712 i‡(
i
 < 6*6*6+16) {

713 
cﬁ‹
.
ªd
 = 
	`sixd_to_16bô
–((
i
-16)/36)%6 );

714 
cﬁ‹
.
gªí
 = 
	`sixd_to_16bô
–((
i
-16)/6) %6 );

715 
cﬁ‹
.
blue
 = 
	`sixd_to_16bô
–((
i
-16)/1) %6 );

717 
cﬁ‹
.
ªd
 = 0x0808 + 0x0a0®* (
i
 - (6*6*6+16));

718 
cﬁ‹
.
gªí
 = cﬁ‹.
blue
 = cﬁ‹.
ªd
;

720  
	`X·Cﬁ‹AŒocVÆue
(
xw
.
dpy
, xw.
vis
,

721 
xw
.
cm≠
, &
cﬁ‹
, 
ncﬁ‹
);

723 
«me
 = 
cﬁ‹«me
[
i
];

726  
	`X·Cﬁ‹AŒocName
(
xw
.
dpy
, xw.
vis
, xw.
cm≠
, 
«me
, 
ncﬁ‹
);

727 
	}
}

730 
	$xlﬂdcﬁs
()

732 
i
;

733 
lﬂded
;

734 
Cﬁ‹
 *
˝
;

736 
dc
.
cﬁÀn
 = 
	`MAX
(
	`LEN
(
cﬁ‹«me
), 256);

737 
dc
.
cﬁ
 = 
	`xmÆloc
(dc.
cﬁÀn
 * (
Cﬁ‹
));

739 i‡(
lﬂded
) {

740 
˝
 = 
dc
.
cﬁ
; c∞< &dc.cﬁ[dc.
cﬁÀn
]; ++cp)

741 
	`X·Cﬁ‹Fªe
(
xw
.
dpy
, xw.
vis
, xw.
cm≠
, 
˝
);

744 
i
 = 0; i < 
dc
.
cﬁÀn
; i++)

745 i‡(!
	`xlﬂdcﬁ‹
(
i
, 
NULL
, &
dc
.
cﬁ
[i])) {

746 i‡(
cﬁ‹«me
[
i
])

747 
	`dõ
("couldÇŸáŒoˇã cﬁ‹ '%s'\n", 
cﬁ‹«me
[
i
]);

749 
	`dõ
("couldÇŸáŒoˇã cﬁ‹ %d\n", 
i
);

751 
lﬂded
 = 1;

752 
	}
}

755 
	$x£tcﬁ‹«me
(
x
, c⁄° *
«me
)

757 
Cﬁ‹
 
ncﬁ‹
;

759 i‡(!
	`BETWEEN
(
x
, 0, 
dc
.
cﬁÀn
))

763 i‡(!
	`xlﬂdcﬁ‹
(
x
, 
«me
, &
ncﬁ‹
))

766 
	`X·Cﬁ‹Fªe
(
xw
.
dpy
, xw.
vis
, xw.
cm≠
, &
dc
.
cﬁ
[
x
]);

767 
dc
.
cﬁ
[
x
] = 
ncﬁ‹
;

770 
	}
}

776 
	$x˛ór
(
x1
, 
y1
, 
x2
, 
y2
)

778 
	`X·DøwRe˘
(
xw
.
døw
,

779 &
dc
.
cﬁ
[
	`IS_SET
(
MODE_REVERSE
)? 
deÁu…fg
 : 
deÁu…bg
],

780 
x1
, 
y1
, 
x2
-x1, 
y2
-y1);

781 
	}
}

784 
	$xhöts
()

786 
XCœssHöt
 
˛ass
 = {
›t_«me
 ? o±_«mê: 
ãrm«me
,

787 
›t_˛ass
 ? o±_˛as†: 
ãrm«me
};

788 
XWMHöts
 
wm
 = {.
Êags
 = 
I≈utHöt
, .
öput
 = 1};

789 
XSizeHöts
 *
sizeh
;

791 
sizeh
 = 
	`XAŒocSizeHöts
();

793 
sizeh
->
Êags
 = 
PSize
 | 
PResizeInc
 | 
PBa£Size
 | 
PMöSize
;

794 
sizeh
->
height
 = 
wö
.
h
;

795 
sizeh
->
width
 = 
wö
.
w
;

796 
sizeh
->
height_öc
 = 
wö
.
ch
;

797 
sizeh
->
width_öc
 = 
wö
.
cw
;

798 
sizeh
->
ba£_height
 = 2 * 
b‹dîpx
;

799 
sizeh
->
ba£_width
 = 2 * 
b‹dîpx
;

800 
sizeh
->
mö_height
 = 
wö
.
ch
 + 2 * 
b‹dîpx
;

801 
sizeh
->
mö_width
 = 
wö
.
cw
 + 2 * 
b‹dîpx
;

802 i‡(
xw
.
isfixed
) {

803 
sizeh
->
Êags
 |
PMaxSize
;

804 
sizeh
->
mö_width
 = sizeh->
max_width
 = 
wö
.
w
;

805 
sizeh
->
mö_height
 = sizeh->
max_height
 = 
wö
.
h
;

807 i‡(
xw
.
gm
 & (
XVÆue
|
YVÆue
)) {

808 
sizeh
->
Êags
 |
USPosôi⁄
 | 
PWöGøvôy
;

809 
sizeh
->
x
 = 
xw
.
l
;

810 
sizeh
->
y
 = 
xw
.
t
;

811 
sizeh
->
wö_gøvôy
 = 
	`xgeommasktogøvôy
(
xw
.
gm
);

814 
	`XSëWMPr›îtõs
(
xw
.
dpy
, xw.
wö
, 
NULL
, NULL, NULL, 0, 
sizeh
, &
wm
,

815 &
˛ass
);

816 
	`XFªe
(
sizeh
);

817 
	}
}

820 
	$xgeommasktogøvôy
(
mask
)

822 
mask
 & (
XNeg©ive
|
YNeg©ive
)) {

824  
N‹thWe°Gøvôy
;

825 
XNeg©ive
:

826  
N‹thEa°Gøvôy
;

827 
YNeg©ive
:

828  
SouthWe°Gøvôy
;

831  
SouthEa°Gøvôy
;

832 
	}
}

835 
	$xlﬂdf⁄t
(
F⁄t
 *
f
, 
FcP©ã∫
 *
∑âîn
)

837 
FcP©ã∫
 *
c⁄figuªd
;

838 
FcP©ã∫
 *
m©ch
;

839 
FcResu…
 
ªsu…
;

840 
XGlyphInfo
 
exã¡s
;

841 
w™èâr
, 
havóâr
;

848 
c⁄figuªd
 = 
	`FcP©ã∫Du∂iˇã
(
∑âîn
);

849 i‡(!
c⁄figuªd
)

852 
	`FcC⁄figSub°ôuã
(
NULL
, 
c⁄figuªd
, 
FcM©chP©ã∫
);

853 
	`X·DeÁu…Sub°ôuã
(
xw
.
dpy
, xw.
s¸
, 
c⁄figuªd
);

855 
m©ch
 = 
	`FcF⁄tM©ch
(
NULL
, 
c⁄figuªd
, &
ªsu…
);

856 i‡(!
m©ch
) {

857 
	`FcP©ã∫De°roy
(
c⁄figuªd
);

861 i‡(!(
f
->
m©ch
 = 
	`X·F⁄tO≥nP©ã∫
(
xw
.
dpy
, match))) {

862 
	`FcP©ã∫De°roy
(
c⁄figuªd
);

863 
	`FcP©ã∫De°roy
(
m©ch
);

867 i‡((
	`X·P©ã∫GëI¡egî
(
∑âîn
, "¶™t", 0, &
w™èâr
) ==

868 
X·Resu…M©ch
)) {

873 i‡((
	`X·P©ã∫GëI¡egî
(
f
->
m©ch
->
∑âîn
, "slant", 0,

874 &
havóâr
Ë!
X·Resu…M©ch
Ë|| havóâ∏< 
w™èâr
) {

875 
f
->
bad¶™t
 = 1;

876 
	`Âuts
("f⁄à¶™àd€†nŸ m©ch\n", 
°dîr
);

880 i‡((
	`X·P©ã∫GëI¡egî
(
∑âîn
, "weight", 0, &
w™èâr
) ==

881 
X·Resu…M©ch
)) {

882 i‡((
	`X·P©ã∫GëI¡egî
(
f
->
m©ch
->
∑âîn
, "weight", 0,

883 &
havóâr
Ë!
X·Resu…M©ch
Ë|| havóâ∏!
w™èâr
) {

884 
f
->
badweight
 = 1;

885 
	`Âuts
("f⁄àweighàd€†nŸ m©ch\n", 
°dîr
);

889 
	`X·TextExã¡sUtf8
(
xw
.
dpy
, 
f
->
m©ch
,

890 (c⁄° 
FcCh¨8
 *Ë
ascii_¥öèbÀ
,

891 
	`°æí
(
ascii_¥öèbÀ
), &
exã¡s
);

893 
f
->
£t
 = 
NULL
;

894 
f
->
∑âîn
 = 
c⁄figuªd
;

896 
f
->
as˚¡
 = f->
m©ch
->ascent;

897 
f
->
des˚¡
 = f->
m©ch
->descent;

898 
f
->
lbórög
 = 0;

899 
f
->
rbórög
 = f->
m©ch
->
max_adv™˚_width
;

901 
f
->
height
 = f->
as˚¡
 + f->
des˚¡
;

902 
f
->
width
 = 
	`DIVCEIL
(
exã¡s
.
xOff
, 
	`°æí
(
ascii_¥öèbÀ
));

905 
	}
}

908 
	$xlﬂdf⁄ts
(*
f⁄t°r
, 
f⁄tsize
)

910 
FcP©ã∫
 *
∑âîn
;

911 
f⁄tvÆ
;

913 i‡(
f⁄t°r
[0] == '-')

914 
∑âîn
 = 
	`X·XlfdP¨£
(
f⁄t°r
, 
FÆ£
, False);

916 
∑âîn
 = 
	`FcNameP¨£
((
FcCh¨8
 *)
f⁄t°r
);

918 i‡(!
∑âîn
)

919 
	`dõ
("ˇn'à›í f⁄à%s\n", 
f⁄t°r
);

921 i‡(
f⁄tsize
 > 1) {

922 
	`FcP©ã∫Dñ
(
∑âîn
, 
FC_PIXEL_SIZE
);

923 
	`FcP©ã∫Dñ
(
∑âîn
, 
FC_SIZE
);

924 
	`FcP©ã∫AddDoubÀ
(
∑âîn
, 
FC_PIXEL_SIZE
, ()
f⁄tsize
);

925 
u£df⁄tsize
 = 
f⁄tsize
;

927 i‡(
	`FcP©ã∫GëDoubÀ
(
∑âîn
, 
FC_PIXEL_SIZE
, 0, &
f⁄tvÆ
) ==

928 
FcResu…M©ch
) {

929 
u£df⁄tsize
 = 
f⁄tvÆ
;

930 } i‡(
	`FcP©ã∫GëDoubÀ
(
∑âîn
, 
FC_SIZE
, 0, &
f⁄tvÆ
) ==

931 
FcResu…M©ch
) {

932 
u£df⁄tsize
 = -1;

938 
	`FcP©ã∫AddDoubÀ
(
∑âîn
, 
FC_PIXEL_SIZE
, 12);

939 
u£df⁄tsize
 = 12;

941 
deÁu…f⁄tsize
 = 
u£df⁄tsize
;

944 i‡(
	`xlﬂdf⁄t
(&
dc
.
f⁄t
, 
∑âîn
))

945 
	`dõ
("ˇn'à›í f⁄à%s\n", 
f⁄t°r
);

947 i‡(
u£df⁄tsize
 < 0) {

948 
	`FcP©ã∫GëDoubÀ
(
dc
.
f⁄t
.
m©ch
->
∑âîn
,

949 
FC_PIXEL_SIZE
, 0, &
f⁄tvÆ
);

950 
u£df⁄tsize
 = 
f⁄tvÆ
;

951 i‡(
f⁄tsize
 == 0)

952 
deÁu…f⁄tsize
 = 
f⁄tvÆ
;

956 
wö
.
cw
 = 
	`˚ûf
(
dc
.
f⁄t
.
width
 * 
cwsˇÀ
);

957 
wö
.
ch
 = 
	`˚ûf
(
dc
.
f⁄t
.
height
 * 
chsˇÀ
);

959 
	`FcP©ã∫Dñ
(
∑âîn
, 
FC_SLANT
);

960 
	`FcP©ã∫AddI¡egî
(
∑âîn
, 
FC_SLANT
, 
FC_SLANT_ITALIC
);

961 i‡(
	`xlﬂdf⁄t
(&
dc
.
if⁄t
, 
∑âîn
))

962 
	`dõ
("ˇn'à›í f⁄à%s\n", 
f⁄t°r
);

964 
	`FcP©ã∫Dñ
(
∑âîn
, 
FC_WEIGHT
);

965 
	`FcP©ã∫AddI¡egî
(
∑âîn
, 
FC_WEIGHT
, 
FC_WEIGHT_BOLD
);

966 i‡(
	`xlﬂdf⁄t
(&
dc
.
ibf⁄t
, 
∑âîn
))

967 
	`dõ
("ˇn'à›í f⁄à%s\n", 
f⁄t°r
);

969 
	`FcP©ã∫Dñ
(
∑âîn
, 
FC_SLANT
);

970 
	`FcP©ã∫AddI¡egî
(
∑âîn
, 
FC_SLANT
, 
FC_SLANT_ROMAN
);

971 i‡(
	`xlﬂdf⁄t
(&
dc
.
bf⁄t
, 
∑âîn
))

972 
	`dõ
("ˇn'à›í f⁄à%s\n", 
f⁄t°r
);

974 
	`FcP©ã∫De°roy
(
∑âîn
);

975 
	}
}

978 
	$xu∆ﬂdf⁄t
(
F⁄t
 *
f
)

980 
	`X·F⁄tClo£
(
xw
.
dpy
, 
f
->
m©ch
);

981 
	`FcP©ã∫De°roy
(
f
->
∑âîn
);

982 i‡(
f
->
£t
)

983 
	`FcF⁄tSëDe°roy
(
f
->
£t
);

984 
	}
}

987 
	$xu∆ﬂdf⁄ts
()

990 
‰˛í
 > 0)

991 
	`X·F⁄tClo£
(
xw
.
dpy
, 
‰c
[--
‰˛í
].
f⁄t
);

993 
	`xu∆ﬂdf⁄t
(&
dc
.
f⁄t
);

994 
	`xu∆ﬂdf⁄t
(&
dc
.
bf⁄t
);

995 
	`xu∆ﬂdf⁄t
(&
dc
.
if⁄t
);

996 
	`xu∆ﬂdf⁄t
(&
dc
.
ibf⁄t
);

997 
	}
}

1000 
	$xöô
(
cﬁs
, 
rows
)

1002 
XGCVÆues
 
gcvÆues
;

1003 
Curs‹
 
curs‹
;

1004 
Wödow
 
∑ª¡
;

1005 
pid_t
 
thi•id
 = 
	`gëpid
();

1006 
XCﬁ‹
 
xmou£fg
, 
xmou£bg
;

1008 i‡(!(
xw
.
dpy
 = 
	`XO≥nDi•œy
(
NULL
)))

1009 
	`dõ
("can't open display\n");

1010 
xw
.
s¸
 = 
	`XDeÁu…S¸ìn
(xw.
dpy
);

1011 
xw
.
vis
 = 
	`XDeÁu…VisuÆ
(xw.
dpy
, xw.
s¸
);

1014 i‡(!
	`FcInô
())

1015 
	`dõ
("couldÇot init fontconfig.\n");

1017 
u£df⁄t
 = (
›t_f⁄t
 =
NULL
)? 
f⁄t
 : opt_font;

1018 
	`xlﬂdf⁄ts
(
u£df⁄t
, 0);

1021 
xw
.
cm≠
 = 
	`XDeÁu…Cﬁ‹m≠
(xw.
dpy
, xw.
s¸
);

1022 
	`xlﬂdcﬁs
();

1025 
wö
.
w
 = 2 * 
b‹dîpx
 + 
cﬁs
 * wö.
cw
;

1026 
wö
.
h
 = 2 * 
b‹dîpx
 + 
rows
 * wö.
ch
;

1027 i‡(
xw
.
gm
 & 
XNeg©ive
)

1028 
xw
.
l
 +
	`Di•œyWidth
(xw.
dpy
, xw.
s¸
Ë- 
wö
.
w
 - 2;

1029 i‡(
xw
.
gm
 & 
YNeg©ive
)

1030 
xw
.
t
 +
	`Di•œyHeight
(xw.
dpy
, xw.
s¸
Ë- 
wö
.
h
 - 2;

1033 
xw
.
©ås
.
background_pixñ
 = 
dc
.
cﬁ
[
deÁu…bg
].
pixñ
;

1034 
xw
.
©ås
.
b‹dî_pixñ
 = 
dc
.
cﬁ
[
deÁu…bg
].
pixñ
;

1035 
xw
.
©ås
.
bô_gøvôy
 = 
N‹thWe°Gøvôy
;

1036 
xw
.
©ås
.
evít_mask
 = 
FocusCh™geMask
 | 
KeyPªssMask


1037 | 
ExposuªMask
 | 
VisibûôyCh™geMask
 | 
Såu˘uªNŸifyMask


1038 | 
Buâ⁄MŸi⁄Mask
 | 
Buâ⁄PªssMask
 | 
Buâ⁄Rñó£Mask
;

1039 
xw
.
©ås
.
cﬁ‹m≠
 = xw.
cm≠
;

1041 i‡(!(
›t_embed
 && (
∑ª¡
 = 
	`°πﬁ
(›t_embed, 
NULL
, 0))))

1042 
∑ª¡
 = 
	`XRoŸWödow
(
xw
.
dpy
, xw.
s¸
);

1043 
xw
.
wö
 = 
	`XCª©eWödow
(xw.
dpy
, 
∑ª¡
, xw.
l
, xw.
t
,

1044 
wö
.
w
, wö.
h
, 0, 
	`XDeÁu…Dïth
(
xw
.
dpy
, xw.
s¸
), 
I≈utOuçut
,

1045 
xw
.
vis
, 
CWBackPixñ
 | 
CWB‹dîPixñ
 | 
CWBôGøvôy


1046 | 
CWEvítMask
 | 
CWCﬁ‹m≠
, &
xw
.
©ås
);

1048 
	`mem£t
(&
gcvÆues
, 0, (gcvalues));

1049 
gcvÆues
.
gøphics_exposuªs
 = 
FÆ£
;

1050 
dc
.
gc
 = 
	`XCª©eGC
(
xw
.
dpy
, 
∑ª¡
, 
GCGøphicsExposuªs
,

1051 &
gcvÆues
);

1052 
xw
.
buf
 = 
	`XCª©ePixm≠
(xw.
dpy
, xw.
wö
, wö.
w
, wö.
h
,

1053 
	`DeÁu…Dïth
(
xw
.
dpy
, xw.
s¸
));

1054 
	`XSëF‹eground
(
xw
.
dpy
, 
dc
.
gc
, dc.
cﬁ
[
deÁu…bg
].
pixñ
);

1055 
	`XFûlRe˘™gÀ
(
xw
.
dpy
, xw.
buf
, 
dc
.
gc
, 0, 0, 
wö
.
w
, wö.
h
);

1058 
xw
.
•ecbuf
 = 
	`xmÆloc
(
cﬁs
 * (
GlyphF⁄tS≥c
));

1061 
xw
.
døw
 = 
	`X·DøwCª©e
(xw.
dpy
, xw.
buf
, xw.
vis
, xw.
cm≠
);

1064 i‡((
xw
.
xim
 = 
	`XO≥nIM
(xw.
dpy
, 
NULL
, NULL, NULL)) == NULL) {

1065 
	`XSëLoˇÀModifõrs
("@im=local");

1066 i‡((
xw
.
xim
 = 
	`XO≥nIM
(xw.
dpy
, 
NULL
, NULL, NULL)) == NULL) {

1067 
	`XSëLoˇÀModifõrs
("@im=");

1068 i‡((
xw
.
xim
 = 
	`XO≥nIM
(xw.
dpy
,

1069 
NULL
, NULL, NULL)) == NULL) {

1070 
	`dõ
("XOpenIM failed. CouldÇot open input"

1075 
xw
.
xic
 = 
	`XCª©eIC
(xw.
xim
, 
XNI≈utStyÀ
, 
XIMPªedôNŸhög


1076 | 
XIMSètusNŸhög
, 
XNClõ¡Wödow
, 
xw
.
wö
,

1077 
XNFocusWödow
, 
xw
.
wö
, 
NULL
);

1078 i‡(
xw
.
xic
 =
NULL
)

1079 
	`dõ
("XCreateIC failed. CouldÇot obtain input method.\n");

1082 
curs‹
 = 
	`XCª©eF⁄tCurs‹
(
xw
.
dpy
, 
mou£sh≠e
);

1083 
	`XDeföeCurs‹
(
xw
.
dpy
, xw.
wö
, 
curs‹
);

1085 i‡(
	`XP¨£Cﬁ‹
(
xw
.
dpy
, xw.
cm≠
, 
cﬁ‹«me
[
mou£fg
], &
xmou£fg
) == 0) {

1086 
xmou£fg
.
ªd
 = 0xffff;

1087 
xmou£fg
.
gªí
 = 0xffff;

1088 
xmou£fg
.
blue
 = 0xffff;

1091 i‡(
	`XP¨£Cﬁ‹
(
xw
.
dpy
, xw.
cm≠
, 
cﬁ‹«me
[
mou£bg
], &
xmou£bg
) == 0) {

1092 
xmou£bg
.
ªd
 = 0x0000;

1093 
xmou£bg
.
gªí
 = 0x0000;

1094 
xmou£bg
.
blue
 = 0x0000;

1097 
	`XRecﬁ‹Curs‹
(
xw
.
dpy
, 
curs‹
, &
xmou£fg
, &
xmou£bg
);

1099 
xw
.
xembed
 = 
	`XI¡înAtom
(xw.
dpy
, "_XEMBED", 
FÆ£
);

1100 
xw
.
wmdñëewö
 = 
	`XI¡înAtom
(xw.
dpy
, "WM_DELETE_WINDOW", 
FÆ£
);

1101 
xw
.
√twm«me
 = 
	`XI¡înAtom
(xw.
dpy
, "_NET_WM_NAME", 
FÆ£
);

1102 
	`XSëWMPrŸocﬁs
(
xw
.
dpy
, xw.
wö
, &xw.
wmdñëewö
, 1);

1104 
xw
.
√twmpid
 = 
	`XI¡înAtom
(xw.
dpy
, "_NET_WM_PID", 
FÆ£
);

1105 
	`XCh™gePr›îty
(
xw
.
dpy
, xw.
wö
, xw.
√twmpid
, 
XA_CARDINAL
, 32,

1106 
Pr›ModeRïœ˚
, (
uch¨
 *)&
thi•id
, 1);

1108 
wö
.
mode
 = 
MODE_NUMLOCK
;

1109 
	`ª£âôÀ
();

1110 
	`XM≠Wödow
(
xw
.
dpy
, xw.
wö
);

1111 
	`xhöts
();

1112 
	`XSync
(
xw
.
dpy
, 
FÆ£
);

1114 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
x£l
.
t˛ick1
);

1115 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
x£l
.
t˛ick2
);

1116 
x£l
.
¥im¨y
 = 
NULL
;

1117 
x£l
.
˛ùbﬂrd
 = 
NULL
;

1118 
x£l
.
xèrgë
 = 
	`XI¡înAtom
(
xw
.
dpy
, "UTF8_STRING", 0);

1119 i‡(
x£l
.
xèrgë
 =
N⁄e
)

1120 
x£l
.
xèrgë
 = 
XA_STRING
;

1121 
	}
}

1124 
	$xmakeglyphf⁄t•ecs
(
X·GlyphF⁄tS≥c
 *
•ecs
, c⁄° 
Glyph
 *
glyphs
, 
Àn
, 
x
, 
y
)

1126 
wöx
 = 
b‹dîpx
 + 
x
 * 
wö
.
cw
, 
wöy
 = b‹dîpx + 
y
 * wö.
ch
, 
xp
, 
yp
;

1127 
ush‹t
 
mode
, 
¥evmode
 = 
USHRT_MAX
;

1128 
F⁄t
 *
f⁄t
 = &
dc
.font;

1129 
‰cÊags
 = 
FRC_NORMAL
;

1130 
ru√width
 = 
wö
.
cw
;

1131 
Ru√
 
ru√
;

1132 
FT_UI¡
 
glyphidx
;

1133 
FcResu…
 
f¸es
;

1134 
FcP©ã∫
 *
f˝©ã∫
, *
f⁄ç©ã∫
;

1135 
FcF⁄tSë
 *
fc£ts
[] = { 
NULL
 };

1136 
FcCh¨Së
 *
fcch¨£t
;

1137 
i
, 
f
, 
num•ecs
 = 0;

1139 
i
 = 0, 
xp
 = 
wöx
, 
yp
 = 
wöy
 + 
f⁄t
->
as˚¡
; i < 
Àn
; ++i) {

1141 
ru√
 = 
glyphs
[
i
].
u
;

1142 
mode
 = 
glyphs
[
i
].mode;

1145 i‡(
mode
 =
ATTR_WDUMMY
)

1149 i‡(
¥evmode
 !
mode
) {

1150 
¥evmode
 = 
mode
;

1151 
f⁄t
 = &
dc
.font;

1152 
‰cÊags
 = 
FRC_NORMAL
;

1153 
ru√width
 = 
wö
.
cw
 * ((
mode
 & 
ATTR_WIDE
) ? 2.0f : 1.0f);

1154 i‡((
mode
 & 
ATTR_ITALIC
Ë&& (modê& 
ATTR_BOLD
)) {

1155 
f⁄t
 = &
dc
.
ibf⁄t
;

1156 
‰cÊags
 = 
FRC_ITALICBOLD
;

1157 } i‡(
mode
 & 
ATTR_ITALIC
) {

1158 
f⁄t
 = &
dc
.
if⁄t
;

1159 
‰cÊags
 = 
FRC_ITALIC
;

1160 } i‡(
mode
 & 
ATTR_BOLD
) {

1161 
f⁄t
 = &
dc
.
bf⁄t
;

1162 
‰cÊags
 = 
FRC_BOLD
;

1164 
yp
 = 
wöy
 + 
f⁄t
->
as˚¡
;

1168 
glyphidx
 = 
	`X·Ch¨Index
(
xw
.
dpy
, 
f⁄t
->
m©ch
, 
ru√
);

1169 i‡(
glyphidx
) {

1170 
•ecs
[
num•ecs
].
f⁄t
 = f⁄t->
m©ch
;

1171 
•ecs
[
num•ecs
].
glyph
 = 
glyphidx
;

1172 
•ecs
[
num•ecs
].
x
 = ()
xp
;

1173 
•ecs
[
num•ecs
].
y
 = ()
yp
;

1174 
xp
 +
ru√width
;

1175 
num•ecs
++;

1180 
f
 = 0; f < 
‰˛í
; f++) {

1181 
glyphidx
 = 
	`X·Ch¨Index
(
xw
.
dpy
, 
‰c
[
f
].
f⁄t
, 
ru√
);

1183 i‡(
glyphidx
 && 
‰c
[
f
].
Êags
 =
‰cÊags
)

1186 i‡(!
glyphidx
 && 
‰c
[
f
].
Êags
 =
‰cÊags


1187 && 
‰c
[
f
].
unicodï
 =
ru√
) {

1193 i‡(
f
 >
‰˛í
) {

1194 i‡(!
f⁄t
->
£t
)

1195 
f⁄t
->
£t
 = 
	`FcF⁄tS‹t
(0, f⁄t->
∑âîn
,

1196 1, 0, &
f¸es
);

1197 
fc£ts
[0] = 
f⁄t
->
£t
;

1206 
f˝©ã∫
 = 
	`FcP©ã∫Du∂iˇã
(
f⁄t
->
∑âîn
);

1207 
fcch¨£t
 = 
	`FcCh¨SëCª©e
();

1209 
	`FcCh¨SëAddCh¨
(
fcch¨£t
, 
ru√
);

1210 
	`FcP©ã∫AddCh¨Së
(
f˝©ã∫
, 
FC_CHARSET
,

1211 
fcch¨£t
);

1212 
	`FcP©ã∫AddBoﬁ
(
f˝©ã∫
, 
FC_SCALABLE
, 1);

1214 
	`FcC⁄figSub°ôuã
(0, 
f˝©ã∫
,

1215 
FcM©chP©ã∫
);

1216 
	`FcDeÁu…Sub°ôuã
(
f˝©ã∫
);

1218 
f⁄ç©ã∫
 = 
	`FcF⁄tSëM©ch
(0, 
fc£ts
, 1,

1219 
f˝©ã∫
, &
f¸es
);

1224 i‡(
‰˛í
 >
	`LEN
(
‰c
)) {

1225 
‰˛í
 = 
	`LEN
(
‰c
) - 1;

1226 
	`X·F⁄tClo£
(
xw
.
dpy
, 
‰c
[
‰˛í
].
f⁄t
);

1227 
‰c
[
‰˛í
].
unicodï
 = 0;

1230 
‰c
[
‰˛í
].
f⁄t
 = 
	`X·F⁄tO≥nP©ã∫
(
xw
.
dpy
,

1231 
f⁄ç©ã∫
);

1232 i‡(!
‰c
[
‰˛í
].
f⁄t
)

1233 
	`dõ
("XftFontOpenPattern failed seeking fallback font: %s\n",

1234 
	`°ªº‹
(
î∫o
));

1235 
‰c
[
‰˛í
].
Êags
 = 
‰cÊags
;

1236 
‰c
[
‰˛í
].
unicodï
 = 
ru√
;

1238 
glyphidx
 = 
	`X·Ch¨Index
(
xw
.
dpy
, 
‰c
[
‰˛í
].
f⁄t
, 
ru√
);

1240 
f
 = 
‰˛í
;

1241 
‰˛í
++;

1243 
	`FcP©ã∫De°roy
(
f˝©ã∫
);

1244 
	`FcCh¨SëDe°roy
(
fcch¨£t
);

1247 
•ecs
[
num•ecs
].
f⁄t
 = 
‰c
[
f
].font;

1248 
•ecs
[
num•ecs
].
glyph
 = 
glyphidx
;

1249 
•ecs
[
num•ecs
].
x
 = ()
xp
;

1250 
•ecs
[
num•ecs
].
y
 = ()
yp
;

1251 
xp
 +
ru√width
;

1252 
num•ecs
++;

1255  
num•ecs
;

1256 
	}
}

1259 
	$xdøwglyphf⁄t•ecs
(c⁄° 
X·GlyphF⁄tS≥c
 *
•ecs
, 
Glyph
 
ba£
, 
Àn
, 
x
, 
y
)

1261 
ch¨Àn
 = 
Àn
 * ((
ba£
.
mode
 & 
ATTR_WIDE
) ? 2 : 1);

1262 
wöx
 = 
b‹dîpx
 + 
x
 * 
wö
.
cw
, 
wöy
 = b‹dîpx + 
y
 * wö.
ch
,

1263 
width
 = 
ch¨Àn
 * 
wö
.
cw
;

1264 
Cﬁ‹
 *
fg
, *
bg
, *
ãmp
, 
ªvfg
, 
ªvbg
, 
åuefg
, 
åuebg
;

1265 
XRídîCﬁ‹
 
cﬁfg
, 
cﬁbg
;

1266 
XRe˘™gÀ
 
r
;

1269 i‡(
ba£
.
mode
 & 
ATTR_ITALIC
 && ba£.modê& 
ATTR_BOLD
) {

1270 i‡(
dc
.
ibf⁄t
.
bad¶™t
 || dc.ibf⁄t.
badweight
)

1271 
ba£
.
fg
 = 
deÁu…©å
;

1272 } i‡((
ba£
.
mode
 & 
ATTR_ITALIC
 && 
dc
.
if⁄t
.
bad¶™t
) ||

1273 (
ba£
.
mode
 & 
ATTR_BOLD
 && 
dc
.
bf⁄t
.
badweight
)) {

1274 
ba£
.
fg
 = 
deÁu…©å
;

1277 i‡(
	`IS_TRUECOL
(
ba£
.
fg
)) {

1278 
cﬁfg
.
Æpha
 = 0xffff;

1279 
cﬁfg
.
ªd
 = 
	`TRUERED
(
ba£
.
fg
);

1280 
cﬁfg
.
gªí
 = 
	`TRUEGREEN
(
ba£
.
fg
);

1281 
cﬁfg
.
blue
 = 
	`TRUEBLUE
(
ba£
.
fg
);

1282 
	`X·Cﬁ‹AŒocVÆue
(
xw
.
dpy
, xw.
vis
, xw.
cm≠
, &
cﬁfg
, &
åuefg
);

1283 
fg
 = &
åuefg
;

1285 
fg
 = &
dc
.
cﬁ
[
ba£
.fg];

1288 i‡(
	`IS_TRUECOL
(
ba£
.
bg
)) {

1289 
cﬁbg
.
Æpha
 = 0xffff;

1290 
cﬁbg
.
gªí
 = 
	`TRUEGREEN
(
ba£
.
bg
);

1291 
cﬁbg
.
ªd
 = 
	`TRUERED
(
ba£
.
bg
);

1292 
cﬁbg
.
blue
 = 
	`TRUEBLUE
(
ba£
.
bg
);

1293 
	`X·Cﬁ‹AŒocVÆue
(
xw
.
dpy
, xw.
vis
, xw.
cm≠
, &
cﬁbg
, &
åuebg
);

1294 
bg
 = &
åuebg
;

1296 
bg
 = &
dc
.
cﬁ
[
ba£
.bg];

1300 i‡((
ba£
.
mode
 & 
ATTR_BOLD_FAINT
Ë=
ATTR_BOLD
 && 
	`BETWEEN
(ba£.
fg
, 0, 7))

1301 
fg
 = &
dc
.
cﬁ
[
ba£
.fg + 8];

1303 i‡(
	`IS_SET
(
MODE_REVERSE
)) {

1304 i‡(
fg
 =&
dc
.
cﬁ
[
deÁu…fg
]) {

1305 
fg
 = &
dc
.
cﬁ
[
deÁu…bg
];

1307 
cﬁfg
.
ªd
 = ~
fg
->
cﬁ‹
.red;

1308 
cﬁfg
.
gªí
 = ~
fg
->
cﬁ‹
.green;

1309 
cﬁfg
.
blue
 = ~
fg
->
cﬁ‹
.blue;

1310 
cﬁfg
.
Æpha
 = 
fg
->
cﬁ‹
.alpha;

1311 
	`X·Cﬁ‹AŒocVÆue
(
xw
.
dpy
, xw.
vis
, xw.
cm≠
, &
cﬁfg
,

1312 &
ªvfg
);

1313 
fg
 = &
ªvfg
;

1316 i‡(
bg
 =&
dc
.
cﬁ
[
deÁu…bg
]) {

1317 
bg
 = &
dc
.
cﬁ
[
deÁu…fg
];

1319 
cﬁbg
.
ªd
 = ~
bg
->
cﬁ‹
.red;

1320 
cﬁbg
.
gªí
 = ~
bg
->
cﬁ‹
.green;

1321 
cﬁbg
.
blue
 = ~
bg
->
cﬁ‹
.blue;

1322 
cﬁbg
.
Æpha
 = 
bg
->
cﬁ‹
.alpha;

1323 
	`X·Cﬁ‹AŒocVÆue
(
xw
.
dpy
, xw.
vis
, xw.
cm≠
, &
cﬁbg
,

1324 &
ªvbg
);

1325 
bg
 = &
ªvbg
;

1329 i‡((
ba£
.
mode
 & 
ATTR_BOLD_FAINT
Ë=
ATTR_FAINT
) {

1330 
cﬁfg
.
ªd
 = 
fg
->
cﬁ‹
.red / 2;

1331 
cﬁfg
.
gªí
 = 
fg
->
cﬁ‹
.green / 2;

1332 
cﬁfg
.
blue
 = 
fg
->
cﬁ‹
.blue / 2;

1333 
cﬁfg
.
Æpha
 = 
fg
->
cﬁ‹
.alpha;

1334 
	`X·Cﬁ‹AŒocVÆue
(
xw
.
dpy
, xw.
vis
, xw.
cm≠
, &
cﬁfg
, &
ªvfg
);

1335 
fg
 = &
ªvfg
;

1338 i‡(
ba£
.
mode
 & 
ATTR_REVERSE
) {

1339 
ãmp
 = 
fg
;

1340 
fg
 = 
bg
;

1341 
bg
 = 
ãmp
;

1344 i‡(
ba£
.
mode
 & 
ATTR_BLINK
 && 
wö
.modê& 
MODE_BLINK
)

1345 
fg
 = 
bg
;

1347 i‡(
ba£
.
mode
 & 
ATTR_INVISIBLE
)

1348 
fg
 = 
bg
;

1351 i‡(
x
 == 0) {

1352 
	`x˛ór
(0, (
y
 =0)? 0 : 
wöy
, 
b‹dîpx
,

1353 
wöy
 + 
wö
.
ch
 +

1354 ((
wöy
 + 
wö
.
ch
 >
b‹dîpx
 + wö.
th
)? wö.
h
 : 0));

1356 i‡(
wöx
 + 
width
 >
b‹dîpx
 + 
wö
.
tw
) {

1357 
	`x˛ór
(
wöx
 + 
width
, (
y
 =0)? 0 : 
wöy
, 
wö
.
w
,

1358 ((
wöy
 + 
wö
.
ch
 >
b‹dîpx
 + wö.
th
)? wö.
h
 : (winy + win.ch)));

1360 i‡(
y
 == 0)

1361 
	`x˛ór
(
wöx
, 0, wöx + 
width
, 
b‹dîpx
);

1362 i‡(
wöy
 + 
wö
.
ch
 >
b‹dîpx
 + wö.
th
)

1363 
	`x˛ór
(
wöx
, 
wöy
 + 
wö
.
ch
, wöx + 
width
, wö.
h
);

1366 
	`X·DøwRe˘
(
xw
.
døw
, 
bg
, 
wöx
, 
wöy
, 
width
, 
wö
.
ch
);

1369 
r
.
x
 = 0;

1370 
r
.
y
 = 0;

1371 
r
.
height
 = 
wö
.
ch
;

1372 
r
.
width
 = width;

1373 
	`X·DøwSëClùRe˘™gÀs
(
xw
.
døw
, 
wöx
, 
wöy
, &
r
, 1);

1376 
	`X·DøwGlyphF⁄tS≥c
(
xw
.
døw
, 
fg
, 
•ecs
, 
Àn
);

1379 i‡(
ba£
.
mode
 & 
ATTR_UNDERLINE
) {

1380 
	`X·DøwRe˘
(
xw
.
døw
, 
fg
, 
wöx
, 
wöy
 + 
dc
.
f⁄t
.
as˚¡
 + 1,

1381 
width
, 1);

1384 i‡(
ba£
.
mode
 & 
ATTR_STRUCK
) {

1385 
	`X·DøwRe˘
(
xw
.
døw
, 
fg
, 
wöx
, 
wöy
 + 2 * 
dc
.
f⁄t
.
as˚¡
 / 3,

1386 
width
, 1);

1390 
	`X·DøwSëClù
(
xw
.
døw
, 0);

1391 
	}
}

1394 
	$xdøwglyph
(
Glyph
 
g
, 
x
, 
y
)

1396 
num•ecs
;

1397 
X·GlyphF⁄tS≥c
 
•ec
;

1399 
num•ecs
 = 
	`xmakeglyphf⁄t•ecs
(&
•ec
, &
g
, 1, 
x
, 
y
);

1400 
	`xdøwglyphf⁄t•ecs
(&
•ec
, 
g
, 
num•ecs
, 
x
, 
y
);

1401 
	}
}

1404 
	$xdøwcurs‹
(
cx
, 
cy
, 
Glyph
 
g
, 
ox
, 
oy
, Glyph 
og
)

1406 
Cﬁ‹
 
døwcﬁ
;

1409 i‡(
	`£À˘ed
(
ox
, 
oy
))

1410 
og
.
mode
 ^
ATTR_REVERSE
;

1411 
	`xdøwglyph
(
og
, 
ox
, 
oy
);

1413 i‡(
	`IS_SET
(
MODE_HIDE
))

1419 
g
.
mode
 &
ATTR_BOLD
|
ATTR_ITALIC
|
ATTR_UNDERLINE
|
ATTR_STRUCK
|
ATTR_WIDE
;

1421 i‡(
	`IS_SET
(
MODE_REVERSE
)) {

1422 
g
.
mode
 |
ATTR_REVERSE
;

1423 
g
.
bg
 = 
deÁu…fg
;

1424 i‡(
	`£À˘ed
(
cx
, 
cy
)) {

1425 
døwcﬁ
 = 
dc
.
cﬁ
[
deÁu…cs
];

1426 
g
.
fg
 = 
deÁu…rcs
;

1428 
døwcﬁ
 = 
dc
.
cﬁ
[
deÁu…rcs
];

1429 
g
.
fg
 = 
deÁu…cs
;

1432 i‡(
	`£À˘ed
(
cx
, 
cy
)) {

1433 
g
.
fg
 = 
deÁu…fg
;

1434 
g
.
bg
 = 
deÁu…rcs
;

1436 
g
.
fg
 = 
deÁu…bg
;

1437 
g
.
bg
 = 
deÁu…cs
;

1439 
døwcﬁ
 = 
dc
.
cﬁ
[
g
.
bg
];

1443 i‡(
	`IS_SET
(
MODE_FOCUSED
)) {

1444 
wö
.
curs‹
) {

1446 
g
.
u
 = 0x2603;

1450 
	`xdøwglyph
(
g
, 
cx
, 
cy
);

1454 
	`X·DøwRe˘
(
xw
.
døw
, &
døwcﬁ
,

1455 
b‹dîpx
 + 
cx
 * 
wö
.
cw
,

1456 
b‹dîpx
 + (
cy
 + 1Ë* 
wö
.
ch
 - \

1457 
curs‹thick√ss
,

1458 
wö
.
cw
, 
curs‹thick√ss
);

1462 
	`X·DøwRe˘
(
xw
.
døw
, &
døwcﬁ
,

1463 
b‹dîpx
 + 
cx
 * 
wö
.
cw
,

1464 
b‹dîpx
 + 
cy
 * 
wö
.
ch
,

1465 
curs‹thick√ss
, 
wö
.
ch
);

1469 
	`X·DøwRe˘
(
xw
.
døw
, &
døwcﬁ
,

1470 
b‹dîpx
 + 
cx
 * 
wö
.
cw
,

1471 
b‹dîpx
 + 
cy
 * 
wö
.
ch
,

1472 
wö
.
cw
 - 1, 1);

1473 
	`X·DøwRe˘
(
xw
.
døw
, &
døwcﬁ
,

1474 
b‹dîpx
 + 
cx
 * 
wö
.
cw
,

1475 
b‹dîpx
 + 
cy
 * 
wö
.
ch
,

1476 1, 
wö
.
ch
 - 1);

1477 
	`X·DøwRe˘
(
xw
.
døw
, &
døwcﬁ
,

1478 
b‹dîpx
 + (
cx
 + 1Ë* 
wö
.
cw
 - 1,

1479 
b‹dîpx
 + 
cy
 * 
wö
.
ch
,

1480 1, 
wö
.
ch
 - 1);

1481 
	`X·DøwRe˘
(
xw
.
døw
, &
døwcﬁ
,

1482 
b‹dîpx
 + 
cx
 * 
wö
.
cw
,

1483 
b‹dîpx
 + (
cy
 + 1Ë* 
wö
.
ch
 - 1,

1484 
wö
.
cw
, 1);

1486 
	}
}

1489 
	$x£ãnv
()

1491 
buf
[() * 8 + 1];

1493 
	`¢¥ötf
(
buf
, (buf), "%lu", 
xw
.
wö
);

1494 
	`£ãnv
("WINDOWID", 
buf
, 1);

1495 
	}
}

1498 
	$x£âôÀ
(*
p
)

1500 
XTextPr›îty
 
¥›
;

1501 
	`DEFAULT
(
p
, 
›t_tôÀ
);

1503 
	`Xutf8TextLi°ToTextPr›îty
(
xw
.
dpy
, &
p
, 1, 
XUTF8SåögStyÀ
,

1504 &
¥›
);

1505 
	`XSëWMName
(
xw
.
dpy
, xw.
wö
, &
¥›
);

1506 
	`XSëTextPr›îty
(
xw
.
dpy
, xw.
wö
, &
¥›
, xw.
√twm«me
);

1507 
	`XFªe
(
¥›
.
vÆue
);

1508 
	}
}

1511 
	$x°¨tdøw
()

1513  
	`IS_SET
(
MODE_VISIBLE
);

1514 
	}
}

1517 
	$xdøwlöe
(
Löe
 
löe
, 
x1
, 
y1
, 
x2
)

1519 
i
, 
x
, 
ox
, 
num•ecs
;

1520 
Glyph
 
ba£
, 
√w
;

1521 
X·GlyphF⁄tS≥c
 *
•ecs
 = 
xw
.
•ecbuf
;

1523 
num•ecs
 = 
	`xmakeglyphf⁄t•ecs
(
•ecs
, &
löe
[
x1
], 
x2
 - x1, x1, 
y1
);

1524 
i
 = 
ox
 = 0;

1525 
x
 = 
x1
; x < 
x2
 && 
i
 < 
num•ecs
; x++) {

1526 
√w
 = 
löe
[
x
];

1527 i‡(
√w
.
mode
 =
ATTR_WDUMMY
)

1529 i‡(
	`£À˘ed
(
x
, 
y1
))

1530 
√w
.
mode
 ^
ATTR_REVERSE
;

1531 i‡(
i
 > 0 && 
	`ATTRCMP
(
ba£
, 
√w
)) {

1532 
	`xdøwglyphf⁄t•ecs
(
•ecs
, 
ba£
, 
i
, 
ox
, 
y1
);

1533 
•ecs
 +
i
;

1534 
num•ecs
 -
i
;

1535 
i
 = 0;

1537 i‡(
i
 == 0) {

1538 
ox
 = 
x
;

1539 
ba£
 = 
√w
;

1541 
i
++;

1543 i‡(
i
 > 0)

1544 
	`xdøwglyphf⁄t•ecs
(
•ecs
, 
ba£
, 
i
, 
ox
, 
y1
);

1545 
	}
}

1548 
	$xföishdøw
()

1550 
	`XC›yAªa
(
xw
.
dpy
, xw.
buf
, xw.
wö
, 
dc
.
gc
, 0, 0, wö.
w
,

1551 
wö
.
h
, 0, 0);

1552 
	`XSëF‹eground
(
xw
.
dpy
, 
dc
.
gc
,

1553 
dc
.
cﬁ
[
	`IS_SET
(
MODE_REVERSE
)?

1554 
deÁu…fg
 : 
deÁu…bg
].
pixñ
);

1555 
	}
}

1558 
	$expo£
(
XEvít
 *
ev
)

1560 
	`ªdøw
();

1561 
	}
}

1564 
	$visibûôy
(
XEvít
 *
ev
)

1566 
XVisibûôyEvít
 *
e
 = &
ev
->
xvisibûôy
;

1568 
	`MODBIT
(
wö
.
mode
, 
e
->
°©e
 !
VisibûôyFuŒyObscuªd
, 
MODE_VISIBLE
);

1569 
	}
}

1572 
	$unm≠
(
XEvít
 *
ev
)

1574 
wö
.
mode
 &~
MODE_VISIBLE
;

1575 
	}
}

1578 
	$x£çoöãrmŸi⁄
(
£t
)

1580 
	`MODBIT
(
xw
.
©ås
.
evít_mask
, 
£t
, 
PoöãrMŸi⁄Mask
);

1581 
	`XCh™geWödowAâribuãs
(
xw
.
dpy
, xw.
wö
, 
CWEvítMask
, &xw.
©ås
);

1582 
	}
}

1585 
	$x£tmode
(
£t
, 
Êags
)

1587 
mode
 = 
wö
.mode;

1588 
	`MODBIT
(
wö
.
mode
, 
£t
, 
Êags
);

1589 i‡((
wö
.
mode
 & 
MODE_REVERSE
) != (mode & MODE_REVERSE))

1590 
	`ªdøw
();

1591 
	}
}

1594 
	$x£tcurs‹
(
curs‹
)

1596 
	`DEFAULT
(
curs‹
, 1);

1597 i‡(!
	`BETWEEN
(
curs‹
, 0, 6))

1599 
wö
.
curs‹
 = cursor;

1601 
	}
}

1604 
	$x£turgícy
(
add
)

1606 
XWMHöts
 *
h
 = 
	`XGëWMHöts
(
xw
.
dpy
, xw.
wö
);

1608 
	`MODBIT
(
h
->
Êags
, 
add
, 
XUrgícyHöt
);

1609 
	`XSëWMHöts
(
xw
.
dpy
, xw.
wö
, 
h
);

1610 
	`XFªe
(
h
);

1611 
	}
}

1614 
	$xbñl
()

1616 i‡(!(
	`IS_SET
(
MODE_FOCUSED
)))

1617 
	`x£turgícy
(1);

1618 i‡(
bñlvﬁume
)

1619 
	`XkbBñl
(
xw
.
dpy
, xw.
wö
, 
bñlvﬁume
, (
Atom
)
NULL
);

1620 
	}
}

1623 
	$focus
(
XEvít
 *
ev
)

1625 
XFocusCh™geEvít
 *
e
 = &
ev
->
xfocus
;

1627 i‡(
e
->
mode
 =
NŸifyGøb
)

1630 i‡(
ev
->
ty≥
 =
FocusIn
) {

1631 
	`XSëICFocus
(
xw
.
xic
);

1632 
wö
.
mode
 |
MODE_FOCUSED
;

1633 
	`x£turgícy
(0);

1634 i‡(
	`IS_SET
(
MODE_FOCUS
))

1635 
	`âywrôe
("\033[I", 3, 0);

1637 
	`XUn£tICFocus
(
xw
.
xic
);

1638 
wö
.
mode
 &~
MODE_FOCUSED
;

1639 i‡(
	`IS_SET
(
MODE_FOCUS
))

1640 
	`âywrôe
("\033[O", 3, 0);

1642 
	}
}

1645 
	$m©ch
(
uöt
 
mask
, uöà
°©e
)

1647  
mask
 =
XK_ANY_MOD
 || mask =(
°©e
 & ~
ign‹emod
);

1648 
	}
}

1651 
	$km≠
(
KeySym
 
k
, 
uöt
 
°©e
)

1653 
Key
 *
kp
;

1654 
i
;

1657 
i
 = 0; i < 
	`LEN
(
m≠≥dkeys
); i++) {

1658 i‡(
m≠≥dkeys
[
i
] =
k
)

1661 i‡(
i
 =
	`LEN
(
m≠≥dkeys
)) {

1662 i‡((
k
 & 0xFFFF) < 0xFD00)

1663  
NULL
;

1666 
kp
 = 
key
; k∞< key + 
	`LEN
(key); kp++) {

1667 i‡(
kp
->
k
 != k)

1670 i‡(!
	`m©ch
(
kp
->
mask
, 
°©e
))

1673 i‡(
	`IS_SET
(
MODE_APPKEYPAD
Ë? 
kp
->
≠pkey
 < 0 : kp->appkey > 0)

1675 i‡(
	`IS_SET
(
MODE_NUMLOCK
Ë&& 
kp
->
≠pkey
 == 2)

1678 i‡(
	`IS_SET
(
MODE_APPCURSOR
Ë? 
kp
->
≠pcurs‹
 < 0 : kp->appcursor > 0)

1681  
kp
->
s
;

1684  
NULL
;

1685 
	}
}

1688 
	$k¥ess
(
XEvít
 *
ev
)

1690 
XKeyEvít
 *
e
 = &
ev
->
xkey
;

1691 
KeySym
 
ksym
;

1692 
buf
[32], *
cu°omkey
;

1693 
Àn
;

1694 
Ru√
 
c
;

1695 
Sètus
 
°©us
;

1696 
Sh‹tcut
 *
bp
;

1698 i‡(
	`IS_SET
(
MODE_KBDLOCK
))

1701 
Àn
 = 
	`XmbLookupSåög
(
xw
.
xic
, 
e
, 
buf
,  buf, &
ksym
, &
°©us
);

1703 
bp
 = 
sh‹tcuts
; b∞< sh‹tcut†+ 
	`LEN
(shortcuts); bp++) {

1704 i‡(
ksym
 =
bp
->
keysym
 && 
	`m©ch
(bp->
mod
, 
e
->
°©e
)) {

1705 
bp
->
	`func
(&(bp->
¨g
));

1711 i‡((
cu°omkey
 = 
	`km≠
(
ksym
, 
e
->
°©e
))) {

1712 
	`âywrôe
(
cu°omkey
, 
	`°æí
(customkey), 1);

1717 i‡(
Àn
 == 0)

1719 i‡(
Àn
 =1 && 
e
->
°©e
 & 
Mod1Mask
) {

1720 i‡(
	`IS_SET
(
MODE_8BIT
)) {

1721 i‡(*
buf
 < 0177) {

1722 
c
 = *
buf
 | 0x80;

1723 
Àn
 = 
	`utf8ícode
(
c
, 
buf
);

1726 
buf
[1] = buf[0];

1727 
buf
[0] = '\033';

1728 
Àn
 = 2;

1731 
	`âywrôe
(
buf
, 
Àn
, 1);

1732 
	}
}

1736 
	$cmesßge
(
XEvít
 *
e
)

1742 i‡(
e
->
x˛õ¡
.
mesßge_ty≥
 =
xw
.
xembed
 &&É->x˛õ¡.
f‹m©
 == 32) {

1743 i‡(
e
->
x˛õ¡
.
d©a
.
l
[1] =
XEMBED_FOCUS_IN
) {

1744 
wö
.
mode
 |
MODE_FOCUSED
;

1745 
	`x£turgícy
(0);

1746 } i‡(
e
->
x˛õ¡
.
d©a
.
l
[1] =
XEMBED_FOCUS_OUT
) {

1747 
wö
.
mode
 &~
MODE_FOCUSED
;

1749 } i‡(
e
->
x˛õ¡
.
d©a
.
l
[0] =
xw
.
wmdñëewö
) {

1750 
	`âyh™gup
();

1751 
	`exô
(0);

1753 
	}
}

1756 
	$ªsize
(
XEvít
 *
e
)

1758 i‡(
e
->
xc⁄figuª
.
width
 =
wö
.
w
 &&É->xc⁄figuª.
height
 =wö.
h
)

1761 
	`¸esize
(
e
->
xc⁄figuª
.
width
,É->xc⁄figuª.
height
);

1762 
	}
}

1765 
	$run
()

1767 
XEvít
 
ev
;

1768 
w
 = 
wö
.w, 
h
 = win.h;

1769 
fd_£t
 
rfd
;

1770 
xfd
 = 
	`XC⁄√˘i⁄Numbî
(
xw
.
dpy
), 
xev
, 
blök£t
 = 0, 
dodøw
 = 0;

1771 
âyfd
;

1772 
time•ec
 
døwtimeout
, *
tv
 = 
NULL
, 
now
, 
œ°
, 
œ°blök
;

1773 
dñètime
;

1777 
	`XNextEvít
(
xw
.
dpy
, &
ev
);

1783 i‡(
	`XFûãrEvít
(&
ev
, 
N⁄e
))

1785 i‡(
ev
.
ty≥
 =
C⁄figuªNŸify
) {

1786 
w
 = 
ev
.
xc⁄figuª
.
width
;

1787 
h
 = 
ev
.
xc⁄figuª
.
height
;

1789 } 
ev
.
ty≥
 !
M≠NŸify
);

1791 
âyfd
 = 
	`ây√w
(
›t_löe
, 
shñl
, 
›t_io
, 
›t_cmd
);

1792 
	`¸esize
(
w
, 
h
);

1794 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
œ°
);

1795 
œ°blök
 = 
œ°
;

1797 
xev
 = 
a˘i⁄Âs
;;) {

1798 
	`FD_ZERO
(&
rfd
);

1799 
	`FD_SET
(
âyfd
, &
rfd
);

1800 
	`FD_SET
(
xfd
, &
rfd
);

1802 i‡(
	`p£À˘
(
	`MAX
(
xfd
, 
âyfd
)+1, &
rfd
, 
NULL
, NULL, 
tv
, NULL) < 0) {

1803 i‡(
î∫o
 =
EINTR
)

1805 
	`dõ
("£À˘ faûed: %s\n", 
	`°ªº‹
(
î∫o
));

1807 i‡(
	`FD_ISSET
(
âyfd
, &
rfd
)) {

1808 
	`âyªad
();

1809 i‡(
blöktimeout
) {

1810 
blök£t
 = 
	`èâr£t
(
ATTR_BLINK
);

1811 i‡(!
blök£t
)

1812 
	`MODBIT
(
wö
.
mode
, 0, 
MODE_BLINK
);

1816 i‡(
	`FD_ISSET
(
xfd
, &
rfd
))

1817 
xev
 = 
a˘i⁄Âs
;

1819 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
now
);

1820 
døwtimeout
.
tv_£c
 = 0;

1821 
døwtimeout
.
tv_n£c
 = (1000 * 1E6)/ 
xÂs
;

1822 
tv
 = &
døwtimeout
;

1824 
dodøw
 = 0;

1825 i‡(
blöktimeout
 && 
	`TIMEDIFF
(
now
, 
œ°blök
) > blinktimeout) {

1826 
	`t£tdúèâr
(
ATTR_BLINK
);

1827 
wö
.
mode
 ^
MODE_BLINK
;

1828 
œ°blök
 = 
now
;

1829 
dodøw
 = 1;

1831 
dñètime
 = 
	`TIMEDIFF
(
now
, 
œ°
);

1832 i‡(
dñètime
 > 1000 / (
xev
 ? 
xÂs
 : 
a˘i⁄Âs
)) {

1833 
dodøw
 = 1;

1834 
œ°
 = 
now
;

1837 i‡(
dodøw
) {

1838 
	`XPídög
(
xw
.
dpy
)) {

1839 
	`XNextEvít
(
xw
.
dpy
, &
ev
);

1840 i‡(
	`XFûãrEvít
(&
ev
, 
N⁄e
))

1842 i‡(
h™dÀr
[
ev
.
ty≥
])

1843 (
h™dÀr
[
ev
.
ty≥
])(&ev);

1846 
	`døw
();

1847 
	`XFlush
(
xw
.
dpy
);

1849 i‡(
xev
 && !
	`FD_ISSET
(
xfd
, &
rfd
))

1850 
xev
--;

1851 i‡(!
	`FD_ISSET
(
âyfd
, &
rfd
Ë&& !FD_ISSET(
xfd
, &rfd)) {

1852 i‡(
blök£t
) {

1853 i‡(
	`TIMEDIFF
(
now
, 
œ°blök
) \

1854 > 
blöktimeout
) {

1855 
døwtimeout
.
tv_n£c
 = 1000;

1857 
døwtimeout
.
tv_n£c
 = (1E6 * \

1858 (
blöktimeout
 - \

1859 
	`TIMEDIFF
(
now
,

1860 
œ°blök
)));

1862 
døwtimeout
.
tv_£c
 = \

1863 
døwtimeout
.
tv_n£c
 / 1E9;

1864 
døwtimeout
.
tv_n£c
 %= ()1E9;

1866 
tv
 = 
NULL
;

1871 
	}
}

1874 
	$ußge
()

1876 
	`dõ
("usage: %s [-aiv] [-c class] [-f font] [-g geometry]"

1883 " [°ty_¨g†...]\n", 
¨gv0
,árgv0);

1884 
	}
}

1887 
	$maö
(
¨gc
, *
¨gv
[])

1889 
xw
.
l
 = xw.
t
 = 0;

1890 
xw
.
isfixed
 = 
FÆ£
;

1891 
wö
.
curs‹
 = 
curs‹sh≠e
;

1893 
ARGBEGIN
 {

1895 
ÆlowÆts¸ìn
 = 0;

1898 
›t_˛ass
 = 
	`EARGF
(
	`ußge
());

1901 i‡(
¨gc
 > 0)

1902 --
¨gc
, ++
¨gv
;

1903 
run
;

1905 
›t_f⁄t
 = 
	`EARGF
(
	`ußge
());

1908 
xw
.
gm
 = 
	`XP¨£Geomëry
(
	`EARGF
(
	`ußge
()),

1909 &
xw
.
l
, &xw.
t
, &
cﬁs
, &
rows
);

1912 
xw
.
isfixed
 = 1;

1915 
›t_io
 = 
	`EARGF
(
	`ußge
());

1918 
›t_löe
 = 
	`EARGF
(
	`ußge
());

1921 
›t_«me
 = 
	`EARGF
(
	`ußge
());

1925 
›t_tôÀ
 = 
	`EARGF
(
	`ußge
());

1928 
›t_embed
 = 
	`EARGF
(
	`ußge
());

1931 
	`dõ
("%†" 
VERSION
 "\n", 
¨gv0
);

1934 
	`ußge
();

1935 } 
ARGEND
;

1937 
run
:

1938 i‡(
¨gc
 > 0)

1939 
›t_cmd
 = 
¨gv
;

1941 i‡(!
›t_tôÀ
)

1942 
›t_tôÀ
 = (
›t_löe
 || !
›t_cmd
) ? "st" : opt_cmd[0];

1944 
	`£éoˇÀ
(
LC_CTYPE
, "");

1945 
	`XSëLoˇÀModifõrs
("");

1946 
cﬁs
 = 
	`MAX
(cols, 1);

1947 
rows
 = 
	`MAX
(rows, 1);

1948 
	`äew
(
cﬁs
, 
rows
);

1949 
	`xöô
(
cﬁs
, 
rows
);

1950 
	`x£ãnv
();

1951 
	`£löô
();

1952 
	`run
();

1955 
	}
}

	@/home/alexlai/.cache/wal/colors-wal-st.h

1 c⁄° *
	gcﬁ‹«me
[] = {

31 
	gdeÁu…bg
 = 0;

32 
	gdeÁu…fg
 = 257;

33 
	gdeÁu…cs
 = 258;

34 
	gdeÁu…rcs
= 258;

	@/usr/include/X11/XKBlib.h

27 #i‚de‡
_X11_XKBLIB_H_


28 
	#_X11_XKBLIB_H_


	)

30 
	~<X11/Xlib.h
>

31 
	~<X11/exãnsi⁄s/XKB°r.h
>

33 
	s_XkbAnyEvít
 {

34 
	mty≥
;

35 
	m£rül
;

36 
Boﬁ
 
	m£nd_evít
;

37 
Di•œy
 * 
	mdi•œy
;

38 
Time
 
	mtime
;

39 
	mxkb_ty≥
;

40 
	mdevi˚
;

41 } 
	tXkbAnyEvít
;

43 
	s_XkbNewKeybﬂrdNŸify
 {

44 
	mty≥
;

45 
	m£rül
;

46 
Boﬁ
 
	m£nd_evít
;

47 
Di•œy
 * 
	mdi•œy
;

48 
Time
 
	mtime
;

49 
	mxkb_ty≥
;

50 
	mdevi˚
;

51 
	mﬁd_devi˚
;

52 
	mmö_key_code
;

53 
	mmax_key_code
;

54 
	mﬁd_mö_key_code
;

55 
	mﬁd_max_key_code
;

56 
	mch™ged
;

57 
	mªq_maj‹
;

58 
	mªq_mö‹
;

59 } 
	tXkbNewKeybﬂrdNŸifyEvít
;

61 
	s_XkbM≠NŸifyEvít
 {

62 
	mty≥
;

63 
	m£rül
;

64 
Boﬁ
 
	m£nd_evít
;

65 
Di•œy
 * 
	mdi•œy
;

66 
Time
 
	mtime
;

67 
	mxkb_ty≥
;

68 
	mdevi˚
;

69 
	mch™ged
;

70 
	mÊags
;

71 
	mfú°_ty≥
;

72 
	mnum_ty≥s
;

73 
KeyCode
 
	mmö_key_code
;

74 
KeyCode
 
	mmax_key_code
;

75 
KeyCode
 
	mfú°_key_sym
;

76 
KeyCode
 
	mfú°_key_a˘
;

77 
KeyCode
 
	mfú°_key_behavi‹
;

78 
KeyCode
 
	mfú°_key_ex∂icô
;

79 
KeyCode
 
	mfú°_modm≠_key
;

80 
KeyCode
 
	mfú°_vmodm≠_key
;

81 
	mnum_key_syms
;

82 
	mnum_key_a˘s
;

83 
	mnum_key_behavi‹s
;

84 
	mnum_key_ex∂icô
;

85 
	mnum_modm≠_keys
;

86 
	mnum_vmodm≠_keys
;

87 
	mvmods
;

88 } 
	tXkbM≠NŸifyEvít
;

90 
	s_XkbSèãNŸifyEvít
 {

91 
	mty≥
;

92 
	m£rül
;

93 
Boﬁ
 
	m£nd_evít
;

94 
Di•œy
 * 
	mdi•œy
;

95 
Time
 
	mtime
;

96 
	mxkb_ty≥
;

97 
	mdevi˚
;

98 
	mch™ged
;

99 
	mgroup
;

100 
	mba£_group
;

101 
	mœtched_group
;

102 
	mlocked_group
;

103 
	mmods
;

104 
	mba£_mods
;

105 
	mœtched_mods
;

106 
	mlocked_mods
;

107 
	mcom∑t_°©e
;

108 
	mgøb_mods
;

109 
	mcom∑t_gøb_mods
;

110 
	mlookup_mods
;

111 
	mcom∑t_lookup_mods
;

112 
	m±r_buâ⁄s
;

113 
KeyCode
 
	mkeycode
;

114 
	mevít_ty≥
;

115 
	mªq_maj‹
;

116 
	mªq_mö‹
;

117 } 
	tXkbSèãNŸifyEvít
;

119 
	s_XkbC⁄åﬁsNŸify
 {

120 
	mty≥
;

121 
	m£rül
;

122 
Boﬁ
 
	m£nd_evít
;

123 
Di•œy
 * 
	mdi•œy
;

124 
Time
 
	mtime
;

125 
	mxkb_ty≥
;

126 
	mdevi˚
;

127 
	mch™ged_˘æs
;

128 
	míabÀd_˘æs
;

129 
	míabÀd_˘æ_ch™ges
;

130 
	mnum_groups
;

131 
KeyCode
 
	mkeycode
;

132 
	mevít_ty≥
;

133 
	mªq_maj‹
;

134 
	mªq_mö‹
;

135 } 
	tXkbC⁄åﬁsNŸifyEvít
;

137 
	s_XkbIndiˇt‹NŸify
 {

138 
	mty≥
;

139 
	m£rül
;

140 
Boﬁ
 
	m£nd_evít
;

141 
Di•œy
 * 
	mdi•œy
;

142 
Time
 
	mtime
;

143 
	mxkb_ty≥
;

144 
	mdevi˚
;

145 
	mch™ged
;

146 
	m°©e
;

147 } 
	tXkbIndiˇt‹NŸifyEvít
;

149 
	s_XkbNamesNŸify
 {

150 
	mty≥
;

151 
	m£rül
;

152 
Boﬁ
 
	m£nd_evít
;

153 
Di•œy
 * 
	mdi•œy
;

154 
Time
 
	mtime
;

155 
	mxkb_ty≥
;

156 
	mdevi˚
;

157 
	mch™ged
;

158 
	mfú°_ty≥
;

159 
	mnum_ty≥s
;

160 
	mfú°_lvl
;

161 
	mnum_lvls
;

162 
	mnum_Æü£s
;

163 
	mnum_ødio_groups
;

164 
	mch™ged_vmods
;

165 
	mch™ged_groups
;

166 
	mch™ged_ödiˇt‹s
;

167 
	mfú°_key
;

168 
	mnum_keys
;

169 } 
	tXkbNamesNŸifyEvít
;

171 
	s_XkbCom∑tM≠NŸify
 {

172 
	mty≥
;

173 
	m£rül
;

174 
Boﬁ
 
	m£nd_evít
;

175 
Di•œy
 * 
	mdi•œy
;

176 
Time
 
	mtime
;

177 
	mxkb_ty≥
;

178 
	mdevi˚
;

179 
	mch™ged_groups
;

180 
	mfú°_si
;

181 
	mnum_si
;

182 
	mnum_tŸÆ_si
;

183 } 
	tXkbCom∑tM≠NŸifyEvít
;

185 
	s_XkbBñlNŸify
 {

186 
	mty≥
;

187 
	m£rül
;

188 
Boﬁ
 
	m£nd_evít
;

189 
Di•œy
 * 
	mdi•œy
;

190 
Time
 
	mtime
;

191 
	mxkb_ty≥
;

192 
	mdevi˚
;

193 
	m≥r˚¡
;

194 
	mpôch
;

195 
	mduøti⁄
;

196 
	mbñl_˛ass
;

197 
	mbñl_id
;

198 
Atom
 
	m«me
;

199 
Wödow
 
	mwödow
;

200 
Boﬁ
 
	mevít_⁄ly
;

201 } 
	tXkbBñlNŸifyEvít
;

203 
	s_XkbA˘i⁄Mesßge
 {

204 
	mty≥
;

205 
	m£rül
;

206 
Boﬁ
 
	m£nd_evít
;

207 
Di•œy
 * 
	mdi•œy
;

208 
Time
 
	mtime
;

209 
	mxkb_ty≥
;

210 
	mdevi˚
;

211 
KeyCode
 
	mkeycode
;

212 
Boﬁ
 
	m¥ess
;

213 
Boﬁ
 
	mkey_evít_fﬁlows
;

214 
	mgroup
;

215 
	mmods
;

216 
	mmesßge
[
XkbA˘i⁄MesßgeLígth
+1];

218 } 
	tXkbA˘i⁄MesßgeEvít
;

220 
	s_XkbAc˚ssXNŸify
 {

221 
	mty≥
;

222 
	m£rül
;

223 
Boﬁ
 
	m£nd_evít
;

224 
Di•œy
 * 
	mdi•œy
;

225 
Time
 
	mtime
;

226 
	mxkb_ty≥
;

227 
	mdevi˚
;

228 
	mdëaû
;

229 
	mkeycode
;

230 
	msk_dñay
;

231 
	mdeboun˚_dñay
;

232 } 
	tXkbAc˚ssXNŸifyEvít
;

234 
	s_XkbExãnsi⁄Devi˚NŸify
 {

235 
	mty≥
;

236 
	m£rül
;

237 
Boﬁ
 
	m£nd_evít
;

238 
Di•œy
 * 
	mdi•œy
;

239 
Time
 
	mtime
;

240 
	mxkb_ty≥
;

241 
	mdevi˚
;

242 
	mªas⁄
;

243 
	msuµ‹ãd
;

244 
	munsuµ‹ãd
;

246 
	mfú°_bä
;

247 
	mnum_bäs
;

248 
	mÀds_deföed
;

249 
	mÀd_°©e
;

250 
	mÀd_˛ass
;

251 
	mÀd_id
;

252 } 
	tXkbExãnsi⁄Devi˚NŸifyEvít
;

254 
	u_XkbEvít
 {

255 
	mty≥
;

256 
XkbAnyEvít
 
	m™y
;

257 
XkbNewKeybﬂrdNŸifyEvít
 
	m√w_kbd
;

258 
XkbM≠NŸifyEvít
 
	mm≠
;

259 
XkbSèãNŸifyEvít
 
	m°©e
;

260 
XkbC⁄åﬁsNŸifyEvít
 
	m˘æs
;

261 
XkbIndiˇt‹NŸifyEvít
 
	mödiˇt‹s
;

262 
XkbNamesNŸifyEvít
 
	m«mes
;

263 
XkbCom∑tM≠NŸifyEvít
 
	mcom∑t
;

264 
XkbBñlNŸifyEvít
 
	mbñl
;

265 
XkbA˘i⁄MesßgeEvít
 
	mmesßge
;

266 
XkbAc˚ssXNŸifyEvít
 
	mac˚ssx
;

267 
XkbExãnsi⁄Devi˚NŸifyEvít
 
	mdevi˚
;

268 
XEvít
 
	mc‹e
;

269 } 
	tXkbEvít
;

271 
_XkbKbdDpySèã
 
	tXkbKbdDpySèãRec
,*
	tXkbKbdDpySèãPå
;

274 
	#XkbOD_Suc˚ss
 0

	)

275 
	#XkbOD_BadLibøryVîsi⁄
 1

	)

276 
	#XkbOD_C⁄√˘i⁄Refu£d
 2

	)

277 
	#XkbOD_N⁄XkbSîvî
 3

	)

278 
	#XkbOD_BadSîvîVîsi⁄
 4

	)

281 
	#XkbLC_F‹˚L©ö1Lookup
 (1<<0)

	)

282 
	#XkbLC_C⁄sumeLookupMods
 (1<<1)

	)

283 
	#XkbLC_AlwaysC⁄sumeShi·AndLock
 (1<<2)

	)

284 
	#XkbLC_Ign‹eNewKeybﬂrds
 (1<<3)

	)

285 
	#XkbLC_C⁄åﬁFÆlback
 (1<<4)

	)

286 
	#XkbLC_C⁄sumeKeysOnCompo£Faû
 (1<<29)

	)

287 
	#XkbLC_Compo£LED
 (1<<30)

	)

288 
	#XkbLC_BìpOnCompo£Faû
 (1<<31)

	)

290 
	#XkbLC_AŒCompo£C⁄åﬁs
 (0xc0000000)

	)

291 
	#XkbLC_AŒC⁄åﬁs
 (0xc000001f)

	)

293 
_XFUNCPROTOBEGIN


295 
Boﬁ
 
XkbIgn‹eExãnsi⁄
(

296 
Boﬁ


299 
Di•œy
 *
XkbO≥nDi•œy
(

308 
Boﬁ
 
XkbQuîyExãnsi⁄
(

309 
Di•œy
 * ,

317 
Boﬁ
 
XkbU£Exãnsi⁄
(

318 
Di•œy
 * ,

323 
Boﬁ
 
XkbLibøryVîsi⁄
(

328 
XkbSëXlibC⁄åﬁs
(

329 
Di•œy
* ,

334 
XkbGëXlibC⁄åﬁs
(

335 
Di•œy
*

338 
XkbXlibC⁄åﬁsIm∂emíãd
();

340 
	$Atom
 (*
	tXkbI¡înAtomFunc
)(

341 
	tDi•œy
 * ,

342 
	t_Xc⁄°
 * ,

343 
	tBoﬁ


346 * (*
	tXkbGëAtomNameFunc
)(

347 
	tDi•œy
 * ,

348 
	tAtom


351 
	`XkbSëAtomFuncs
(

352 
XkbI¡înAtomFunc
 ,

353 
XkbGëAtomNameFunc


356 
KeySym
 
	`XkbKeycodeToKeysym
(

357 
Di•œy
 * ,

358 #i‡
NìdWidePrŸŸy≥s


361 
KeyCode
 ,

367 
	`XkbKeysymToModifõrs
(

368 
Di•œy
 * ,

369 
KeySym


372 
Boﬁ
 
	`XkbLookupKeySym
(

373 
Di•œy
 * ,

374 
KeyCode
 ,

377 
KeySym
 *

380 
	`XkbLookupKeyBödög
(

381 
Di•œy
 * ,

382 
KeySym
 ,

389 
Boﬁ
 
	`XkbTøn¶©eKeyCode
(

390 
XkbDescPå
 ,

391 
KeyCode
 ,

394 
KeySym
 *

397 
	`XkbTøn¶©eKeySym
(

398 
Di•œy
 * ,

399 
KeySym
 * ,

406 
Boﬁ
 
	`XkbSëAutoRïótR©e
(

407 
Di•œy
 * ,

413 
Boﬁ
 
	`XkbGëAutoRïótR©e
(

414 
Di•œy
 * ,

420 
Boﬁ
 
	`XkbCh™geE«bÀdC⁄åﬁs
(

421 
Di•œy
 * ,

427 
Boﬁ
 
	`XkbDevi˚Bñl
(

428 
Di•œy
 * ,

429 
Wödow
 ,

434 
Atom


437 
Boﬁ
 
	`XkbF‹˚Devi˚Bñl
(

438 
Di•œy
 * ,

445 
Boﬁ
 
	`XkbDevi˚BñlEvít
(

446 
Di•œy
 * ,

447 
Wödow
 ,

452 
Atom


455 
Boﬁ
 
	`XkbBñl
(

456 
Di•œy
 * ,

457 
Wödow
 ,

459 
Atom


462 
Boﬁ
 
	`XkbF‹˚Bñl
(

463 
Di•œy
 * ,

467 
Boﬁ
 
	`XkbBñlEvít
(

468 
Di•œy
 * ,

469 
Wödow
 ,

471 
Atom


474 
Boﬁ
 
	`XkbSñe˘Evíts
(

475 
Di•œy
 * ,

481 
Boﬁ
 
	`XkbSñe˘EvítDëaûs
(

482 
Di•œy
 * ,

489 
	`XkbNŸeM≠Ch™ges
(

490 
XkbM≠Ch™gesPå
 ,

491 
XkbM≠NŸifyEvít
 * ,

495 
	`XkbNŸeNameCh™ges
(

496 
XkbNameCh™gesPå
 ,

497 
XkbNamesNŸifyEvít
 * ,

501 
Sètus
 
	`XkbGëIndiˇt‹Sèã
(

502 
Di•œy
 * ,

507 
Sètus
 
	`XkbGëDevi˚Indiˇt‹Sèã
(

508 
Di•œy
 * ,

515 
Sètus
 
	`XkbGëIndiˇt‹M≠
(

516 
Di•œy
 * ,

518 
XkbDescPå


521 
Boﬁ
 
	`XkbSëIndiˇt‹M≠
(

522 
Di•œy
 * ,

524 
XkbDescPå


527 
	#XkbNŸeIndiˇt‹M≠Ch™ges
(
o
,
n
,
w
) \

528 ((
o
)->
m≠_ch™ges
|=((
n
)->m≠_ch™ges&(
w
)))

	)

529 
	#XkbNŸeIndiˇt‹SèãCh™ges
(
o
,
n
,
w
)\

530 ((
o
)->
°©e_ch™ges
|=((
n
)->°©e_ch™ges&(
w
)))

	)

531 
	#XkbGëIndiˇt‹M≠Ch™ges
(
d
,
x
,
c
) \

532 (
	`XkbGëIndiˇt‹M≠
((
d
),(
c
)->
m≠_ch™ges
,
x
))

	)

533 
	#XkbCh™geIndiˇt‹M≠s
(
d
,
x
,
c
) \

534 (
	`XkbSëIndiˇt‹M≠
((
d
),(
c
)->
m≠_ch™ges
,
x
))

	)

536 
Boﬁ
 
	`XkbGëNamedIndiˇt‹
(

537 
Di•œy
 * ,

538 
Atom
 ,

540 
Boﬁ
 * ,

541 
XkbIndiˇt‹M≠På
 ,

542 
Boﬁ
 *

545 
Boﬁ
 
	`XkbGëNamedDevi˚Indiˇt‹
(

546 
Di•œy
 * ,

550 
Atom
 ,

552 
Boﬁ
 * ,

553 
XkbIndiˇt‹M≠På
 ,

554 
Boﬁ
 *

557 
Boﬁ
 
	`XkbSëNamedIndiˇt‹
(

558 
Di•œy
 * ,

559 
Atom
 ,

560 
Boﬁ
 ,

561 
Boﬁ
 ,

562 
Boﬁ
 ,

563 
XkbIndiˇt‹M≠På


566 
Boﬁ
 
	`XkbSëNamedDevi˚Indiˇt‹
(

567 
Di•œy
 * ,

571 
Atom
 ,

572 
Boﬁ
 ,

573 
Boﬁ
 ,

574 
Boﬁ
 ,

575 
XkbIndiˇt‹M≠På


578 
Boﬁ
 
	`XkbLockModifõrs
(

579 
Di•œy
 * ,

585 
Boﬁ
 
	`XkbL©chModifõrs
(

586 
Di•œy
 * ,

592 
Boﬁ
 
	`XkbLockGroup
(

593 
Di•œy
 * ,

598 
Boﬁ
 
	`XkbL©chGroup
(

599 
Di•œy
 * ,

604 
Boﬁ
 
	`XkbSëSîvîI¡î«lMods
(

605 
Di•œy
 * ,

613 
Boﬁ
 
	`XkbSëIgn‹eLockMods
(

614 
Di•œy
 * ,

623 
Boﬁ
 
	`XkbVútuÆModsToRól
(

624 
XkbDescPå
 ,

629 
Boﬁ
 
	`XkbCompuãEf„˘iveM≠
(

630 
XkbDescPå
 ,

631 
XkbKeyTy≥På
 ,

635 
Sètus
 
	`XkbInôC™⁄iˇlKeyTy≥s
(

636 
XkbDescPå
 ,

641 
XkbDescPå
 
	`XkbAŒocKeybﬂrd
(

645 
	`XkbFªeKeybﬂrd
(

646 
XkbDescPå
 ,

648 
Boﬁ


651 
Sètus
 
	`XkbAŒocClõ¡M≠
(

652 
XkbDescPå
 ,

657 
Sètus
 
	`XkbAŒocSîvîM≠
(

658 
XkbDescPå
 ,

663 
	`XkbFªeClõ¡M≠
(

664 
XkbDescPå
 ,

666 
Boﬁ


669 
	`XkbFªeSîvîM≠
(

670 
XkbDescPå
 ,

672 
Boﬁ


675 
XkbKeyTy≥På
 
	`XkbAddKeyTy≥
(

676 
XkbDescPå
 ,

677 
Atom
 ,

679 
Boﬁ
 ,

683 
Sètus
 
	`XkbAŒocIndiˇt‹M≠s
(

684 
XkbDescPå


687 
	`XkbFªeIndiˇt‹M≠s
(

688 
XkbDescPå


691 
XkbDescPå
 
	`XkbGëM≠
(

692 
Di•œy
 * ,

697 
Sètus
 
	`XkbGëUpd©edM≠
(

698 
Di•œy
 * ,

700 
XkbDescPå


703 
Sètus
 
	`XkbGëM≠Ch™ges
(

704 
Di•œy
 * ,

705 
XkbDescPå
 ,

706 
XkbM≠Ch™gesPå


710 
Sètus
 
	`XkbRe‰eshKeybﬂrdM≠pög
(

711 
XkbM≠NŸifyEvít
 *

714 
Sètus
 
	`XkbGëKeyTy≥s
(

715 
Di•œy
 * ,

718 
XkbDescPå


721 
Sètus
 
	`XkbGëKeySyms
(

722 
Di•œy
 * ,

725 
XkbDescPå


728 
Sètus
 
	`XkbGëKeyA˘i⁄s
(

729 
Di•œy
 * ,

732 
XkbDescPå


735 
Sètus
 
	`XkbGëKeyBehavi‹s
(

736 
Di•œy
 * ,

739 
XkbDescPå


742 
Sètus
 
	`XkbGëVútuÆMods
(

743 
Di•œy
 * ,

745 
XkbDescPå


748 
Sètus
 
	`XkbGëKeyEx∂icôComp⁄íts
(

749 
Di•œy
 * ,

752 
XkbDescPå


755 
Sètus
 
	`XkbGëKeyModifõrM≠
(

756 
Di•œy
 * ,

759 
XkbDescPå


762 
Sètus
 
	`XkbGëKeyVútuÆModM≠
(

763 
Di•œy
 * ,

766 
XkbDescPå


769 
Sètus
 
	`XkbAŒocC⁄åﬁs
(

770 
XkbDescPå
 ,

774 
	`XkbFªeC⁄åﬁs
(

775 
XkbDescPå
 ,

777 
Boﬁ


780 
Sètus
 
	`XkbGëC⁄åﬁs
(

781 
Di•œy
 * ,

783 
XkbDescPå


786 
Boﬁ
 
	`XkbSëC⁄åﬁs
(

787 
Di•œy
 * ,

789 
XkbDescPå


792 
	`XkbNŸeC⁄åﬁsCh™ges
(

793 
XkbC⁄åﬁsCh™gesPå
 ,

794 
XkbC⁄åﬁsNŸifyEvít
 * ,

798 
	#XkbGëC⁄åﬁsCh™ges
(
d
,
x
,
c
Ë
	`XkbGëC⁄åﬁs
(d,(c)->
ch™ged_˘æs
,x)

	)

799 
	#XkbCh™geC⁄åﬁs
(
d
,
x
,
c
Ë
	`XkbSëC⁄åﬁs
(d,(c)->
ch™ged_˘æs
,x)

	)

801 
Sètus
 
	`XkbAŒocCom∑tM≠
(

802 
XkbDescPå
 ,

807 
	`XkbFªeCom∑tM≠
(

808 
XkbDescPå
 ,

810 
Boﬁ


813 
Sètus
 
	`XkbGëCom∑tM≠
(

814 
Di•œy
 * ,

816 
XkbDescPå


819 
Boﬁ
 
	`XkbSëCom∑tM≠
(

820 
Di•œy
 * ,

822 
XkbDescPå
 ,

823 
Boﬁ


826 
XkbSymI¡î¥ëPå
 
	`XkbAddSymI¡î¥ë
(

827 
XkbDescPå
 ,

828 
XkbSymI¡î¥ëPå
 ,

829 
Boﬁ
 ,

830 
XkbCh™gesPå


833 
Sètus
 
	`XkbAŒocNames
(

834 
XkbDescPå
 ,

840 
Sètus
 
	`XkbGëNames
(

841 
Di•œy
 * ,

843 
XkbDescPå


846 
Boﬁ
 
	`XkbSëNames
(

847 
Di•œy
 * ,

851 
XkbDescPå


854 
Boﬁ
 
	`XkbCh™geNames
(

855 
Di•œy
 * ,

856 
XkbDescPå
 ,

857 
XkbNameCh™gesPå


860 
	`XkbFªeNames
(

861 
XkbDescPå
 ,

863 
Boﬁ


867 
Sètus
 
	`XkbGëSèã
(

868 
Di•œy
 * ,

870 
XkbSèãPå


873 
Boﬁ
 
	`XkbSëM≠
(

874 
Di•œy
 * ,

876 
XkbDescPå


879 
Boﬁ
 
	`XkbCh™geM≠
(

880 
Di•œy
* ,

881 
XkbDescPå
 ,

882 
XkbM≠Ch™gesPå


885 
Boﬁ
 
	`XkbSëDëe˘abÀAutoRïót
(

886 
Di•œy
 * ,

887 
Boﬁ
 ,

888 
Boﬁ
 *

891 
Boﬁ
 
	`XkbGëDëe˘abÀAutoRïót
(

892 
Di•œy
 * ,

893 
Boﬁ
 *

896 
Boﬁ
 
	`XkbSëAutoRe£tC⁄åﬁs
(

897 
Di•œy
 * ,

903 
Boﬁ
 
	`XkbGëAutoRe£tC⁄åﬁs
(

904 
Di•œy
 * ,

909 
Boﬁ
 
	`XkbSëPîClõ¡C⁄åﬁs
(

910 
Di•œy
 * ,

915 
Boﬁ
 
	`XkbGëPîClõ¡C⁄åﬁs
(

916 
Di•œy
 * ,

920 
Sètus
 
	`XkbC›yKeyTy≥
(

921 
XkbKeyTy≥På
 ,

922 
XkbKeyTy≥På


925 
Sètus
 
	`XkbC›yKeyTy≥s
(

926 
XkbKeyTy≥På
 ,

927 
XkbKeyTy≥På
 ,

931 
Sètus
 
	`XkbResizeKeyTy≥
(

932 
XkbDescPå
 ,

935 
Boﬁ
 ,

939 
KeySym
 *
	`XkbResizeKeySyms
(

940 
XkbDescPå
 ,

945 
XkbA˘i⁄
 *
	`XkbResizeKeyA˘i⁄s
(

946 
XkbDescPå
 ,

951 
Sètus
 
	`XkbCh™geTy≥sOfKey
(

952 
XkbDescPå
 ,

957 
XkbM≠Ch™gesPå


960 
Sètus
 
	`XkbCh™geKeycodeR™ge
(

961 
XkbDescPå
 ,

964 
XkbCh™gesPå


969 
XkbComp⁄ítLi°På
 
	`XkbLi°Comp⁄íts
(

970 
Di•œy
 * ,

972 
XkbComp⁄ítNamesPå
 ,

976 
	`XkbFªeComp⁄ítLi°
(

977 
XkbComp⁄ítLi°På


980 
XkbDescPå
 
	`XkbGëKeybﬂrd
(

981 
Di•œy
 * ,

986 
XkbDescPå
 
	`XkbGëKeybﬂrdByName
(

987 
Di•œy
 * ,

989 
XkbComp⁄ítNamesPå
 ,

992 
Boﬁ


997 
	`XkbKeyTy≥sF‹C‹eSymbﬁs
(

998 
XkbDescPå
 ,

1000 
KeySym
 * ,

1003 
KeySym
 *

1006 
Boﬁ
 
	`XkbAµlyCom∑tM≠ToKey
(

1007 
XkbDescPå
 ,

1008 
KeyCode
 ,

1009 
XkbCh™gesPå


1012 
Boﬁ
 
	`XkbUpd©eM≠FromC‹e
(

1013 
XkbDescPå
 ,

1014 
KeyCode
 ,

1017 
KeySym
 * ,

1018 
XkbCh™gesPå


1023 
XkbDevi˚LedInfoPå
 
	`XkbAddDevi˚LedInfo
(

1024 
XkbDevi˚InfoPå
 ,

1029 
Sètus
 
	`XkbResizeDevi˚Buâ⁄A˘i⁄s
(

1030 
XkbDevi˚InfoPå
 ,

1034 
XkbDevi˚InfoPå
 
	`XkbAŒocDevi˚Info
(

1040 
	`XkbFªeDevi˚Info
(

1041 
XkbDevi˚InfoPå
 ,

1043 
Boﬁ


1046 
	`XkbNŸeDevi˚Ch™ges
(

1047 
XkbDevi˚Ch™gesPå
 ,

1048 
XkbExãnsi⁄Devi˚NŸifyEvít
 * ,

1052 
XkbDevi˚InfoPå
 
	`XkbGëDevi˚Info
(

1053 
Di•œy
 * ,

1060 
Sètus
 
	`XkbGëDevi˚InfoCh™ges
(

1061 
Di•œy
 * ,

1062 
XkbDevi˚InfoPå
 ,

1063 
XkbDevi˚Ch™gesPå


1066 
Sètus
 
	`XkbGëDevi˚Buâ⁄A˘i⁄s
(

1067 
Di•œy
 * ,

1068 
XkbDevi˚InfoPå
 ,

1069 
Boﬁ
 ,

1074 
Sètus
 
	`XkbGëDevi˚LedInfo
(

1075 
Di•œy
 * ,

1076 
XkbDevi˚InfoPå
 ,

1082 
Boﬁ
 
	`XkbSëDevi˚Info
(

1083 
Di•œy
 * ,

1085 
XkbDevi˚InfoPå


1088 
Boﬁ
 
	`XkbCh™geDevi˚Info
(

1089 
Di•œy
* ,

1090 
XkbDevi˚InfoPå
 ,

1091 
XkbDevi˚Ch™gesPå


1094 
Boﬁ
 
	`XkbSëDevi˚LedInfo
(

1095 
Di•œy
 * ,

1096 
XkbDevi˚InfoPå
 ,

1102 
Boﬁ
 
	`XkbSëDevi˚Buâ⁄A˘i⁄s
(

1103 
Di•œy
 * ,

1104 
XkbDevi˚InfoPå
 ,

1111 
	`XkbToC⁄åﬁ
(

1117 
Boﬁ
 
	`XkbSëDebuggögFœgs
(

1118 
Di•œy
 * ,

1128 
Boﬁ
 
	`XkbAµlyVútuÆModCh™ges
(

1129 
XkbDescPå
 ,

1131 
XkbCh™gesPå


1134 
Boﬁ
 
	`XkbUpd©eA˘i⁄VútuÆMods
(

1135 
XkbDescPå
 ,

1136 
XkbA˘i⁄
 * ,

1140 
	`XkbUpd©eKeyTy≥VútuÆMods
(

1141 
XkbDescPå
 ,

1142 
XkbKeyTy≥På
 ,

1144 
XkbCh™gesPå


1147 
_XFUNCPROTOEND


	@/usr/include/X11/Xatom.h

1 #i‚de‡
XATOM_H


2 
	#XATOM_H
 1

	)

9 
	#XA_PRIMARY
 ((
Atom
Ë1)

	)

10 
	#XA_SECONDARY
 ((
Atom
Ë2)

	)

11 
	#XA_ARC
 ((
Atom
Ë3)

	)

12 
	#XA_ATOM
 ((
Atom
Ë4)

	)

13 
	#XA_BITMAP
 ((
Atom
Ë5)

	)

14 
	#XA_CARDINAL
 ((
Atom
Ë6)

	)

15 
	#XA_COLORMAP
 ((
Atom
Ë7)

	)

16 
	#XA_CURSOR
 ((
Atom
Ë8)

	)

17 
	#XA_CUT_BUFFER0
 ((
Atom
Ë9)

	)

18 
	#XA_CUT_BUFFER1
 ((
Atom
Ë10)

	)

19 
	#XA_CUT_BUFFER2
 ((
Atom
Ë11)

	)

20 
	#XA_CUT_BUFFER3
 ((
Atom
Ë12)

	)

21 
	#XA_CUT_BUFFER4
 ((
Atom
Ë13)

	)

22 
	#XA_CUT_BUFFER5
 ((
Atom
Ë14)

	)

23 
	#XA_CUT_BUFFER6
 ((
Atom
Ë15)

	)

24 
	#XA_CUT_BUFFER7
 ((
Atom
Ë16)

	)

25 
	#XA_DRAWABLE
 ((
Atom
Ë17)

	)

26 
	#XA_FONT
 ((
Atom
Ë18)

	)

27 
	#XA_INTEGER
 ((
Atom
Ë19)

	)

28 
	#XA_PIXMAP
 ((
Atom
Ë20)

	)

29 
	#XA_POINT
 ((
Atom
Ë21)

	)

30 
	#XA_RECTANGLE
 ((
Atom
Ë22)

	)

31 
	#XA_RESOURCE_MANAGER
 ((
Atom
Ë23)

	)

32 
	#XA_RGB_COLOR_MAP
 ((
Atom
Ë24)

	)

33 
	#XA_RGB_BEST_MAP
 ((
Atom
Ë25)

	)

34 
	#XA_RGB_BLUE_MAP
 ((
Atom
Ë26)

	)

35 
	#XA_RGB_DEFAULT_MAP
 ((
Atom
Ë27)

	)

36 
	#XA_RGB_GRAY_MAP
 ((
Atom
Ë28)

	)

37 
	#XA_RGB_GREEN_MAP
 ((
Atom
Ë29)

	)

38 
	#XA_RGB_RED_MAP
 ((
Atom
Ë30)

	)

39 
	#XA_STRING
 ((
Atom
Ë31)

	)

40 
	#XA_VISUALID
 ((
Atom
Ë32)

	)

41 
	#XA_WINDOW
 ((
Atom
Ë33)

	)

42 
	#XA_WM_COMMAND
 ((
Atom
Ë34)

	)

43 
	#XA_WM_HINTS
 ((
Atom
Ë35)

	)

44 
	#XA_WM_CLIENT_MACHINE
 ((
Atom
Ë36)

	)

45 
	#XA_WM_ICON_NAME
 ((
Atom
Ë37)

	)

46 
	#XA_WM_ICON_SIZE
 ((
Atom
Ë38)

	)

47 
	#XA_WM_NAME
 ((
Atom
Ë39)

	)

48 
	#XA_WM_NORMAL_HINTS
 ((
Atom
Ë40)

	)

49 
	#XA_WM_SIZE_HINTS
 ((
Atom
Ë41)

	)

50 
	#XA_WM_ZOOM_HINTS
 ((
Atom
Ë42)

	)

51 
	#XA_MIN_SPACE
 ((
Atom
Ë43)

	)

52 
	#XA_NORM_SPACE
 ((
Atom
Ë44)

	)

53 
	#XA_MAX_SPACE
 ((
Atom
Ë45)

	)

54 
	#XA_END_SPACE
 ((
Atom
Ë46)

	)

55 
	#XA_SUPERSCRIPT_X
 ((
Atom
Ë47)

	)

56 
	#XA_SUPERSCRIPT_Y
 ((
Atom
Ë48)

	)

57 
	#XA_SUBSCRIPT_X
 ((
Atom
Ë49)

	)

58 
	#XA_SUBSCRIPT_Y
 ((
Atom
Ë50)

	)

59 
	#XA_UNDERLINE_POSITION
 ((
Atom
Ë51)

	)

60 
	#XA_UNDERLINE_THICKNESS
 ((
Atom
Ë52)

	)

61 
	#XA_STRIKEOUT_ASCENT
 ((
Atom
Ë53)

	)

62 
	#XA_STRIKEOUT_DESCENT
 ((
Atom
Ë54)

	)

63 
	#XA_ITALIC_ANGLE
 ((
Atom
Ë55)

	)

64 
	#XA_X_HEIGHT
 ((
Atom
Ë56)

	)

65 
	#XA_QUAD_WIDTH
 ((
Atom
Ë57)

	)

66 
	#XA_WEIGHT
 ((
Atom
Ë58)

	)

67 
	#XA_POINT_SIZE
 ((
Atom
Ë59)

	)

68 
	#XA_RESOLUTION
 ((
Atom
Ë60)

	)

69 
	#XA_COPYRIGHT
 ((
Atom
Ë61)

	)

70 
	#XA_NOTICE
 ((
Atom
Ë62)

	)

71 
	#XA_FONT_NAME
 ((
Atom
Ë63)

	)

72 
	#XA_FAMILY_NAME
 ((
Atom
Ë64)

	)

73 
	#XA_FULL_NAME
 ((
Atom
Ë65)

	)

74 
	#XA_CAP_HEIGHT
 ((
Atom
Ë66)

	)

75 
	#XA_WM_CLASS
 ((
Atom
Ë67)

	)

76 
	#XA_WM_TRANSIENT_FOR
 ((
Atom
Ë68)

	)

78 
	#XA_LAST_PREDEFINED
 ((
Atom
Ë68)

	)

	@/usr/include/X11/Xft/Xft.h

24 #i‚de‡
_XFT_H_


25 
	#_XFT_H_


	)

31 
	#XFT_MAJOR
 2

	)

32 
	#XFT_MINOR
 3

	)

33 
	#XFT_REVISION
 2

	)

35 
	#XFT_VERSION
 ((
XFT_MAJOR
 * 10000Ë+ (
XFT_MINOR
 * 100Ë+ (
XFT_REVISION
))

	)

36 
	#X·Vîsi⁄
 
XFT_VERSION


	)

38 
	~<°d¨g.h
>

39 
	~<·2buûd.h
>

40 #ö˛udê
FT_FREETYPE_H


41 
	~<f⁄tc⁄fig/f⁄tc⁄fig.h
>

42 
	~<X11/exãnsi⁄s/Xªndî.h
>

44 
	~<X11/Xfun˝rŸo.h
>

46 #i‚de‡
_X_SENTINEL


47 
	#_X_SENTINEL
(
x
)

	)

50 #i‚de‡
_XFT_NO_COMPAT_


51 
	~<X11/X·/X·Com∑t.h
>

54 
	#XFT_CORE
 "c‹e"

	)

55 
	#XFT_RENDER
 "ªndî"

	)

56 
	#XFT_XLFD
 "xlfd"

	)

57 
	#XFT_MAX_GLYPH_MEMORY
 "maxglyphmem‹y"

	)

58 
	#XFT_MAX_UNREF_FONTS
 "maxuƒeff⁄ts"

	)

60 
FT_Libøry
 
_X·FTlibøry
;

62 
_X·F⁄tInfo
 
	tX·F⁄tInfo
;

64 
	s_X·F⁄t
 {

65 
	mas˚¡
;

66 
	mdes˚¡
;

67 
	mheight
;

68 
	mmax_adv™˚_width
;

69 
FcCh¨Së
 *
	mch¨£t
;

70 
FcP©ã∫
 *
	m∑âîn
;

71 } 
	tX·F⁄t
;

73 
_X·Døw
 
	tX·Døw
;

75 
	s_X·Cﬁ‹
 {

76 
	mpixñ
;

77 
XRídîCﬁ‹
 
	mcﬁ‹
;

78 } 
	tX·Cﬁ‹
;

80 
	s_X·Ch¨S≥c
 {

81 
FcCh¨32
 
	mucs4
;

82 
	mx
;

83 
	my
;

84 } 
	tX·Ch¨S≥c
;

86 
	s_X·Ch¨F⁄tS≥c
 {

87 
X·F⁄t
 *
	mf⁄t
;

88 
FcCh¨32
 
	mucs4
;

89 
	mx
;

90 
	my
;

91 } 
	tX·Ch¨F⁄tS≥c
;

93 
	s_X·GlyphS≥c
 {

94 
FT_UI¡
 
	mglyph
;

95 
	mx
;

96 
	my
;

97 } 
	tX·GlyphS≥c
;

99 
	s_X·GlyphF⁄tS≥c
 {

100 
X·F⁄t
 *
	mf⁄t
;

101 
FT_UI¡
 
	mglyph
;

102 
	mx
;

103 
	my
;

104 } 
	tX·GlyphF⁄tS≥c
;

106 
_XFUNCPROTOBEGIN


110 
Boﬁ


111 
X·Cﬁ‹AŒocName
 (
Di•œy
 *
dpy
,

112 
_Xc⁄°
 
VisuÆ
 *
visuÆ
,

113 
Cﬁ‹m≠
 
cm≠
,

114 
_Xc⁄°
 *
«me
,

115 
X·Cﬁ‹
 *
ªsu…
);

117 
Boﬁ


118 
X·Cﬁ‹AŒocVÆue
 (
Di•œy
 *
dpy
,

119 
VisuÆ
 *
visuÆ
,

120 
Cﬁ‹m≠
 
cm≠
,

121 
_Xc⁄°
 
XRídîCﬁ‹
 *
cﬁ‹
,

122 
X·Cﬁ‹
 *
ªsu…
);

125 
X·Cﬁ‹Fªe
 (
Di•œy
 *
dpy
,

126 
VisuÆ
 *
visuÆ
,

127 
Cﬁ‹m≠
 
cm≠
,

128 
X·Cﬁ‹
 *
cﬁ‹
);

131 
Boﬁ


132 
X·DeÁu…HasRídî
 (
Di•œy
 *
dpy
);

134 
Boﬁ


135 
X·DeÁu…Së
 (
Di•œy
 *
dpy
, 
FcP©ã∫
 *
deÁu…s
);

138 
X·DeÁu…Sub°ôuã
 (
Di•œy
 *
dpy
, 
s¸ìn
, 
FcP©ã∫
 *
∑âîn
);

142 
X·Døw
 *

143 
X·DøwCª©e
 (
Di•œy
 *
dpy
,

144 
DøwabÀ
 
døwabÀ
,

145 
VisuÆ
 *
visuÆ
,

146 
Cﬁ‹m≠
 
cﬁ‹m≠
);

148 
X·Døw
 *

149 
X·DøwCª©eBôm≠
 (
Di•œy
 *
dpy
,

150 
Pixm≠
 
bôm≠
);

152 
X·Døw
 *

153 
X·DøwCª©eAÕha
 (
Di•œy
 *
dpy
,

154 
Pixm≠
 
pixm≠
,

155 
dïth
);

158 
X·DøwCh™ge
 (
X·Døw
 *
døw
,

159 
DøwabÀ
 
døwabÀ
);

161 
Di•œy
 *

162 
X·DøwDi•œy
 (
X·Døw
 *
døw
);

164 
DøwabÀ


165 
X·DøwDøwabÀ
 (
X·Døw
 *
døw
);

167 
Cﬁ‹m≠


168 
X·DøwCﬁ‹m≠
 (
X·Døw
 *
døw
);

170 
VisuÆ
 *

171 
X·DøwVisuÆ
 (
X·Døw
 *
døw
);

174 
X·DøwDe°roy
 (
X·Døw
 *
døw
);

176 
Pi˘uª


177 
X·DøwPi˘uª
 (
X·Døw
 *
døw
);

179 
Pi˘uª


180 
X·DøwSrcPi˘uª
 (
X·Døw
 *
døw
, 
_Xc⁄°
 
X·Cﬁ‹
 *
cﬁ‹
);

183 
X·DøwGlyphs
 (
X·Døw
 *
døw
,

184 
_Xc⁄°
 
X·Cﬁ‹
 *
cﬁ‹
,

185 
X·F⁄t
 *
pub
,

186 
x
,

187 
y
,

188 
_Xc⁄°
 
FT_UI¡
 *
glyphs
,

189 
nglyphs
);

192 
X·DøwSåög8
 (
X·Døw
 *
døw
,

193 
_Xc⁄°
 
X·Cﬁ‹
 *
cﬁ‹
,

194 
X·F⁄t
 *
pub
,

195 
x
,

196 
y
,

197 
_Xc⁄°
 
FcCh¨8
 *
°rög
,

198 
Àn
);

201 
X·DøwSåög16
 (
X·Døw
 *
døw
,

202 
_Xc⁄°
 
X·Cﬁ‹
 *
cﬁ‹
,

203 
X·F⁄t
 *
pub
,

204 
x
,

205 
y
,

206 
_Xc⁄°
 
FcCh¨16
 *
°rög
,

207 
Àn
);

210 
X·DøwSåög32
 (
X·Døw
 *
døw
,

211 
_Xc⁄°
 
X·Cﬁ‹
 *
cﬁ‹
,

212 
X·F⁄t
 *
pub
,

213 
x
,

214 
y
,

215 
_Xc⁄°
 
FcCh¨32
 *
°rög
,

216 
Àn
);

219 
X·DøwSåögUtf8
 (
X·Døw
 *
døw
,

220 
_Xc⁄°
 
X·Cﬁ‹
 *
cﬁ‹
,

221 
X·F⁄t
 *
pub
,

222 
x
,

223 
y
,

224 
_Xc⁄°
 
FcCh¨8
 *
°rög
,

225 
Àn
);

228 
X·DøwSåögUtf16
 (
X·Døw
 *
døw
,

229 
_Xc⁄°
 
X·Cﬁ‹
 *
cﬁ‹
,

230 
X·F⁄t
 *
pub
,

231 
x
,

232 
y
,

233 
_Xc⁄°
 
FcCh¨8
 *
°rög
,

234 
FcEndün
 
ídün
,

235 
Àn
);

238 
X·DøwCh¨S≥c
 (
X·Døw
 *
døw
,

239 
_Xc⁄°
 
X·Cﬁ‹
 *
cﬁ‹
,

240 
X·F⁄t
 *
pub
,

241 
_Xc⁄°
 
X·Ch¨S≥c
 *
ch¨s
,

242 
Àn
);

245 
X·DøwCh¨F⁄tS≥c
 (
X·Døw
 *
døw
,

246 
_Xc⁄°
 
X·Cﬁ‹
 *
cﬁ‹
,

247 
_Xc⁄°
 
X·Ch¨F⁄tS≥c
 *
ch¨s
,

248 
Àn
);

251 
X·DøwGlyphS≥c
 (
X·Døw
 *
døw
,

252 
_Xc⁄°
 
X·Cﬁ‹
 *
cﬁ‹
,

253 
X·F⁄t
 *
pub
,

254 
_Xc⁄°
 
X·GlyphS≥c
 *
glyphs
,

255 
Àn
);

258 
X·DøwGlyphF⁄tS≥c
 (
X·Døw
 *
døw
,

259 
_Xc⁄°
 
X·Cﬁ‹
 *
cﬁ‹
,

260 
_Xc⁄°
 
X·GlyphF⁄tS≥c
 *
glyphs
,

261 
Àn
);

264 
X·DøwRe˘
 (
X·Døw
 *
døw
,

265 
_Xc⁄°
 
X·Cﬁ‹
 *
cﬁ‹
,

266 
x
,

267 
y
,

268 
width
,

269 
height
);

272 
Boﬁ


273 
X·DøwSëClù
 (
X·Døw
 *
døw
,

274 
Regi⁄
 
r
);

277 
Boﬁ


278 
X·DøwSëClùRe˘™gÀs
 (
X·Døw
 *
døw
,

279 
xOrigö
,

280 
yOrigö
,

281 
_Xc⁄°
 
XRe˘™gÀ
 *
ª˘s
,

282 
n
);

285 
X·DøwSëSubwödowMode
 (
X·Døw
 *
døw
,

286 
mode
);

291 
X·GlyphExã¡s
 (
Di•œy
 *
dpy
,

292 
X·F⁄t
 *
pub
,

293 
_Xc⁄°
 
FT_UI¡
 *
glyphs
,

294 
nglyphs
,

295 
XGlyphInfo
 *
exã¡s
);

298 
X·TextExã¡s8
 (
Di•œy
 *
dpy
,

299 
X·F⁄t
 *
pub
,

300 
_Xc⁄°
 
FcCh¨8
 *
°rög
,

301 
Àn
,

302 
XGlyphInfo
 *
exã¡s
);

305 
X·TextExã¡s16
 (
Di•œy
 *
dpy
,

306 
X·F⁄t
 *
pub
,

307 
_Xc⁄°
 
FcCh¨16
 *
°rög
,

308 
Àn
,

309 
XGlyphInfo
 *
exã¡s
);

312 
X·TextExã¡s32
 (
Di•œy
 *
dpy
,

313 
X·F⁄t
 *
pub
,

314 
_Xc⁄°
 
FcCh¨32
 *
°rög
,

315 
Àn
,

316 
XGlyphInfo
 *
exã¡s
);

319 
X·TextExã¡sUtf8
 (
Di•œy
 *
dpy
,

320 
X·F⁄t
 *
pub
,

321 
_Xc⁄°
 
FcCh¨8
 *
°rög
,

322 
Àn
,

323 
XGlyphInfo
 *
exã¡s
);

326 
X·TextExã¡sUtf16
 (
Di•œy
 *
dpy
,

327 
X·F⁄t
 *
pub
,

328 
_Xc⁄°
 
FcCh¨8
 *
°rög
,

329 
FcEndün
 
ídün
,

330 
Àn
,

331 
XGlyphInfo
 *
exã¡s
);

334 
FcP©ã∫
 *

335 
X·F⁄tM©ch
 (
Di•œy
 *
dpy
,

336 
s¸ìn
,

337 
_Xc⁄°
 
FcP©ã∫
 *
∑âîn
,

338 
FcResu…
 *
ªsu…
);

340 
X·F⁄t
 *

341 
	$X·F⁄tO≥n
 (
Di•œy
 *
dpy
, 
s¸ìn
, ...Ë
	`_X_SENTINEL
(0);

343 
X·F⁄t
 *

344 
	`X·F⁄tO≥nName
 (
Di•œy
 *
dpy
, 
s¸ìn
, 
_Xc⁄°
 *
«me
);

346 
X·F⁄t
 *

347 
	`X·F⁄tO≥nXlfd
 (
Di•œy
 *
dpy
, 
s¸ìn
, 
_Xc⁄°
 *
xlfd
);

351 
FT_Fa˚


352 
	`X·LockFa˚
 (
X·F⁄t
 *
pub
);

355 
	`X·U∆ockFa˚
 (
X·F⁄t
 *
pub
);

357 
X·F⁄tInfo
 *

358 
	`X·F⁄tInfoCª©e
 (
Di•œy
 *
dpy
, 
_Xc⁄°
 
FcP©ã∫
 *
∑âîn
);

361 
	`X·F⁄tInfoDe°roy
 (
Di•œy
 *
dpy
, 
X·F⁄tInfo
 *
fi
);

363 
FcCh¨32


364 
	`X·F⁄tInfoHash
 (
_Xc⁄°
 
X·F⁄tInfo
 *
fi
);

366 
FcBoﬁ


367 
	`X·F⁄tInfoEquÆ
 (
_Xc⁄°
 
X·F⁄tInfo
 *
a
, _Xc⁄° X·F⁄tInfÿ*
b
);

369 
X·F⁄t
 *

370 
	`X·F⁄tO≥nInfo
 (
Di•œy
 *
dpy
,

371 
FcP©ã∫
 *
∑âîn
,

372 
X·F⁄tInfo
 *
fi
);

374 
X·F⁄t
 *

375 
	`X·F⁄tO≥nP©ã∫
 (
Di•œy
 *
dpy
, 
FcP©ã∫
 *
∑âîn
);

377 
X·F⁄t
 *

378 
	`X·F⁄tC›y
 (
Di•œy
 *
dpy
, 
X·F⁄t
 *
pub
);

381 
	`X·F⁄tClo£
 (
Di•œy
 *
dpy
, 
X·F⁄t
 *
pub
);

383 
FcBoﬁ


384 
	`X·InôFtLibøry
();

388 
	`X·F⁄tLﬂdGlyphs
 (
Di•œy
 *
dpy
,

389 
X·F⁄t
 *
pub
,

390 
FcBoﬁ
 
√ed_bôm≠s
,

391 
_Xc⁄°
 
FT_UI¡
 *
glyphs
,

392 
nglyph
);

395 
	`X·F⁄tU∆ﬂdGlyphs
 (
Di•œy
 *
dpy
,

396 
X·F⁄t
 *
pub
,

397 
_Xc⁄°
 
FT_UI¡
 *
glyphs
,

398 
nglyph
);

400 
	#XFT_NMISSING
 256

	)

402 
FcBoﬁ


403 
	`X·F⁄tCheckGlyph
 (
Di•œy
 *
dpy
,

404 
X·F⁄t
 *
pub
,

405 
FcBoﬁ
 
√ed_bôm≠s
,

406 
FT_UI¡
 
glyph
,

407 
FT_UI¡
 *
missög
,

408 *
nmissög
);

410 
FcBoﬁ


411 
	`X·Ch¨Exi°s
 (
Di•œy
 *
dpy
,

412 
X·F⁄t
 *
pub
,

413 
FcCh¨32
 
ucs4
);

415 
FT_UI¡


416 
	`X·Ch¨Index
 (
Di•œy
 *
dpy
,

417 
X·F⁄t
 *
pub
,

418 
FcCh¨32
 
ucs4
);

421 
FcBoﬁ


422 
	`X·Inô
 (
_Xc⁄°
 *
c⁄fig
);

425 
	`X·GëVîsi⁄
 ();

429 
FcF⁄tSë
 *

430 
	$X·Li°F⁄ts
 (
Di•œy
 *
dpy
,

431 
s¸ìn
,

432 ...Ë
	`_X_SENTINEL
(0);

435 
FcP©ã∫


436 *
	`X·NameP¨£
 (
_Xc⁄°
 *
«me
);

440 
	`X·GlyphRídî
 (
Di•œy
 *
dpy
,

441 
›
,

442 
Pi˘uª
 
§c
,

443 
X·F⁄t
 *
pub
,

444 
Pi˘uª
 
d°
,

445 
§cx
,

446 
§cy
,

447 
x
,

448 
y
,

449 
_Xc⁄°
 
FT_UI¡
 *
glyphs
,

450 
nglyphs
);

453 
	`X·GlyphS≥cRídî
 (
Di•œy
 *
dpy
,

454 
›
,

455 
Pi˘uª
 
§c
,

456 
X·F⁄t
 *
pub
,

457 
Pi˘uª
 
d°
,

458 
§cx
,

459 
§cy
,

460 
_Xc⁄°
 
X·GlyphS≥c
 *
glyphs
,

461 
nglyphs
);

464 
	`X·Ch¨S≥cRídî
 (
Di•œy
 *
dpy
,

465 
›
,

466 
Pi˘uª
 
§c
,

467 
X·F⁄t
 *
pub
,

468 
Pi˘uª
 
d°
,

469 
§cx
,

470 
§cy
,

471 
_Xc⁄°
 
X·Ch¨S≥c
 *
ch¨s
,

472 
Àn
);

475 
	`X·GlyphF⁄tS≥cRídî
 (
Di•œy
 *
dpy
,

476 
›
,

477 
Pi˘uª
 
§c
,

478 
Pi˘uª
 
d°
,

479 
§cx
,

480 
§cy
,

481 
_Xc⁄°
 
X·GlyphF⁄tS≥c
 *
glyphs
,

482 
nglyphs
);

485 
	`X·Ch¨F⁄tS≥cRídî
 (
Di•œy
 *
dpy
,

486 
›
,

487 
Pi˘uª
 
§c
,

488 
Pi˘uª
 
d°
,

489 
§cx
,

490 
§cy
,

491 
_Xc⁄°
 
X·Ch¨F⁄tS≥c
 *
ch¨s
,

492 
Àn
);

495 
	`X·TextRídî8
 (
Di•œy
 *
dpy
,

496 
›
,

497 
Pi˘uª
 
§c
,

498 
X·F⁄t
 *
pub
,

499 
Pi˘uª
 
d°
,

500 
§cx
,

501 
§cy
,

502 
x
,

503 
y
,

504 
_Xc⁄°
 
FcCh¨8
 *
°rög
,

505 
Àn
);

508 
	`X·TextRídî16
 (
Di•œy
 *
dpy
,

509 
›
,

510 
Pi˘uª
 
§c
,

511 
X·F⁄t
 *
pub
,

512 
Pi˘uª
 
d°
,

513 
§cx
,

514 
§cy
,

515 
x
,

516 
y
,

517 
_Xc⁄°
 
FcCh¨16
 *
°rög
,

518 
Àn
);

521 
	`X·TextRídî16BE
 (
Di•œy
 *
dpy
,

522 
›
,

523 
Pi˘uª
 
§c
,

524 
X·F⁄t
 *
pub
,

525 
Pi˘uª
 
d°
,

526 
§cx
,

527 
§cy
,

528 
x
,

529 
y
,

530 
_Xc⁄°
 
FcCh¨8
 *
°rög
,

531 
Àn
);

534 
	`X·TextRídî16LE
 (
Di•œy
 *
dpy
,

535 
›
,

536 
Pi˘uª
 
§c
,

537 
X·F⁄t
 *
pub
,

538 
Pi˘uª
 
d°
,

539 
§cx
,

540 
§cy
,

541 
x
,

542 
y
,

543 
_Xc⁄°
 
FcCh¨8
 *
°rög
,

544 
Àn
);

547 
	`X·TextRídî32
 (
Di•œy
 *
dpy
,

548 
›
,

549 
Pi˘uª
 
§c
,

550 
X·F⁄t
 *
pub
,

551 
Pi˘uª
 
d°
,

552 
§cx
,

553 
§cy
,

554 
x
,

555 
y
,

556 
_Xc⁄°
 
FcCh¨32
 *
°rög
,

557 
Àn
);

560 
	`X·TextRídî32BE
 (
Di•œy
 *
dpy
,

561 
›
,

562 
Pi˘uª
 
§c
,

563 
X·F⁄t
 *
pub
,

564 
Pi˘uª
 
d°
,

565 
§cx
,

566 
§cy
,

567 
x
,

568 
y
,

569 
_Xc⁄°
 
FcCh¨8
 *
°rög
,

570 
Àn
);

573 
	`X·TextRídî32LE
 (
Di•œy
 *
dpy
,

574 
›
,

575 
Pi˘uª
 
§c
,

576 
X·F⁄t
 *
pub
,

577 
Pi˘uª
 
d°
,

578 
§cx
,

579 
§cy
,

580 
x
,

581 
y
,

582 
_Xc⁄°
 
FcCh¨8
 *
°rög
,

583 
Àn
);

586 
	`X·TextRídîUtf8
 (
Di•œy
 *
dpy
,

587 
›
,

588 
Pi˘uª
 
§c
,

589 
X·F⁄t
 *
pub
,

590 
Pi˘uª
 
d°
,

591 
§cx
,

592 
§cy
,

593 
x
,

594 
y
,

595 
_Xc⁄°
 
FcCh¨8
 *
°rög
,

596 
Àn
);

599 
	`X·TextRídîUtf16
 (
Di•œy
 *
dpy
,

600 
›
,

601 
Pi˘uª
 
§c
,

602 
X·F⁄t
 *
pub
,

603 
Pi˘uª
 
d°
,

604 
§cx
,

605 
§cy
,

606 
x
,

607 
y
,

608 
_Xc⁄°
 
FcCh¨8
 *
°rög
,

609 
FcEndün
 
ídün
,

610 
Àn
);

613 
FcP©ã∫
 *

614 
	`X·XlfdP¨£
 (
_Xc⁄°
 *
xlfd_‹ig
, 
Boﬁ
 
ign‹e_sˇœbÀ
, Boﬁ 
com∂ëe
);

616 
_XFUNCPROTOEND


	@/usr/include/X11/Xlib.h

33 #i‚de‡
_X11_XLIB_H_


34 
	#_X11_XLIB_H_


	)

36 
	#XlibS≥cifiˇti⁄Rñó£
 6

	)

38 
	~<sys/ty≥s.h
>

40 #i‡
deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

41 
	~<°döt.h
>

44 
	~<X11/X.h
>

47 
	~<X11/Xfun˝rŸo.h
>

48 
	~<X11/Xosdefs.h
>

50 #i‚de‡
X_WCHAR


51 
	~<°ddef.h
>

53 #ifde‡
__UNIXOS2__


54 
	~<°dlib.h
>

57 
	twch¨_t
;

63 
_XmbÀn
(

64 *
°r
,

65 
Àn


70 
	#X_HAVE_UTF8_STRING
 1

	)

75 #ifde‡
__˛™g__


76 #¥agm®
˛™g
 
dügno°ic
 
push


77 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

80 *
	tXPoöãr
;

82 
	#Boﬁ
 

	)

83 
	#Sètus
 

	)

84 
	#True
 1

	)

85 
	#FÆ£
 0

	)

87 
	#QueuedAÃódy
 0

	)

88 
	#QueuedA·îRódög
 1

	)

89 
	#QueuedA·îFlush
 2

	)

91 
	#C⁄√˘i⁄Numbî
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
fd
)

	)

92 
	#RoŸWödow
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ
)

	)

93 
	#DeÁu…S¸ìn
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
deÁu…_s¸ìn
)

	)

94 
	#DeÁu…RoŸWödow
(
dpy
Ë(
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))->
roŸ
)

	)

95 
	#DeÁu…VisuÆ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_visuÆ
)

	)

96 
	#DeÁu…GC
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
deÁu…_gc
)

	)

97 
	#BœckPixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
bœck_pixñ
)

	)

98 
	#WhôePixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
whôe_pixñ
)

	)

99 
	#AŒPœ√s
 (()~0L)

	)

100 
	#QLígth
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
qÀn
)

	)

101 
	#Di•œyWidth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
width
)

	)

102 
	#Di•œyHeight
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
height
)

	)

103 
	#Di•œyWidthMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mwidth
)

	)

104 
	#Di•œyHeightMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mheight
)

	)

105 
	#Di•œyPœ√s
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

106 
	#Di•œyCñls
(
dpy
, 
s¸
Ë(
	`DeÁu…VisuÆ
(dpy,s¸)->
m≠_íåõs
)

	)

107 
	#S¸ìnCou¡
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
ns¸ìns
)

	)

108 
	#SîvîVíd‹
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
víd‹
)

	)

109 
	#PrŸocﬁVîsi⁄
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
¥Ÿo_maj‹_vîsi⁄
)

	)

110 
	#PrŸocﬁRevisi⁄
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
¥Ÿo_mö‹_vîsi⁄
)

	)

111 
	#Víd‹Rñó£
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
ªÀa£
)

	)

112 
	#Di•œySåög
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
di•œy_«me
)

	)

113 
	#DeÁu…Dïth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

114 
	#DeÁu…Cﬁ‹m≠
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
cm≠
)

	)

115 
	#Bôm≠Unô
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
bôm≠_unô
)

	)

116 
	#Bôm≠BôOrdî
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
bôm≠_bô_‹dî
)

	)

117 
	#Bôm≠Pad
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
bôm≠_∑d
)

	)

118 
	#ImageByãOrdî
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
byã_‹dî
)

	)

119 
	#NextReque°
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
ªque°
 + 1)

	)

120 
	#La°KnownReque°Pro˚s£d
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
œ°_ªque°_ªad
)

	)

123 
	#S¸ìnOfDi•œy
(
dpy
, 
s¸
)(&((
_XPrivDi•œy
)(dpy))->
s¸ìns
[s¸])

	)

124 
	#DeÁu…S¸ìnOfDi•œy
(
dpy
Ë
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))

	)

125 
	#Di•œyOfS¸ìn
(
s
Ë((s)->
di•œy
)

	)

126 
	#RoŸWödowOfS¸ìn
(
s
Ë((s)->
roŸ
)

	)

127 
	#BœckPixñOfS¸ìn
(
s
Ë((s)->
bœck_pixñ
)

	)

128 
	#WhôePixñOfS¸ìn
(
s
Ë((s)->
whôe_pixñ
)

	)

129 
	#DeÁu…Cﬁ‹m≠OfS¸ìn
(
s
)((s)->
cm≠
)

	)

130 
	#DeÁu…DïthOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

131 
	#DeÁu…GCOfS¸ìn
(
s
Ë((s)->
deÁu…_gc
)

	)

132 
	#DeÁu…VisuÆOfS¸ìn
(
s
)((s)->
roŸ_visuÆ
)

	)

133 
	#WidthOfS¸ìn
(
s
Ë((s)->
width
)

	)

134 
	#HeightOfS¸ìn
(
s
Ë((s)->
height
)

	)

135 
	#WidthMMOfS¸ìn
(
s
Ë((s)->
mwidth
)

	)

136 
	#HeightMMOfS¸ìn
(
s
Ë((s)->
mheight
)

	)

137 
	#Pœ√sOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

138 
	#CñlsOfS¸ìn
(
s
Ë(
	`DeÁu…VisuÆOfS¸ìn
((s))->
m≠_íåõs
)

	)

139 
	#MöCm≠sOfS¸ìn
(
s
Ë((s)->
mö_m≠s
)

	)

140 
	#MaxCm≠sOfS¸ìn
(
s
Ë((s)->
max_m≠s
)

	)

141 
	#D€sSaveUndîs
(
s
Ë((s)->
ßve_undîs
)

	)

142 
	#D€sBackögSt‹e
(
s
Ë((s)->
backög_°‹e
)

	)

143 
	#EvítMaskOfS¸ìn
(
s
Ë((s)->
roŸ_öput_mask
)

	)

148 
	s_XExtD©a
 {

149 
	mnumbî
;

150 
_XExtD©a
 *
	m√xt
;

151 (*
	m‰ì_¥iv©e
)(

152 
_XExtD©a
 *
	mexãnsi⁄


154 
XPoöãr
 
	m¥iv©e_d©a
;

155 } 
	tXExtD©a
;

161 
	mexãnsi⁄
;

162 
	mmaj‹_›code
;

163 
	mfú°_evít
;

164 
	mfú°_îr‹
;

165 } 
	tXExtCodes
;

172 
	mdïth
;

173 
	mbôs_≥r_pixñ
;

174 
	msˇ∆öe_∑d
;

175 } 
	tXPixm≠F‹m©VÆues
;

182 
	mfun˘i⁄
;

183 
	m∂™e_mask
;

184 
	mf‹eground
;

185 
	mbackground
;

186 
	mlöe_width
;

187 
	mlöe_°yÀ
;

188 
	mˇp_°yÀ
;

190 
	mjoö_°yÀ
;

191 
	mfûl_°yÀ
;

193 
	mfûl_ruÀ
;

194 
	m¨c_mode
;

195 
Pixm≠
 
	mtûe
;

196 
Pixm≠
 
	m°ù∂e
;

197 
	mts_x_‹igö
;

198 
	mts_y_‹igö
;

199 
F⁄t
 
	mf⁄t
;

200 
	msubwödow_mode
;

201 
Boﬁ
 
	mgøphics_exposuªs
;

202 
	m˛ù_x_‹igö
;

203 
	m˛ù_y_‹igö
;

204 
Pixm≠
 
	m˛ù_mask
;

205 
	mdash_off£t
;

206 
	mdashes
;

207 } 
	tXGCVÆues
;

214 
	g_XGC


215 #ifde‡
	tXLIB_ILLEGAL_ACCESS


217 
XExtD©a
 *
	gext_d©a
;

218 
GC⁄ãxt
 
	ggid
;

222 *
	tGC
;

228 
XExtD©a
 *
	mext_d©a
;

229 
VisuÆID
 
	mvisuÆid
;

230 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

231 
	mc_˛ass
;

233 
	m˛ass
;

235 
	mªd_mask
, 
	mgªí_mask
, 
	mblue_mask
;

236 
	mbôs_≥r_rgb
;

237 
	mm≠_íåõs
;

238 } 
	tVisuÆ
;

244 
	mdïth
;

245 
	mnvisuÆs
;

246 
VisuÆ
 *
	mvisuÆs
;

247 } 
	tDïth
;

255 
	g_XDi•œy
;

258 
XExtD©a
 *
	mext_d©a
;

259 
_XDi•œy
 *
	mdi•œy
;

260 
Wödow
 
	mroŸ
;

261 
	mwidth
, 
	mheight
;

262 
	mmwidth
, 
	mmheight
;

263 
	mndïths
;

264 
Dïth
 *
	mdïths
;

265 
	mroŸ_dïth
;

266 
VisuÆ
 *
	mroŸ_visuÆ
;

267 
GC
 
	mdeÁu…_gc
;

268 
Cﬁ‹m≠
 
	mcm≠
;

269 
	mwhôe_pixñ
;

270 
	mbœck_pixñ
;

271 
	mmax_m≠s
, 
	mmö_m≠s
;

272 
	mbackög_°‹e
;

273 
Boﬁ
 
	mßve_undîs
;

274 
	mroŸ_öput_mask
;

275 } 
	tS¸ìn
;

281 
XExtD©a
 *
	mext_d©a
;

282 
	mdïth
;

283 
	mbôs_≥r_pixñ
;

284 
	msˇ∆öe_∑d
;

285 } 
	tS¸ìnF‹m©
;

291 
Pixm≠
 
	mbackground_pixm≠
;

292 
	mbackground_pixñ
;

293 
Pixm≠
 
	mb‹dî_pixm≠
;

294 
	mb‹dî_pixñ
;

295 
	mbô_gøvôy
;

296 
	mwö_gøvôy
;

297 
	mbackög_°‹e
;

298 
	mbackög_∂™es
;

299 
	mbackög_pixñ
;

300 
Boﬁ
 
	mßve_undî
;

301 
	mevít_mask
;

302 
	mdo_nŸ_¥›ag©e_mask
;

303 
Boﬁ
 
	movîride_ªdúe˘
;

304 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

305 
Curs‹
 
	mcurs‹
;

306 } 
	tXSëWödowAâribuãs
;

309 
	mx
, 
	my
;

310 
	mwidth
, 
	mheight
;

311 
	mb‹dî_width
;

312 
	mdïth
;

313 
VisuÆ
 *
	mvisuÆ
;

314 
Wödow
 
	mroŸ
;

315 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

316 
	mc_˛ass
;

318 
	m˛ass
;

320 
	mbô_gøvôy
;

321 
	mwö_gøvôy
;

322 
	mbackög_°‹e
;

323 
	mbackög_∂™es
;

324 
	mbackög_pixñ
;

325 
Boﬁ
 
	mßve_undî
;

326 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

327 
Boﬁ
 
	mm≠_ö°ÆÀd
;

328 
	mm≠_°©e
;

329 
	mÆl_evít_masks
;

330 
	myour_evít_mask
;

331 
	mdo_nŸ_¥›ag©e_mask
;

332 
Boﬁ
 
	movîride_ªdúe˘
;

333 
S¸ìn
 *
	ms¸ìn
;

334 } 
	tXWödowAâribuãs
;

342 
	mÁmûy
;

343 
	mÀngth
;

344 *
	maddªss
;

345 } 
	tXHo°Addªss
;

351 
	mty≥Àngth
;

352 
	mvÆuñígth
;

353 *
	mty≥
;

354 *
	mvÆue
;

355 } 
	tXSîvîI¡î¥ëedAddªss
;

360 
	s_XImage
 {

361 
	mwidth
, 
	mheight
;

362 
	mxoff£t
;

363 
	mf‹m©
;

364 *
	md©a
;

365 
	mbyã_‹dî
;

366 
	mbôm≠_unô
;

367 
	mbôm≠_bô_‹dî
;

368 
	mbôm≠_∑d
;

369 
	mdïth
;

370 
	mbyãs_≥r_löe
;

371 
	mbôs_≥r_pixñ
;

372 
	mªd_mask
;

373 
	mgªí_mask
;

374 
	mblue_mask
;

375 
XPoöãr
 
	mobd©a
;

376 
	sfuncs
 {

377 
	m_XImage
 *(*
	m¸óã_image
)(

378 
	m_XDi•œy
* ,

379 
	mVisuÆ
* ,

388 (*
	mde°roy_image
Ë(
	m_XImage
 *);

389 (*
	mgë_pixñ
Ë(
	m_XImage
 *, , );

390 (*
	mput_pixñ
Ë(
	m_XImage
 *, , , );

391 
	m_XImage
 *(*
	msub_image
)(_XImage *, , , , );

392 (*
	madd_pixñ
Ë(
	m_XImage
 *, );

393 } 
	mf
;

394 } 
	tXImage
;

400 
	mx
, 
	my
;

401 
	mwidth
, 
	mheight
;

402 
	mb‹dî_width
;

403 
Wödow
 
	msiblög
;

404 
	m°ack_mode
;

405 } 
	tXWödowCh™ges
;

411 
	mpixñ
;

412 
	mªd
, 
	mgªí
, 
	mblue
;

413 
	mÊags
;

414 
	m∑d
;

415 } 
	tXCﬁ‹
;

423 
	mx1
, 
	my1
, 
	mx2
, 
	my2
;

424 } 
	tXSegmít
;

427 
	mx
, 
	my
;

428 } 
	tXPoöt
;

431 
	mx
, 
	my
;

432 
	mwidth
, 
	mheight
;

433 } 
	tXRe˘™gÀ
;

436 
	mx
, 
	my
;

437 
	mwidth
, 
	mheight
;

438 
	m™gÀ1
, 
	m™gÀ2
;

439 } 
	tXArc
;

445 
	mkey_˛ick_≥r˚¡
;

446 
	mbñl_≥r˚¡
;

447 
	mbñl_pôch
;

448 
	mbñl_duøti⁄
;

449 
	mÀd
;

450 
	mÀd_mode
;

451 
	mkey
;

452 
	mauto_ª≥©_mode
;

453 } 
	tXKeybﬂrdC⁄åﬁ
;

458 
	mkey_˛ick_≥r˚¡
;

459 
	mbñl_≥r˚¡
;

460 
	mbñl_pôch
, 
	mbñl_duøti⁄
;

461 
	mÀd_mask
;

462 
	mglobÆ_auto_ª≥©
;

463 
	mauto_ª≥©s
[32];

464 } 
	tXKeybﬂrdSèã
;

469 
Time
 
	mtime
;

470 
	mx
, 
	my
;

471 } 
	tXTimeCo‹d
;

476 
	mmax_key≥rmod
;

477 
KeyCode
 *
	mmodifõrm≠
;

478 } 
	tXModifõrKeym≠
;

486 #i‚de‡
XLIB_ILLEGAL_ACCESS


487 
_XDi•œy
 
	tDi•œy
;

490 
	g_XPriv©e
;

491 
	g_XrmHashBuckëRec
;

494 #ifde‡
XLIB_ILLEGAL_ACCESS


495 
	t_XDi•œy


498 
XExtD©a
 *
	gext_d©a
;

499 
_XPriv©e
 *
	g¥iv©e1
;

500 
	gfd
;

501 
	g¥iv©e2
;

502 
	g¥Ÿo_maj‹_vîsi⁄
;

503 
	g¥Ÿo_mö‹_vîsi⁄
;

504 *
	gvíd‹
;

505 
XID
 
	g¥iv©e3
;

506 
XID
 
	g¥iv©e4
;

507 
XID
 
	g¥iv©e5
;

508 
	g¥iv©e6
;

509 
XID
 (*
ªsour˚_Æloc
)(

510 
	g_XDi•œy
*

512 
	gbyã_‹dî
;

513 
	gbôm≠_unô
;

514 
	gbôm≠_∑d
;

515 
	gbôm≠_bô_‹dî
;

516 
	gnf‹m©s
;

517 
S¸ìnF‹m©
 *
	gpixm≠_f‹m©
;

518 
	g¥iv©e8
;

519 
	gªÀa£
;

520 
_XPriv©e
 *
	g¥iv©e9
, *
	g¥iv©e10
;

521 
	gqÀn
;

522 
	gœ°_ªque°_ªad
;

523 
	gªque°
;

524 
XPoöãr
 
	g¥iv©e11
;

525 
XPoöãr
 
	g¥iv©e12
;

526 
XPoöãr
 
	g¥iv©e13
;

527 
XPoöãr
 
	g¥iv©e14
;

528 
	gmax_ªque°_size
;

529 
_XrmHashBuckëRec
 *
	gdb
;

530 (*
	g¥iv©e15
)(

531 
	g_XDi•œy
*

533 *
	gdi•œy_«me
;

534 
	gdeÁu…_s¸ìn
;

535 
	gns¸ìns
;

536 
S¸ìn
 *
	gs¸ìns
;

537 
	gmŸi⁄_buf„r
;

538 
	g¥iv©e16
;

539 
	gmö_keycode
;

540 
	gmax_keycode
;

541 
XPoöãr
 
	g¥iv©e17
;

542 
XPoöãr
 
	g¥iv©e18
;

543 
	g¥iv©e19
;

544 *
	gxdeÁu…s
;

547 #ifde‡
	tXLIB_ILLEGAL_ACCESS


548 
	tDi•œy
,

550 *
	t_XPrivDi•œy
;

552 #unde‡
_XEVENT_


553 #i‚de‡
_XEVENT_


558 
	mty≥
;

559 
	m£rül
;

560 
Boﬁ
 
	m£nd_evít
;

561 
Di•œy
 *
	mdi•œy
;

562 
Wödow
 
	mwödow
;

563 
Wödow
 
	mroŸ
;

564 
Wödow
 
	msubwödow
;

565 
Time
 
	mtime
;

566 
	mx
, 
	my
;

567 
	mx_roŸ
, 
	my_roŸ
;

568 
	m°©e
;

569 
	mkeycode
;

570 
Boﬁ
 
	mßme_s¸ìn
;

571 } 
	tXKeyEvít
;

572 
XKeyEvít
 
	tXKeyPªs£dEvít
;

573 
XKeyEvít
 
	tXKeyRñó£dEvít
;

576 
	mty≥
;

577 
	m£rül
;

578 
Boﬁ
 
	m£nd_evít
;

579 
Di•œy
 *
	mdi•œy
;

580 
Wödow
 
	mwödow
;

581 
Wödow
 
	mroŸ
;

582 
Wödow
 
	msubwödow
;

583 
Time
 
	mtime
;

584 
	mx
, 
	my
;

585 
	mx_roŸ
, 
	my_roŸ
;

586 
	m°©e
;

587 
	mbuâ⁄
;

588 
Boﬁ
 
	mßme_s¸ìn
;

589 } 
	tXBuâ⁄Evít
;

590 
XBuâ⁄Evít
 
	tXBuâ⁄Pªs£dEvít
;

591 
XBuâ⁄Evít
 
	tXBuâ⁄Rñó£dEvít
;

594 
	mty≥
;

595 
	m£rül
;

596 
Boﬁ
 
	m£nd_evít
;

597 
Di•œy
 *
	mdi•œy
;

598 
Wödow
 
	mwödow
;

599 
Wödow
 
	mroŸ
;

600 
Wödow
 
	msubwödow
;

601 
Time
 
	mtime
;

602 
	mx
, 
	my
;

603 
	mx_roŸ
, 
	my_roŸ
;

604 
	m°©e
;

605 
	mis_höt
;

606 
Boﬁ
 
	mßme_s¸ìn
;

607 } 
	tXMŸi⁄Evít
;

608 
XMŸi⁄Evít
 
	tXPoöãrMovedEvít
;

611 
	mty≥
;

612 
	m£rül
;

613 
Boﬁ
 
	m£nd_evít
;

614 
Di•œy
 *
	mdi•œy
;

615 
Wödow
 
	mwödow
;

616 
Wödow
 
	mroŸ
;

617 
Wödow
 
	msubwödow
;

618 
Time
 
	mtime
;

619 
	mx
, 
	my
;

620 
	mx_roŸ
, 
	my_roŸ
;

621 
	mmode
;

622 
	mdëaû
;

627 
Boﬁ
 
	mßme_s¸ìn
;

628 
Boﬁ
 
	mfocus
;

629 
	m°©e
;

630 } 
	tXCrossögEvít
;

631 
XCrossögEvít
 
	tXE¡îWödowEvít
;

632 
XCrossögEvít
 
	tXLóveWödowEvít
;

635 
	mty≥
;

636 
	m£rül
;

637 
Boﬁ
 
	m£nd_evít
;

638 
Di•œy
 *
	mdi•œy
;

639 
Wödow
 
	mwödow
;

640 
	mmode
;

642 
	mdëaû
;

648 } 
	tXFocusCh™geEvít
;

649 
XFocusCh™geEvít
 
	tXFocusInEvít
;

650 
XFocusCh™geEvít
 
	tXFocusOutEvít
;

654 
	mty≥
;

655 
	m£rül
;

656 
Boﬁ
 
	m£nd_evít
;

657 
Di•œy
 *
	mdi•œy
;

658 
Wödow
 
	mwödow
;

659 
	mkey_ve˘‹
[32];

660 } 
	tXKeym≠Evít
;

663 
	mty≥
;

664 
	m£rül
;

665 
Boﬁ
 
	m£nd_evít
;

666 
Di•œy
 *
	mdi•œy
;

667 
Wödow
 
	mwödow
;

668 
	mx
, 
	my
;

669 
	mwidth
, 
	mheight
;

670 
	mcou¡
;

671 } 
	tXExpo£Evít
;

674 
	mty≥
;

675 
	m£rül
;

676 
Boﬁ
 
	m£nd_evít
;

677 
Di•œy
 *
	mdi•œy
;

678 
DøwabÀ
 
	mdøwabÀ
;

679 
	mx
, 
	my
;

680 
	mwidth
, 
	mheight
;

681 
	mcou¡
;

682 
	mmaj‹_code
;

683 
	mmö‹_code
;

684 } 
	tXGøphicsExpo£Evít
;

687 
	mty≥
;

688 
	m£rül
;

689 
Boﬁ
 
	m£nd_evít
;

690 
Di•œy
 *
	mdi•œy
;

691 
DøwabÀ
 
	mdøwabÀ
;

692 
	mmaj‹_code
;

693 
	mmö‹_code
;

694 } 
	tXNoExpo£Evít
;

697 
	mty≥
;

698 
	m£rül
;

699 
Boﬁ
 
	m£nd_evít
;

700 
Di•œy
 *
	mdi•œy
;

701 
Wödow
 
	mwödow
;

702 
	m°©e
;

703 } 
	tXVisibûôyEvít
;

706 
	mty≥
;

707 
	m£rül
;

708 
Boﬁ
 
	m£nd_evít
;

709 
Di•œy
 *
	mdi•œy
;

710 
Wödow
 
	m∑ª¡
;

711 
Wödow
 
	mwödow
;

712 
	mx
, 
	my
;

713 
	mwidth
, 
	mheight
;

714 
	mb‹dî_width
;

715 
Boﬁ
 
	movîride_ªdúe˘
;

716 } 
	tXCª©eWödowEvít
;

719 
	mty≥
;

720 
	m£rül
;

721 
Boﬁ
 
	m£nd_evít
;

722 
Di•œy
 *
	mdi•œy
;

723 
Wödow
 
	mevít
;

724 
Wödow
 
	mwödow
;

725 } 
	tXDe°royWödowEvít
;

728 
	mty≥
;

729 
	m£rül
;

730 
Boﬁ
 
	m£nd_evít
;

731 
Di•œy
 *
	mdi•œy
;

732 
Wödow
 
	mevít
;

733 
Wödow
 
	mwödow
;

734 
Boﬁ
 
	m‰om_c⁄figuª
;

735 } 
	tXUnm≠Evít
;

738 
	mty≥
;

739 
	m£rül
;

740 
Boﬁ
 
	m£nd_evít
;

741 
Di•œy
 *
	mdi•œy
;

742 
Wödow
 
	mevít
;

743 
Wödow
 
	mwödow
;

744 
Boﬁ
 
	movîride_ªdúe˘
;

745 } 
	tXM≠Evít
;

748 
	mty≥
;

749 
	m£rül
;

750 
Boﬁ
 
	m£nd_evít
;

751 
Di•œy
 *
	mdi•œy
;

752 
Wödow
 
	m∑ª¡
;

753 
Wödow
 
	mwödow
;

754 } 
	tXM≠Reque°Evít
;

757 
	mty≥
;

758 
	m£rül
;

759 
Boﬁ
 
	m£nd_evít
;

760 
Di•œy
 *
	mdi•œy
;

761 
Wödow
 
	mevít
;

762 
Wödow
 
	mwödow
;

763 
Wödow
 
	m∑ª¡
;

764 
	mx
, 
	my
;

765 
Boﬁ
 
	movîride_ªdúe˘
;

766 } 
	tXRï¨ítEvít
;

769 
	mty≥
;

770 
	m£rül
;

771 
Boﬁ
 
	m£nd_evít
;

772 
Di•œy
 *
	mdi•œy
;

773 
Wödow
 
	mevít
;

774 
Wödow
 
	mwödow
;

775 
	mx
, 
	my
;

776 
	mwidth
, 
	mheight
;

777 
	mb‹dî_width
;

778 
Wödow
 
	mabove
;

779 
Boﬁ
 
	movîride_ªdúe˘
;

780 } 
	tXC⁄figuªEvít
;

783 
	mty≥
;

784 
	m£rül
;

785 
Boﬁ
 
	m£nd_evít
;

786 
Di•œy
 *
	mdi•œy
;

787 
Wödow
 
	mevít
;

788 
Wödow
 
	mwödow
;

789 
	mx
, 
	my
;

790 } 
	tXGøvôyEvít
;

793 
	mty≥
;

794 
	m£rül
;

795 
Boﬁ
 
	m£nd_evít
;

796 
Di•œy
 *
	mdi•œy
;

797 
Wödow
 
	mwödow
;

798 
	mwidth
, 
	mheight
;

799 } 
	tXResizeReque°Evít
;

802 
	mty≥
;

803 
	m£rül
;

804 
Boﬁ
 
	m£nd_evít
;

805 
Di•œy
 *
	mdi•œy
;

806 
Wödow
 
	m∑ª¡
;

807 
Wödow
 
	mwödow
;

808 
	mx
, 
	my
;

809 
	mwidth
, 
	mheight
;

810 
	mb‹dî_width
;

811 
Wödow
 
	mabove
;

812 
	mdëaû
;

813 
	mvÆue_mask
;

814 } 
	tXC⁄figuªReque°Evít
;

817 
	mty≥
;

818 
	m£rül
;

819 
Boﬁ
 
	m£nd_evít
;

820 
Di•œy
 *
	mdi•œy
;

821 
Wödow
 
	mevít
;

822 
Wödow
 
	mwödow
;

823 
	m∂a˚
;

824 } 
	tXCúcuœãEvít
;

827 
	mty≥
;

828 
	m£rül
;

829 
Boﬁ
 
	m£nd_evít
;

830 
Di•œy
 *
	mdi•œy
;

831 
Wödow
 
	m∑ª¡
;

832 
Wödow
 
	mwödow
;

833 
	m∂a˚
;

834 } 
	tXCúcuœãReque°Evít
;

837 
	mty≥
;

838 
	m£rül
;

839 
Boﬁ
 
	m£nd_evít
;

840 
Di•œy
 *
	mdi•œy
;

841 
Wödow
 
	mwödow
;

842 
Atom
 
	m©om
;

843 
Time
 
	mtime
;

844 
	m°©e
;

845 } 
	tXPr›îtyEvít
;

848 
	mty≥
;

849 
	m£rül
;

850 
Boﬁ
 
	m£nd_evít
;

851 
Di•œy
 *
	mdi•œy
;

852 
Wödow
 
	mwödow
;

853 
Atom
 
	m£À˘i⁄
;

854 
Time
 
	mtime
;

855 } 
	tXSñe˘i⁄CÀ¨Evít
;

858 
	mty≥
;

859 
	m£rül
;

860 
Boﬁ
 
	m£nd_evít
;

861 
Di•œy
 *
	mdi•œy
;

862 
Wödow
 
	mow√r
;

863 
Wödow
 
	mªque°‹
;

864 
Atom
 
	m£À˘i⁄
;

865 
Atom
 
	mèrgë
;

866 
Atom
 
	m¥›îty
;

867 
Time
 
	mtime
;

868 } 
	tXSñe˘i⁄Reque°Evít
;

871 
	mty≥
;

872 
	m£rül
;

873 
Boﬁ
 
	m£nd_evít
;

874 
Di•œy
 *
	mdi•œy
;

875 
Wödow
 
	mªque°‹
;

876 
Atom
 
	m£À˘i⁄
;

877 
Atom
 
	mèrgë
;

878 
Atom
 
	m¥›îty
;

879 
Time
 
	mtime
;

880 } 
	tXSñe˘i⁄Evít
;

883 
	mty≥
;

884 
	m£rül
;

885 
Boﬁ
 
	m£nd_evít
;

886 
Di•œy
 *
	mdi•œy
;

887 
Wödow
 
	mwödow
;

888 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

889 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

890 
Boﬁ
 
	mc_√w
;

892 
Boﬁ
 
	m√w
;

894 
	m°©e
;

895 } 
	tXCﬁ‹m≠Evít
;

898 
	mty≥
;

899 
	m£rül
;

900 
Boﬁ
 
	m£nd_evít
;

901 
Di•œy
 *
	mdi•œy
;

902 
Wödow
 
	mwödow
;

903 
Atom
 
	mmesßge_ty≥
;

904 
	mf‹m©
;

906 
	mb
[20];

907 
	ms
[10];

908 
	ml
[5];

909 } 
	md©a
;

910 } 
	tXClõ¡MesßgeEvít
;

913 
	mty≥
;

914 
	m£rül
;

915 
Boﬁ
 
	m£nd_evít
;

916 
Di•œy
 *
	mdi•œy
;

917 
Wödow
 
	mwödow
;

918 
	mªque°
;

920 
	mfú°_keycode
;

921 
	mcou¡
;

922 } 
	tXM≠pögEvít
;

925 
	mty≥
;

926 
Di•œy
 *
	mdi•œy
;

927 
XID
 
	mªsour˚id
;

928 
	m£rül
;

929 
	mîr‹_code
;

930 
	mªque°_code
;

931 
	mmö‹_code
;

932 } 
	tXEº‹Evít
;

935 
	mty≥
;

936 
	m£rül
;

937 
Boﬁ
 
	m£nd_evít
;

938 
Di•œy
 *
	mdi•œy
;

939 
Wödow
 
	mwödow
;

940 } 
	tXAnyEvít
;

950 
	mty≥
;

951 
	m£rül
;

952 
Boﬁ
 
	m£nd_evít
;

953 
Di•œy
 *
	mdi•œy
;

954 
	mexãnsi⁄
;

955 
	mevty≥
;

956 } 
	tXGíîicEvít
;

959 
	mty≥
;

960 
	m£rül
;

961 
Boﬁ
 
	m£nd_evít
;

962 
Di•œy
 *
	mdi•œy
;

963 
	mexãnsi⁄
;

964 
	mevty≥
;

965 
	mcookõ
;

966 *
	md©a
;

967 } 
	tXGíîicEvítCookõ
;

973 
	u_XEvít
 {

974 
	mty≥
;

975 
XAnyEvít
 
	mx™y
;

976 
XKeyEvít
 
	mxkey
;

977 
XBuâ⁄Evít
 
	mxbuâ⁄
;

978 
XMŸi⁄Evít
 
	mxmŸi⁄
;

979 
XCrossögEvít
 
	mx¸ossög
;

980 
XFocusCh™geEvít
 
	mxfocus
;

981 
XExpo£Evít
 
	mxexpo£
;

982 
XGøphicsExpo£Evít
 
	mxgøphic£xpo£
;

983 
XNoExpo£Evít
 
	mxn€xpo£
;

984 
XVisibûôyEvít
 
	mxvisibûôy
;

985 
XCª©eWödowEvít
 
	mx¸óãwödow
;

986 
XDe°royWödowEvít
 
	mxde°roywödow
;

987 
XUnm≠Evít
 
	mxunm≠
;

988 
XM≠Evít
 
	mxm≠
;

989 
XM≠Reque°Evít
 
	mxm≠ªque°
;

990 
XRï¨ítEvít
 
	mxª∑ª¡
;

991 
XC⁄figuªEvít
 
	mxc⁄figuª
;

992 
XGøvôyEvít
 
	mxgøvôy
;

993 
XResizeReque°Evít
 
	mxªsizîeque°
;

994 
XC⁄figuªReque°Evít
 
	mxc⁄figuªªque°
;

995 
XCúcuœãEvít
 
	mxcúcuœã
;

996 
XCúcuœãReque°Evít
 
	mxcúcuœãªque°
;

997 
XPr›îtyEvít
 
	mx¥›îty
;

998 
XSñe˘i⁄CÀ¨Evít
 
	mx£À˘i⁄˛ór
;

999 
XSñe˘i⁄Reque°Evít
 
	mx£À˘i⁄ªque°
;

1000 
XSñe˘i⁄Evít
 
	mx£À˘i⁄
;

1001 
XCﬁ‹m≠Evít
 
	mxcﬁ‹m≠
;

1002 
XClõ¡MesßgeEvít
 
	mx˛õ¡
;

1003 
XM≠pögEvít
 
	mxm≠pög
;

1004 
XEº‹Evít
 
	mxîr‹
;

1005 
XKeym≠Evít
 
	mxkeym≠
;

1006 
XGíîicEvít
 
	mxgíîic
;

1007 
XGíîicEvítCookõ
 
	mxcookõ
;

1008 
	m∑d
[24];

1009 } 
	tXEvít
;

1012 
	#XAŒocID
(
dpy
Ë((*((
_XPrivDi•œy
)(dpy))->
ªsour˚_Æloc
)((dpy)))

	)

1018 
	mlbórög
;

1019 
	mrbórög
;

1020 
	mwidth
;

1021 
	mas˚¡
;

1022 
	mdes˚¡
;

1023 
	m©åibuãs
;

1024 } 
	tXCh¨Såu˘
;

1031 
Atom
 
	m«me
;

1032 
	mˇrd32
;

1033 } 
	tXF⁄tPr›
;

1036 
XExtD©a
 *
	mext_d©a
;

1037 
F⁄t
 
	mfid
;

1038 
	mdúe˘i⁄
;

1039 
	mmö_ch¨_‹_byã2
;

1040 
	mmax_ch¨_‹_byã2
;

1041 
	mmö_byã1
;

1042 
	mmax_byã1
;

1043 
Boﬁ
 
	mÆl_ch¨s_exi°
;

1044 
	mdeÁu…_ch¨
;

1045 
	mn_¥›îtõs
;

1046 
XF⁄tPr›
 *
	m¥›îtõs
;

1047 
XCh¨Såu˘
 
	mmö_bounds
;

1048 
XCh¨Såu˘
 
	mmax_bounds
;

1049 
XCh¨Såu˘
 *
	m≥r_ch¨
;

1050 
	mas˚¡
;

1051 
	mdes˚¡
;

1052 } 
	tXF⁄tSåu˘
;

1058 *
	mch¨s
;

1059 
	mnch¨s
;

1060 
	mdñè
;

1061 
F⁄t
 
	mf⁄t
;

1062 } 
	tXTextIãm
;

1065 
	mbyã1
;

1066 
	mbyã2
;

1067 } 
	tXCh¨2b
;

1070 
XCh¨2b
 *
	mch¨s
;

1071 
	mnch¨s
;

1072 
	mdñè
;

1073 
F⁄t
 
	mf⁄t
;

1074 } 
	tXTextIãm16
;

1077 uni⁄ { 
Di•œy
 *
	mdi•œy
;

1078 
GC
 
	mgc
;

1079 
VisuÆ
 *
	mvisuÆ
;

1080 
S¸ìn
 *
	ms¸ìn
;

1081 
S¸ìnF‹m©
 *
	mpixm≠_f‹m©
;

1082 
XF⁄tSåu˘
 *
	mf⁄t
; } 
	tXED©aObje˘
;

1085 
XRe˘™gÀ
 
	mmax_ök_exã¡
;

1086 
XRe˘™gÀ
 
	mmax_logiˇl_exã¡
;

1087 } 
	tXF⁄tSëExã¡s
;

1093 
_XOM
 *
	tXOM
;

1094 
_XOC
 *
	tXOC
, *
	tXF⁄tSë
;

1097 *
	mch¨s
;

1098 
	mnch¨s
;

1099 
	mdñè
;

1100 
XF⁄tSë
 
	mf⁄t_£t
;

1101 } 
	tXmbTextIãm
;

1104 
wch¨_t
 *
	mch¨s
;

1105 
	mnch¨s
;

1106 
	mdñè
;

1107 
XF⁄tSë
 
	mf⁄t_£t
;

1108 } 
	tXwcTextIãm
;

1110 
	#XNRequúedCh¨Së
 "ªquúedCh¨Së"

	)

1111 
	#XNQuîyOrõ¡©i⁄
 "quîyOrõ¡©i⁄"

	)

1112 
	#XNBa£F⁄tName
 "ba£F⁄tName"

	)

1113 
	#XNOMAutom©ic
 "omAutom©ic"

	)

1114 
	#XNMissögCh¨Së
 "missögCh¨Së"

	)

1115 
	#XNDeÁu…Såög
 "deÁu…Såög"

	)

1116 
	#XNOrõ¡©i⁄
 "‹õ¡©i⁄"

	)

1117 
	#XNDúe˘i⁄ÆDïídítDøwög
 "dúe˘i⁄ÆDïídítDøwög"

	)

1118 
	#XNC⁄ãxtuÆDøwög
 "c⁄ãxtuÆDøwög"

	)

1119 
	#XNF⁄tInfo
 "f⁄tInfo"

	)

1122 
	mch¨£t_cou¡
;

1123 **
	mch¨£t_li°
;

1124 } 
	tXOMCh¨SëLi°
;

1127 
	mXOMOrõ¡©i⁄_LTR_TTB
,

1128 
	mXOMOrõ¡©i⁄_RTL_TTB
,

1129 
	mXOMOrõ¡©i⁄_TTB_LTR
,

1130 
	mXOMOrõ¡©i⁄_TTB_RTL
,

1131 
	mXOMOrõ¡©i⁄_C⁄ãxt


1132 } 
	tXOrõ¡©i⁄
;

1135 
	mnum_‹õ¡©i⁄
;

1136 
XOrõ¡©i⁄
 *
	m‹õ¡©i⁄
;

1137 } 
	tXOMOrõ¡©i⁄
;

1140 
	mnum_f⁄t
;

1141 
XF⁄tSåu˘
 **
	mf⁄t_°ru˘_li°
;

1142 **
	mf⁄t_«me_li°
;

1143 } 
	tXOMF⁄tInfo
;

1145 
_XIM
 *
	tXIM
;

1146 
_XIC
 *
	tXIC
;

1148 (*
	tXIMProc
)(

1149 
	tXIM
,

1150 
	tXPoöãr
,

1151 
	tXPoöãr


1154 
	$Boﬁ
 (*
	tXICProc
)(

1155 
	tXIC
,

1156 
	tXPoöãr
,

1157 
	tXPoöãr


1160 (*
	tXIDProc
)(

1161 
	tDi•œy
*,

1162 
	tXPoöãr
,

1163 
	tXPoöãr


1166 
	tXIMStyÀ
;

1169 
cou¡_°yÀs
;

1170 
XIMStyÀ
 *
suµ‹ãd_°yÀs
;

1171 } 
	tXIMStyÀs
;

1173 
	#XIMPªedôAªa
 0x0001L

	)

1174 
	#XIMPªedôCÆlbacks
 0x0002L

	)

1175 
	#XIMPªedôPosôi⁄
 0x0004L

	)

1176 
	#XIMPªedôNŸhög
 0x0008L

	)

1177 
	#XIMPªedôN⁄e
 0x0010L

	)

1178 
	#XIMSètusAªa
 0x0100L

	)

1179 
	#XIMSètusCÆlbacks
 0x0200L

	)

1180 
	#XIMSètusNŸhög
 0x0400L

	)

1181 
	#XIMSètusN⁄e
 0x0800L

	)

1183 
	#XNVaNe°edLi°
 "XNVaNe°edLi°"

	)

1184 
	#XNQuîyI≈utStyÀ
 "quîyI≈utStyÀ"

	)

1185 
	#XNClõ¡Wödow
 "˛õ¡Wödow"

	)

1186 
	#XNI≈utStyÀ
 "öputStyÀ"

	)

1187 
	#XNFocusWödow
 "focusWödow"

	)

1188 
	#XNResour˚Name
 "ªsour˚Name"

	)

1189 
	#XNResour˚Cœss
 "ªsour˚Cœss"

	)

1190 
	#XNGeomëryCÆlback
 "geomëryCÆlback"

	)

1191 
	#XNDe°royCÆlback
 "de°royCÆlback"

	)

1192 
	#XNFûãrEvíts
 "fûãrEvíts"

	)

1193 
	#XNPªedôSèπCÆlback
 "¥ìdôSèπCÆlback"

	)

1194 
	#XNPªedôD⁄eCÆlback
 "¥ìdôD⁄eCÆlback"

	)

1195 
	#XNPªedôDøwCÆlback
 "¥ìdôDøwCÆlback"

	)

1196 
	#XNPªedôC¨ëCÆlback
 "¥ìdôC¨ëCÆlback"

	)

1197 
	#XNPªedôSèãNŸifyCÆlback
 "¥ìdôSèãNŸifyCÆlback"

	)

1198 
	#XNPªedôAâribuãs
 "¥ìdôAâribuãs"

	)

1199 
	#XNSètusSèπCÆlback
 "°©usSèπCÆlback"

	)

1200 
	#XNSètusD⁄eCÆlback
 "°©usD⁄eCÆlback"

	)

1201 
	#XNSètusDøwCÆlback
 "°©usDøwCÆlback"

	)

1202 
	#XNSètusAâribuãs
 "°©usAâribuãs"

	)

1203 
	#XNAªa
 "¨ó"

	)

1204 
	#XNAªaNìded
 "¨óNìded"

	)

1205 
	#XNSpŸLoˇti⁄
 "•ŸLoˇti⁄"

	)

1206 
	#XNCﬁ‹m≠
 "cﬁ‹M≠"

	)

1207 
	#XNStdCﬁ‹m≠
 "°dCﬁ‹M≠"

	)

1208 
	#XNF‹eground
 "f‹eground"

	)

1209 
	#XNBackground
 "background"

	)

1210 
	#XNBackgroundPixm≠
 "backgroundPixm≠"

	)

1211 
	#XNF⁄tSë
 "f⁄tSë"

	)

1212 
	#XNLöeS∑˚
 "löeS∑˚"

	)

1213 
	#XNCurs‹
 "curs‹"

	)

1215 
	#XNQuîyIMVÆuesLi°
 "quîyIMVÆuesLi°"

	)

1216 
	#XNQuîyICVÆuesLi°
 "quîyICVÆuesLi°"

	)

1217 
	#XNVisibÀPosôi⁄
 "visibÀPosôi⁄"

	)

1218 
	#XNR6PªedôCÆlback
 "r6PªedôCÆlback"

	)

1219 
	#XNSåögC⁄vîsi⁄CÆlback
 "°rögC⁄vîsi⁄CÆlback"

	)

1220 
	#XNSåögC⁄vîsi⁄
 "°rögC⁄vîsi⁄"

	)

1221 
	#XNRe£tSèã
 "ª£tSèã"

	)

1222 
	#XNHŸKey
 "hŸKey"

	)

1223 
	#XNHŸKeySèã
 "hŸKeySèã"

	)

1224 
	#XNPªedôSèã
 "¥ìdôSèã"

	)

1225 
	#XNSï¨©‹ofNe°edLi°
 "£∑øt‹ofNe°edLi°"

	)

1227 
	#XBuf„rOvîÊow
 -1

	)

1228 
	#XLookupN⁄e
 1

	)

1229 
	#XLookupCh¨s
 2

	)

1230 
	#XLookupKeySym
 3

	)

1231 
	#XLookupBŸh
 4

	)

1233 *
	tXVaNe°edLi°
;

1236 
XPoöãr
 
˛õ¡_d©a
;

1237 
XIMProc
 
ˇŒback
;

1238 } 
	tXIMCÆlback
;

1241 
XPoöãr
 
˛õ¡_d©a
;

1242 
XICProc
 
ˇŒback
;

1243 } 
	tXICCÆlback
;

1245 
	tXIMFìdback
;

1247 
	#XIMRevî£
 1L

	)

1248 
	#XIMUndîlöe
 (1L<<1)

	)

1249 
	#XIMHighlight
 (1L<<2)

	)

1250 
	#XIMPrim¨y
 (1L<<5)

	)

1251 
	#XIMSec⁄d¨y
 (1L<<6)

	)

1252 
	#XIMTîtüry
 (1L<<7)

	)

1253 
	#XIMVisibÀToF‹w¨d
 (1L<<8)

	)

1254 
	#XIMVisibÀToBackw‹d
 (1L<<9)

	)

1255 
	#XIMVisibÀToCíãr
 (1L<<10)

	)

1257 
	s_XIMText
 {

1258 
Àngth
;

1259 
XIMFìdback
 *
„edback
;

1260 
Boﬁ
 
ícodög_is_wch¨
;

1262 *
mu…i_byã
;

1263 
wch¨_t
 *
wide_ch¨
;

1264 } 
°rög
;

1265 } 
	tXIMText
;

1267 
	tXIMPªedôSèã
;

1269 
	#XIMPªedôUnKnown
 0L

	)

1270 
	#XIMPªedôE«bÀ
 1L

	)

1271 
	#XIMPªedôDißbÀ
 (1L<<1)

	)

1273 
	s_XIMPªedôSèãNŸifyCÆlbackSåu˘
 {

1274 
XIMPªedôSèã
 
°©e
;

1275 } 
	tXIMPªedôSèãNŸifyCÆlbackSåu˘
;

1277 
	tXIMRe£tSèã
;

1279 
	#XIMInôülSèã
 1L

	)

1280 
	#XIMPª£rveSèã
 (1L<<1)

	)

1282 
	tXIMSåögC⁄vîsi⁄Fìdback
;

1284 
	#XIMSåögC⁄vîsi⁄Le·Edge
 (0x00000001)

	)

1285 
	#XIMSåögC⁄vîsi⁄RightEdge
 (0x00000002)

	)

1286 
	#XIMSåögC⁄vîsi⁄T›Edge
 (0x00000004)

	)

1287 
	#XIMSåögC⁄vîsi⁄BŸtomEdge
 (0x00000008)

	)

1288 
	#XIMSåögC⁄vîsi⁄C⁄˚Æed
 (0x00000010)

	)

1289 
	#XIMSåögC⁄vîsi⁄Wøµed
 (0x00000020)

	)

1291 
	s_XIMSåögC⁄vîsi⁄Text
 {

1292 
Àngth
;

1293 
XIMSåögC⁄vîsi⁄Fìdback
 *
„edback
;

1294 
Boﬁ
 
ícodög_is_wch¨
;

1296 *
mbs
;

1297 
wch¨_t
 *
wcs
;

1298 } 
°rög
;

1299 } 
	tXIMSåögC⁄vîsi⁄Text
;

1301 
	tXIMSåögC⁄vîsi⁄Posôi⁄
;

1303 
	tXIMSåögC⁄vîsi⁄Ty≥
;

1305 
	#XIMSåögC⁄vîsi⁄Buf„r
 (0x0001)

	)

1306 
	#XIMSåögC⁄vîsi⁄Löe
 (0x0002)

	)

1307 
	#XIMSåögC⁄vîsi⁄W‹d
 (0x0003)

	)

1308 
	#XIMSåögC⁄vîsi⁄Ch¨
 (0x0004)

	)

1310 
	tXIMSåögC⁄vîsi⁄O≥øti⁄
;

1312 
	#XIMSåögC⁄vîsi⁄Sub°ôuti⁄
 (0x0001)

	)

1313 
	#XIMSåögC⁄vîsi⁄RërõvÆ
 (0x0002)

	)

1316 
XIMF‹w¨dCh¨
, 
XIMBackw¨dCh¨
,

1317 
XIMF‹w¨dW‹d
, 
XIMBackw¨dW‹d
,

1318 
XIMC¨ëUp
, 
XIMC¨ëDown
,

1319 
XIMNextLöe
, 
XIMPªviousLöe
,

1320 
XIMLöeSèπ
, 
XIMLöeEnd
,

1321 
XIMAbsﬁuãPosôi⁄
,

1322 
XIMD⁄tCh™ge


1323 } 
	tXIMC¨ëDúe˘i⁄
;

1325 
	s_XIMSåögC⁄vîsi⁄CÆlbackSåu˘
 {

1326 
XIMSåögC⁄vîsi⁄Posôi⁄
 
posôi⁄
;

1327 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1328 
XIMSåögC⁄vîsi⁄O≥øti⁄
 
›î©i⁄
;

1329 
Á˘‹
;

1330 
XIMSåögC⁄vîsi⁄Text
 *
ãxt
;

1331 } 
	tXIMSåögC⁄vîsi⁄CÆlbackSåu˘
;

1333 
	s_XIMPªedôDøwCÆlbackSåu˘
 {

1334 
ˇªt
;

1335 
chg_fú°
;

1336 
chg_Àngth
;

1337 
XIMText
 *
ãxt
;

1338 } 
	tXIMPªedôDøwCÆlbackSåu˘
;

1341 
XIMIsInvisibÀ
,

1342 
XIMIsPrim¨y
,

1343 
XIMIsSec⁄d¨y


1344 } 
	tXIMC¨ëStyÀ
;

1346 
	s_XIMPªedôC¨ëCÆlbackSåu˘
 {

1347 
posôi⁄
;

1348 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1349 
XIMC¨ëStyÀ
 
°yÀ
;

1350 } 
	tXIMPªedôC¨ëCÆlbackSåu˘
;

1353 
XIMTextTy≥
,

1354 
XIMBôm≠Ty≥


1355 } 
	tXIMSètusD©aTy≥
;

1357 
	s_XIMSètusDøwCÆlbackSåu˘
 {

1358 
XIMSètusD©aTy≥
 
ty≥
;

1360 
XIMText
 *
ãxt
;

1361 
Pixm≠
 
bôm≠
;

1362 } 
d©a
;

1363 } 
	tXIMSètusDøwCÆlbackSåu˘
;

1365 
	s_XIMHŸKeyTriggî
 {

1366 
KeySym
 
keysym
;

1367 
modifõr
;

1368 
modifõr_mask
;

1369 } 
	tXIMHŸKeyTriggî
;

1371 
	s_XIMHŸKeyTriggîs
 {

1372 
num_hŸ_key
;

1373 
XIMHŸKeyTriggî
 *
key
;

1374 } 
	tXIMHŸKeyTriggîs
;

1376 
	tXIMHŸKeySèã
;

1378 
	#XIMHŸKeySèãON
 (0x0001L)

	)

1379 
	#XIMHŸKeySèãOFF
 (0x0002L)

	)

1382 
cou¡_vÆues
;

1383 **
suµ‹ãd_vÆues
;

1384 } 
	tXIMVÆuesLi°
;

1386 
_XFUNCPROTOBEGIN


1388 #i‡
	`deföed
(
WIN32
Ë&& !deföed(
_XLIBINT_
)

1389 
	#_Xdebug
 (*
_Xdebug_p
)

	)

1392 
_Xdebug
;

1394 
XF⁄tSåu˘
 *
	`XLﬂdQuîyF⁄t
(

1395 
Di•œy
* ,

1396 
_Xc⁄°
 *

1399 
XF⁄tSåu˘
 *
	`XQuîyF⁄t
(

1400 
Di•œy
* ,

1401 
XID


1405 
XTimeCo‹d
 *
	`XGëMŸi⁄Evíts
(

1406 
Di•œy
* ,

1407 
Wödow
 ,

1408 
Time
 ,

1409 
Time
 ,

1413 
XModifõrKeym≠
 *
	`XDñëeModifõrm≠E¡ry
(

1414 
XModifõrKeym≠
* ,

1415 #i‡
NìdWidePrŸŸy≥s


1418 
KeyCode
 ,

1423 
XModifõrKeym≠
 *
	`XGëModifõrM≠pög
(

1424 
Di•œy
*

1427 
XModifõrKeym≠
 *
	`XIn£πModifõrm≠E¡ry
(

1428 
XModifõrKeym≠
* ,

1429 #i‡
NìdWidePrŸŸy≥s


1432 
KeyCode
 ,

1437 
XModifõrKeym≠
 *
	`XNewModifõrm≠
(

1441 
XImage
 *
	`XCª©eImage
(

1442 
Di•œy
* ,

1443 
VisuÆ
* ,

1453 
Sètus
 
	`XInôImage
(

1454 
XImage
*

1456 
XImage
 *
	`XGëImage
(

1457 
Di•œy
* ,

1458 
DøwabÀ
 ,

1466 
XImage
 *
	`XGëSubImage
(

1467 
Di•œy
* ,

1468 
DøwabÀ
 ,

1475 
XImage
* ,

1483 
Di•œy
 *
	`XO≥nDi•œy
(

1484 
_Xc⁄°
 *

1487 
	`XrmInôülize
(

1491 *
	`XFëchByãs
(

1492 
Di•œy
* ,

1495 *
	`XFëchBuf„r
(

1496 
Di•œy
* ,

1500 *
	`XGëAtomName
(

1501 
Di•œy
* ,

1502 
Atom


1504 
Sètus
 
	`XGëAtomNames
(

1505 
Di•œy
* ,

1506 
Atom
* ,

1510 *
	`XGëDeÁu…
(

1511 
Di•œy
* ,

1512 
_Xc⁄°
 * ,

1513 
_Xc⁄°
 *

1515 *
	`XDi•œyName
(

1516 
_Xc⁄°
 *

1518 *
	`XKeysymToSåög
(

1519 
KeySym


1522 (*
	$XSynchr⁄ize
(

1523 
Di•œy
* ,

1524 
Boﬁ


1526 
Di•œy
*

1528 (*
	`XSëA·îFun˘i⁄
(

1529 
Di•œy
* ,

1531 
Di•œy
*

1534 
Di•œy
*

1536 
Atom
 
	`XI¡înAtom
(

1537 
Di•œy
* ,

1538 
_Xc⁄°
 * ,

1539 
Boﬁ


1541 
Sètus
 
	`XI¡înAtoms
(

1542 
Di•œy
* ,

1545 
Boﬁ
 ,

1546 
Atom
*

1548 
Cﬁ‹m≠
 
	`XC›yCﬁ‹m≠AndFªe
(

1549 
Di•œy
* ,

1550 
Cﬁ‹m≠


1552 
Cﬁ‹m≠
 
	`XCª©eCﬁ‹m≠
(

1553 
Di•œy
* ,

1554 
Wödow
 ,

1555 
VisuÆ
* ,

1558 
Curs‹
 
	`XCª©ePixm≠Curs‹
(

1559 
Di•œy
* ,

1560 
Pixm≠
 ,

1561 
Pixm≠
 ,

1562 
XCﬁ‹
* ,

1563 
XCﬁ‹
* ,

1567 
Curs‹
 
	`XCª©eGlyphCurs‹
(

1568 
Di•œy
* ,

1569 
F⁄t
 ,

1570 
F⁄t
 ,

1573 
XCﬁ‹
 
_Xc⁄°
 * ,

1574 
XCﬁ‹
 
_Xc⁄°
 *

1576 
Curs‹
 
	`XCª©eF⁄tCurs‹
(

1577 
Di•œy
* ,

1580 
F⁄t
 
	`XLﬂdF⁄t
(

1581 
Di•œy
* ,

1582 
_Xc⁄°
 *

1584 
GC
 
	`XCª©eGC
(

1585 
Di•œy
* ,

1586 
DøwabÀ
 ,

1588 
XGCVÆues
*

1590 
GC⁄ãxt
 
	`XGC⁄ãxtFromGC
(

1591 
GC


1593 
	`XFlushGC
(

1594 
Di•œy
* ,

1595 
GC


1597 
Pixm≠
 
	`XCª©ePixm≠
(

1598 
Di•œy
* ,

1599 
DøwabÀ
 ,

1604 
Pixm≠
 
	`XCª©eBôm≠FromD©a
(

1605 
Di•œy
* ,

1606 
DøwabÀ
 ,

1607 
_Xc⁄°
 * ,

1611 
Pixm≠
 
	`XCª©ePixm≠FromBôm≠D©a
(

1612 
Di•œy
* ,

1613 
DøwabÀ
 ,

1621 
Wödow
 
	`XCª©eSim∂eWödow
(

1622 
Di•œy
* ,

1623 
Wödow
 ,

1632 
Wödow
 
	`XGëSñe˘i⁄Ow√r
(

1633 
Di•œy
* ,

1634 
Atom


1636 
Wödow
 
	`XCª©eWödow
(

1637 
Di•œy
* ,

1638 
Wödow
 ,

1646 
VisuÆ
* ,

1648 
XSëWödowAâribuãs
*

1650 
Cﬁ‹m≠
 *
	`XLi°In°ÆÀdCﬁ‹m≠s
(

1651 
Di•œy
* ,

1652 
Wödow
 ,

1655 **
	`XLi°F⁄ts
(

1656 
Di•œy
* ,

1657 
_Xc⁄°
 * ,

1661 **
	`XLi°F⁄tsWôhInfo
(

1662 
Di•œy
* ,

1663 
_Xc⁄°
 * ,

1666 
XF⁄tSåu˘
**

1668 **
	`XGëF⁄tP©h
(

1669 
Di•œy
* ,

1672 **
	`XLi°Exãnsi⁄s
(

1673 
Di•œy
* ,

1676 
Atom
 *
	`XLi°Pr›îtõs
(

1677 
Di•œy
* ,

1678 
Wödow
 ,

1681 
XHo°Addªss
 *
	`XLi°Ho°s
(

1682 
Di•œy
* ,

1684 
Boﬁ
*

1686 
_X_DEPRECATED


1687 
KeySym
 
	`XKeycodeToKeysym
(

1688 
Di•œy
* ,

1689 #i‡
NìdWidePrŸŸy≥s


1692 
KeyCode
 ,

1696 
KeySym
 
	`XLookupKeysym
(

1697 
XKeyEvít
* ,

1700 
KeySym
 *
	`XGëKeybﬂrdM≠pög
(

1701 
Di•œy
* ,

1702 #i‡
NìdWidePrŸŸy≥s


1705 
KeyCode
 ,

1710 
KeySym
 
	`XSåögToKeysym
(

1711 
_Xc⁄°
 *

1713 
	`XMaxReque°Size
(

1714 
Di•œy
*

1716 
	`XExãndedMaxReque°Size
(

1717 
Di•œy
*

1719 *
	`XResour˚M™agîSåög
(

1720 
Di•œy
*

1722 *
	`XS¸ìnResour˚Såög
(

1723 
S¸ìn
*

1725 
	`XDi•œyMŸi⁄Buf„rSize
(

1726 
Di•œy
*

1728 
VisuÆID
 
	`XVisuÆIDFromVisuÆ
(

1729 
VisuÆ
*

1734 
Sètus
 
	`XInôThªads
(

1738 
	`XLockDi•œy
(

1739 
Di•œy
*

1742 
	`XU∆ockDi•œy
(

1743 
Di•œy
*

1748 
XExtCodes
 *
	`XInôExãnsi⁄
(

1749 
Di•œy
* ,

1750 
_Xc⁄°
 *

1753 
XExtCodes
 *
	`XAddExãnsi⁄
(

1754 
Di•œy
*

1756 
XExtD©a
 *
	`XFödOnExãnsi⁄Li°
(

1757 
XExtD©a
** ,

1760 
XExtD©a
 **
	`XEHódOfExãnsi⁄Li°
(

1761 
XED©aObje˘


1765 
Wödow
 
	`XRoŸWödow
(

1766 
Di•œy
* ,

1769 
Wödow
 
	`XDeÁu…RoŸWödow
(

1770 
Di•œy
*

1772 
Wödow
 
	`XRoŸWödowOfS¸ìn
(

1773 
S¸ìn
*

1775 
VisuÆ
 *
	`XDeÁu…VisuÆ
(

1776 
Di•œy
* ,

1779 
VisuÆ
 *
	`XDeÁu…VisuÆOfS¸ìn
(

1780 
S¸ìn
*

1782 
GC
 
	`XDeÁu…GC
(

1783 
Di•œy
* ,

1786 
GC
 
	`XDeÁu…GCOfS¸ìn
(

1787 
S¸ìn
*

1789 
	`XBœckPixñ
(

1790 
Di•œy
* ,

1793 
	`XWhôePixñ
(

1794 
Di•œy
* ,

1797 
	`XAŒPœ√s
(

1800 
	`XBœckPixñOfS¸ìn
(

1801 
S¸ìn
*

1803 
	`XWhôePixñOfS¸ìn
(

1804 
S¸ìn
*

1806 
	`XNextReque°
(

1807 
Di•œy
*

1809 
	`XLa°KnownReque°Pro˚s£d
(

1810 
Di•œy
*

1812 *
	`XSîvîVíd‹
(

1813 
Di•œy
*

1815 *
	`XDi•œySåög
(

1816 
Di•œy
*

1818 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠
(

1819 
Di•œy
* ,

1822 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠OfS¸ìn
(

1823 
S¸ìn
*

1825 
Di•œy
 *
	`XDi•œyOfS¸ìn
(

1826 
S¸ìn
*

1828 
S¸ìn
 *
	`XS¸ìnOfDi•œy
(

1829 
Di•œy
* ,

1832 
S¸ìn
 *
	`XDeÁu…S¸ìnOfDi•œy
(

1833 
Di•œy
*

1835 
	`XEvítMaskOfS¸ìn
(

1836 
S¸ìn
*

1839 
	`XS¸ìnNumbîOfS¸ìn
(

1840 
S¸ìn
*

1843 (*
	tXEº‹H™dÀr
) (

1844 
	tDi•œy
* ,

1845 
	tXEº‹Evít
*

1848 
XEº‹H™dÀr
 
	`XSëEº‹H™dÀr
 (

1849 
XEº‹H™dÀr


1853 (*
	tXIOEº‹H™dÀr
) (

1854 
	tDi•œy
*

1857 
XIOEº‹H™dÀr
 
	`XSëIOEº‹H™dÀr
 (

1858 
XIOEº‹H™dÀr


1862 
XPixm≠F‹m©VÆues
 *
	`XLi°Pixm≠F‹m©s
(

1863 
Di•œy
* ,

1866 *
	`XLi°Dïths
(

1867 
Di•œy
* ,

1874 
Sètus
 
	`XRec⁄figuªWMWödow
(

1875 
Di•œy
* ,

1876 
Wödow
 ,

1879 
XWödowCh™ges
*

1882 
Sètus
 
	`XGëWMPrŸocﬁs
(

1883 
Di•œy
* ,

1884 
Wödow
 ,

1885 
Atom
** ,

1888 
Sètus
 
	`XSëWMPrŸocﬁs
(

1889 
Di•œy
* ,

1890 
Wödow
 ,

1891 
Atom
* ,

1894 
Sètus
 
	`XIc⁄ifyWödow
(

1895 
Di•œy
* ,

1896 
Wödow
 ,

1899 
Sètus
 
	`XWôhdøwWödow
(

1900 
Di•œy
* ,

1901 
Wödow
 ,

1904 
Sètus
 
	`XGëComm™d
(

1905 
Di•œy
* ,

1906 
Wödow
 ,

1910 
Sètus
 
	`XGëWMCﬁ‹m≠Wödows
(

1911 
Di•œy
* ,

1912 
Wödow
 ,

1913 
Wödow
** ,

1916 
Sètus
 
	`XSëWMCﬁ‹m≠Wödows
(

1917 
Di•œy
* ,

1918 
Wödow
 ,

1919 
Wödow
* ,

1922 
	`XFªeSåögLi°
(

1925 
	`XSëTønsõ¡F‹Höt
(

1926 
Di•œy
* ,

1927 
Wödow
 ,

1928 
Wödow


1933 
	`XA˘iv©eS¸ìnSavî
(

1934 
Di•œy
*

1937 
	`XAddHo°
(

1938 
Di•œy
* ,

1939 
XHo°Addªss
*

1942 
	`XAddHo°s
(

1943 
Di•œy
* ,

1944 
XHo°Addªss
* ,

1948 
	`XAddToExãnsi⁄Li°
(

1949 
_XExtD©a
** ,

1950 
XExtD©a
*

1953 
	`XAddToSaveSë
(

1954 
Di•œy
* ,

1955 
Wödow


1958 
Sètus
 
	`XAŒocCﬁ‹
(

1959 
Di•œy
* ,

1960 
Cﬁ‹m≠
 ,

1961 
XCﬁ‹
*

1964 
Sètus
 
	`XAŒocCﬁ‹Cñls
(

1965 
Di•œy
* ,

1966 
Cﬁ‹m≠
 ,

1967 
Boﬁ
 ,

1974 
Sètus
 
	`XAŒocCﬁ‹Pœ√s
(

1975 
Di•œy
* ,

1976 
Cﬁ‹m≠
 ,

1977 
Boﬁ
 ,

1988 
Sètus
 
	`XAŒocNamedCﬁ‹
(

1989 
Di•œy
* ,

1990 
Cﬁ‹m≠
 ,

1991 
_Xc⁄°
 * ,

1992 
XCﬁ‹
* ,

1993 
XCﬁ‹
*

1996 
	`XAŒowEvíts
(

1997 
Di•œy
* ,

1999 
Time


2002 
	`XAutoRïótOff
(

2003 
Di•œy
*

2006 
	`XAutoRïótOn
(

2007 
Di•œy
*

2010 
	`XBñl
(

2011 
Di•œy
* ,

2015 
	`XBôm≠BôOrdî
(

2016 
Di•œy
*

2019 
	`XBôm≠Pad
(

2020 
Di•œy
*

2023 
	`XBôm≠Unô
(

2024 
Di•œy
*

2027 
	`XCñlsOfS¸ìn
(

2028 
S¸ìn
*

2031 
	`XCh™geA˘ivePoöãrGøb
(

2032 
Di•œy
* ,

2034 
Curs‹
 ,

2035 
Time


2038 
	`XCh™geGC
(

2039 
Di•œy
* ,

2040 
GC
 ,

2042 
XGCVÆues
*

2045 
	`XCh™geKeybﬂrdC⁄åﬁ
(

2046 
Di•œy
* ,

2048 
XKeybﬂrdC⁄åﬁ
*

2051 
	`XCh™geKeybﬂrdM≠pög
(

2052 
Di•œy
* ,

2055 
KeySym
* ,

2059 
	`XCh™gePoöãrC⁄åﬁ
(

2060 
Di•œy
* ,

2061 
Boﬁ
 ,

2062 
Boﬁ
 ,

2068 
	`XCh™gePr›îty
(

2069 
Di•œy
* ,

2070 
Wödow
 ,

2071 
Atom
 ,

2072 
Atom
 ,

2075 
_Xc⁄°
 * ,

2079 
	`XCh™geSaveSë
(

2080 
Di•œy
* ,

2081 
Wödow
 ,

2085 
	`XCh™geWödowAâribuãs
(

2086 
Di•œy
* ,

2087 
Wödow
 ,

2089 
XSëWödowAâribuãs
*

2092 
Boﬁ
 
	`XCheckIfEvít
(

2093 
Di•œy
* ,

2094 
XEvít
* ,

2095 
	$Boﬁ
 (*) (

2096 
Di•œy
* ,

2097 
XEvít
* ,

2098 
XPoöãr


2100 
XPoöãr


2103 
Boﬁ
 
	`XCheckMaskEvít
(

2104 
Di•œy
* ,

2106 
XEvít
*

2109 
Boﬁ
 
	`XCheckTy≥dEvít
(

2110 
Di•œy
* ,

2112 
XEvít
*

2115 
Boﬁ
 
	`XCheckTy≥dWödowEvít
(

2116 
Di•œy
* ,

2117 
Wödow
 ,

2119 
XEvít
*

2122 
Boﬁ
 
	`XCheckWödowEvít
(

2123 
Di•œy
* ,

2124 
Wödow
 ,

2126 
XEvít
*

2129 
	`XCúcuœãSubwödows
(

2130 
Di•œy
* ,

2131 
Wödow
 ,

2135 
	`XCúcuœãSubwödowsDown
(

2136 
Di•œy
* ,

2137 
Wödow


2140 
	`XCúcuœãSubwödowsUp
(

2141 
Di•œy
* ,

2142 
Wödow


2145 
	`XCÀ¨Aªa
(

2146 
Di•œy
* ,

2147 
Wödow
 ,

2152 
Boﬁ


2155 
	`XCÀ¨Wödow
(

2156 
Di•œy
* ,

2157 
Wödow


2160 
	`XClo£Di•œy
(

2161 
Di•œy
*

2164 
	`XC⁄figuªWödow
(

2165 
Di•œy
* ,

2166 
Wödow
 ,

2168 
XWödowCh™ges
*

2171 
	`XC⁄√˘i⁄Numbî
(

2172 
Di•œy
*

2175 
	`XC⁄vîtSñe˘i⁄
(

2176 
Di•œy
* ,

2177 
Atom
 ,

2178 
Atom
 ,

2179 
Atom
 ,

2180 
Wödow
 ,

2181 
Time


2184 
	`XC›yAªa
(

2185 
Di•œy
* ,

2186 
DøwabÀ
 ,

2187 
DøwabÀ
 ,

2188 
GC
 ,

2197 
	`XC›yGC
(

2198 
Di•œy
* ,

2199 
GC
 ,

2201 
GC


2204 
	`XC›yPœ√
(

2205 
Di•œy
* ,

2206 
DøwabÀ
 ,

2207 
DøwabÀ
 ,

2208 
GC
 ,

2218 
	`XDeÁu…Dïth
(

2219 
Di•œy
* ,

2223 
	`XDeÁu…DïthOfS¸ìn
(

2224 
S¸ìn
*

2227 
	`XDeÁu…S¸ìn
(

2228 
Di•œy
*

2231 
	`XDeföeCurs‹
(

2232 
Di•œy
* ,

2233 
Wödow
 ,

2234 
Curs‹


2237 
	`XDñëePr›îty
(

2238 
Di•œy
* ,

2239 
Wödow
 ,

2240 
Atom


2243 
	`XDe°royWödow
(

2244 
Di•œy
* ,

2245 
Wödow


2248 
	`XDe°roySubwödows
(

2249 
Di•œy
* ,

2250 
Wödow


2253 
	`XD€sBackögSt‹e
(

2254 
S¸ìn
*

2257 
Boﬁ
 
	`XD€sSaveUndîs
(

2258 
S¸ìn
*

2261 
	`XDißbÀAc˚ssC⁄åﬁ
(

2262 
Di•œy
*

2266 
	`XDi•œyCñls
(

2267 
Di•œy
* ,

2271 
	`XDi•œyHeight
(

2272 
Di•œy
* ,

2276 
	`XDi•œyHeightMM
(

2277 
Di•œy
* ,

2281 
	`XDi•œyKeycodes
(

2282 
Di•œy
* ,

2287 
	`XDi•œyPœ√s
(

2288 
Di•œy
* ,

2292 
	`XDi•œyWidth
(

2293 
Di•œy
* ,

2297 
	`XDi•œyWidthMM
(

2298 
Di•œy
* ,

2302 
	`XDøwArc
(

2303 
Di•œy
* ,

2304 
DøwabÀ
 ,

2305 
GC
 ,

2314 
	`XDøwArcs
(

2315 
Di•œy
* ,

2316 
DøwabÀ
 ,

2317 
GC
 ,

2318 
XArc
* ,

2322 
	`XDøwImageSåög
(

2323 
Di•œy
* ,

2324 
DøwabÀ
 ,

2325 
GC
 ,

2328 
_Xc⁄°
 * ,

2332 
	`XDøwImageSåög16
(

2333 
Di•œy
* ,

2334 
DøwabÀ
 ,

2335 
GC
 ,

2338 
_Xc⁄°
 
XCh¨2b
* ,

2342 
	`XDøwLöe
(

2343 
Di•œy
* ,

2344 
DøwabÀ
 ,

2345 
GC
 ,

2352 
	`XDøwLöes
(

2353 
Di•œy
* ,

2354 
DøwabÀ
 ,

2355 
GC
 ,

2356 
XPoöt
* ,

2361 
	`XDøwPoöt
(

2362 
Di•œy
* ,

2363 
DøwabÀ
 ,

2364 
GC
 ,

2369 
	`XDøwPoöts
(

2370 
Di•œy
* ,

2371 
DøwabÀ
 ,

2372 
GC
 ,

2373 
XPoöt
* ,

2378 
	`XDøwRe˘™gÀ
(

2379 
Di•œy
* ,

2380 
DøwabÀ
 ,

2381 
GC
 ,

2388 
	`XDøwRe˘™gÀs
(

2389 
Di•œy
* ,

2390 
DøwabÀ
 ,

2391 
GC
 ,

2392 
XRe˘™gÀ
* ,

2396 
	`XDøwSegmíts
(

2397 
Di•œy
* ,

2398 
DøwabÀ
 ,

2399 
GC
 ,

2400 
XSegmít
* ,

2404 
	`XDøwSåög
(

2405 
Di•œy
* ,

2406 
DøwabÀ
 ,

2407 
GC
 ,

2410 
_Xc⁄°
 * ,

2414 
	`XDøwSåög16
(

2415 
Di•œy
* ,

2416 
DøwabÀ
 ,

2417 
GC
 ,

2420 
_Xc⁄°
 
XCh¨2b
* ,

2424 
	`XDøwText
(

2425 
Di•œy
* ,

2426 
DøwabÀ
 ,

2427 
GC
 ,

2430 
XTextIãm
* ,

2434 
	`XDøwText16
(

2435 
Di•œy
* ,

2436 
DøwabÀ
 ,

2437 
GC
 ,

2440 
XTextIãm16
* ,

2444 
	`XE«bÀAc˚ssC⁄åﬁ
(

2445 
Di•œy
*

2448 
	`XEvítsQueued
(

2449 
Di•œy
* ,

2453 
Sètus
 
	`XFëchName
(

2454 
Di•œy
* ,

2455 
Wödow
 ,

2459 
	`XFûlArc
(

2460 
Di•œy
* ,

2461 
DøwabÀ
 ,

2462 
GC
 ,

2471 
	`XFûlArcs
(

2472 
Di•œy
* ,

2473 
DøwabÀ
 ,

2474 
GC
 ,

2475 
XArc
* ,

2479 
	`XFûlPﬁyg⁄
(

2480 
Di•œy
* ,

2481 
DøwabÀ
 ,

2482 
GC
 ,

2483 
XPoöt
* ,

2489 
	`XFûlRe˘™gÀ
(

2490 
Di•œy
* ,

2491 
DøwabÀ
 ,

2492 
GC
 ,

2499 
	`XFûlRe˘™gÀs
(

2500 
Di•œy
* ,

2501 
DøwabÀ
 ,

2502 
GC
 ,

2503 
XRe˘™gÀ
* ,

2507 
	`XFlush
(

2508 
Di•œy
*

2511 
	`XF‹˚S¸ìnSavî
(

2512 
Di•œy
* ,

2516 
	`XFªe
(

2520 
	`XFªeCﬁ‹m≠
(

2521 
Di•œy
* ,

2522 
Cﬁ‹m≠


2525 
	`XFªeCﬁ‹s
(

2526 
Di•œy
* ,

2527 
Cﬁ‹m≠
 ,

2533 
	`XFªeCurs‹
(

2534 
Di•œy
* ,

2535 
Curs‹


2538 
	`XFªeExãnsi⁄Li°
(

2542 
	`XFªeF⁄t
(

2543 
Di•œy
* ,

2544 
XF⁄tSåu˘
*

2547 
	`XFªeF⁄tInfo
(

2549 
XF⁄tSåu˘
* ,

2553 
	`XFªeF⁄tNames
(

2557 
	`XFªeF⁄tP©h
(

2561 
	`XFªeGC
(

2562 
Di•œy
* ,

2563 
GC


2566 
	`XFªeModifõrm≠
(

2567 
XModifõrKeym≠
*

2570 
	`XFªePixm≠
(

2571 
Di•œy
* ,

2572 
Pixm≠


2575 
	`XGeomëry
(

2576 
Di•œy
* ,

2578 
_Xc⁄°
 * ,

2579 
_Xc⁄°
 * ,

2591 
	`XGëEº‹D©aba£Text
(

2592 
Di•œy
* ,

2593 
_Xc⁄°
 * ,

2594 
_Xc⁄°
 * ,

2595 
_Xc⁄°
 * ,

2600 
	`XGëEº‹Text
(

2601 
Di•œy
* ,

2607 
Boﬁ
 
	`XGëF⁄tPr›îty
(

2608 
XF⁄tSåu˘
* ,

2609 
Atom
 ,

2613 
Sètus
 
	`XGëGCVÆues
(

2614 
Di•œy
* ,

2615 
GC
 ,

2617 
XGCVÆues
*

2620 
Sètus
 
	`XGëGeomëry
(

2621 
Di•œy
* ,

2622 
DøwabÀ
 ,

2623 
Wödow
* ,

2632 
Sètus
 
	`XGëIc⁄Name
(

2633 
Di•œy
* ,

2634 
Wödow
 ,

2638 
	`XGëI≈utFocus
(

2639 
Di•œy
* ,

2640 
Wödow
* ,

2644 
	`XGëKeybﬂrdC⁄åﬁ
(

2645 
Di•œy
* ,

2646 
XKeybﬂrdSèã
*

2649 
	`XGëPoöãrC⁄åﬁ
(

2650 
Di•œy
* ,

2656 
	`XGëPoöãrM≠pög
(

2657 
Di•œy
* ,

2662 
	`XGëS¸ìnSavî
(

2663 
Di•œy
* ,

2670 
Sètus
 
	`XGëTønsõ¡F‹Höt
(

2671 
Di•œy
* ,

2672 
Wödow
 ,

2673 
Wödow
*

2676 
	`XGëWödowPr›îty
(

2677 
Di•œy
* ,

2678 
Wödow
 ,

2679 
Atom
 ,

2682 
Boﬁ
 ,

2683 
Atom
 ,

2684 
Atom
* ,

2691 
Sètus
 
	`XGëWödowAâribuãs
(

2692 
Di•œy
* ,

2693 
Wödow
 ,

2694 
XWödowAâribuãs
*

2697 
	`XGøbBuâ⁄
(

2698 
Di•œy
* ,

2701 
Wödow
 ,

2702 
Boﬁ
 ,

2706 
Wödow
 ,

2707 
Curs‹


2710 
	`XGøbKey
(

2711 
Di•œy
* ,

2714 
Wödow
 ,

2715 
Boﬁ
 ,

2720 
	`XGøbKeybﬂrd
(

2721 
Di•œy
* ,

2722 
Wödow
 ,

2723 
Boﬁ
 ,

2726 
Time


2729 
	`XGøbPoöãr
(

2730 
Di•œy
* ,

2731 
Wödow
 ,

2732 
Boﬁ
 ,

2736 
Wödow
 ,

2737 
Curs‹
 ,

2738 
Time


2741 
	`XGøbSîvî
(

2742 
Di•œy
*

2745 
	`XHeightMMOfS¸ìn
(

2746 
S¸ìn
*

2749 
	`XHeightOfS¸ìn
(

2750 
S¸ìn
*

2753 
	`XIfEvít
(

2754 
Di•œy
* ,

2755 
XEvít
* ,

2756 
	$Boﬁ
 (*) (

2757 
Di•œy
* ,

2758 
XEvít
* ,

2759 
XPoöãr


2761 
XPoöãr


2764 
	`XImageByãOrdî
(

2765 
Di•œy
*

2768 
	`XIn°ÆlCﬁ‹m≠
(

2769 
Di•œy
* ,

2770 
Cﬁ‹m≠


2773 
KeyCode
 
	`XKeysymToKeycode
(

2774 
Di•œy
* ,

2775 
KeySym


2778 
	`XKûlClõ¡
(

2779 
Di•œy
* ,

2780 
XID


2783 
Sètus
 
	`XLookupCﬁ‹
(

2784 
Di•œy
* ,

2785 
Cﬁ‹m≠
 ,

2786 
_Xc⁄°
 * ,

2787 
XCﬁ‹
* ,

2788 
XCﬁ‹
*

2791 
	`XLowîWödow
(

2792 
Di•œy
* ,

2793 
Wödow


2796 
	`XM≠Rai£d
(

2797 
Di•œy
* ,

2798 
Wödow


2801 
	`XM≠Subwödows
(

2802 
Di•œy
* ,

2803 
Wödow


2806 
	`XM≠Wödow
(

2807 
Di•œy
* ,

2808 
Wödow


2811 
	`XMaskEvít
(

2812 
Di•œy
* ,

2814 
XEvít
*

2817 
	`XMaxCm≠sOfS¸ìn
(

2818 
S¸ìn
*

2821 
	`XMöCm≠sOfS¸ìn
(

2822 
S¸ìn
*

2825 
	`XMoveResizeWödow
(

2826 
Di•œy
* ,

2827 
Wödow
 ,

2834 
	`XMoveWödow
(

2835 
Di•œy
* ,

2836 
Wödow
 ,

2841 
	`XNextEvít
(

2842 
Di•œy
* ,

2843 
XEvít
*

2846 
	`XNoOp
(

2847 
Di•œy
*

2850 
Sètus
 
	`XP¨£Cﬁ‹
(

2851 
Di•œy
* ,

2852 
Cﬁ‹m≠
 ,

2853 
_Xc⁄°
 * ,

2854 
XCﬁ‹
*

2857 
	`XP¨£Geomëry
(

2858 
_Xc⁄°
 * ,

2865 
	`XPìkEvít
(

2866 
Di•œy
* ,

2867 
XEvít
*

2870 
	`XPìkIfEvít
(

2871 
Di•œy
* ,

2872 
XEvít
* ,

2873 
	$Boﬁ
 (*) (

2874 
Di•œy
* ,

2875 
XEvít
* ,

2876 
XPoöãr


2878 
XPoöãr


2881 
	`XPídög
(

2882 
Di•œy
*

2885 
	`XPœ√sOfS¸ìn
(

2886 
S¸ìn
*

2889 
	`XPrŸocﬁRevisi⁄
(

2890 
Di•œy
*

2893 
	`XPrŸocﬁVîsi⁄
(

2894 
Di•œy
*

2898 
	`XPutBackEvít
(

2899 
Di•œy
* ,

2900 
XEvít
*

2903 
	`XPutImage
(

2904 
Di•œy
* ,

2905 
DøwabÀ
 ,

2906 
GC
 ,

2907 
XImage
* ,

2916 
	`XQLígth
(

2917 
Di•œy
*

2920 
Sètus
 
	`XQuîyBe°Curs‹
(

2921 
Di•œy
* ,

2922 
DøwabÀ
 ,

2929 
Sètus
 
	`XQuîyBe°Size
(

2930 
Di•œy
* ,

2932 
DøwabÀ
 ,

2939 
Sètus
 
	`XQuîyBe°Stù∂e
(

2940 
Di•œy
* ,

2941 
DøwabÀ
 ,

2948 
Sètus
 
	`XQuîyBe°Tûe
(

2949 
Di•œy
* ,

2950 
DøwabÀ
 ,

2957 
	`XQuîyCﬁ‹
(

2958 
Di•œy
* ,

2959 
Cﬁ‹m≠
 ,

2960 
XCﬁ‹
*

2963 
	`XQuîyCﬁ‹s
(

2964 
Di•œy
* ,

2965 
Cﬁ‹m≠
 ,

2966 
XCﬁ‹
* ,

2970 
Boﬁ
 
	`XQuîyExãnsi⁄
(

2971 
Di•œy
* ,

2972 
_Xc⁄°
 * ,

2978 
	`XQuîyKeym≠
(

2979 
Di•œy
* ,

2983 
Boﬁ
 
	`XQuîyPoöãr
(

2984 
Di•œy
* ,

2985 
Wödow
 ,

2986 
Wödow
* ,

2987 
Wödow
* ,

2995 
	`XQuîyTextExã¡s
(

2996 
Di•œy
* ,

2997 
XID
 ,

2998 
_Xc⁄°
 * ,

3003 
XCh¨Såu˘
*

3006 
	`XQuîyTextExã¡s16
(

3007 
Di•œy
* ,

3008 
XID
 ,

3009 
_Xc⁄°
 
XCh¨2b
* ,

3014 
XCh¨Såu˘
*

3017 
Sètus
 
	`XQuîyTªe
(

3018 
Di•œy
* ,

3019 
Wödow
 ,

3020 
Wödow
* ,

3021 
Wödow
* ,

3022 
Wödow
** ,

3026 
	`XRai£Wödow
(

3027 
Di•œy
* ,

3028 
Wödow


3031 
	`XRódBôm≠Fûe
(

3032 
Di•œy
* ,

3033 
DøwabÀ
 ,

3034 
_Xc⁄°
 * ,

3037 
Pixm≠
* ,

3042 
	`XRódBôm≠FûeD©a
(

3043 
_Xc⁄°
 * ,

3051 
	`XRebödKeysym
(

3052 
Di•œy
* ,

3053 
KeySym
 ,

3054 
KeySym
* ,

3056 
_Xc⁄°
 * ,

3060 
	`XRecﬁ‹Curs‹
(

3061 
Di•œy
* ,

3062 
Curs‹
 ,

3063 
XCﬁ‹
* ,

3064 
XCﬁ‹
*

3067 
	`XRe‰eshKeybﬂrdM≠pög
(

3068 
XM≠pögEvít
*

3071 
	`XRemoveFromSaveSë
(

3072 
Di•œy
* ,

3073 
Wödow


3076 
	`XRemoveHo°
(

3077 
Di•œy
* ,

3078 
XHo°Addªss
*

3081 
	`XRemoveHo°s
(

3082 
Di•œy
* ,

3083 
XHo°Addªss
* ,

3087 
	`XRï¨ítWödow
(

3088 
Di•œy
* ,

3089 
Wödow
 ,

3090 
Wödow
 ,

3095 
	`XRe£tS¸ìnSavî
(

3096 
Di•œy
*

3099 
	`XResizeWödow
(

3100 
Di•œy
* ,

3101 
Wödow
 ,

3106 
	`XRe°ackWödows
(

3107 
Di•œy
* ,

3108 
Wödow
* ,

3112 
	`XRŸ©eBuf„rs
(

3113 
Di•œy
* ,

3117 
	`XRŸ©eWödowPr›îtõs
(

3118 
Di•œy
* ,

3119 
Wödow
 ,

3120 
Atom
* ,

3125 
	`XS¸ìnCou¡
(

3126 
Di•œy
*

3129 
	`XSñe˘I≈ut
(

3130 
Di•œy
* ,

3131 
Wödow
 ,

3135 
Sètus
 
	`XSídEvít
(

3136 
Di•œy
* ,

3137 
Wödow
 ,

3138 
Boﬁ
 ,

3140 
XEvít
*

3143 
	`XSëAc˚ssC⁄åﬁ
(

3144 
Di•œy
* ,

3148 
	`XSëArcMode
(

3149 
Di•œy
* ,

3150 
GC
 ,

3154 
	`XSëBackground
(

3155 
Di•œy
* ,

3156 
GC
 ,

3160 
	`XSëClùMask
(

3161 
Di•œy
* ,

3162 
GC
 ,

3163 
Pixm≠


3166 
	`XSëClùOrigö
(

3167 
Di•œy
* ,

3168 
GC
 ,

3173 
	`XSëClùRe˘™gÀs
(

3174 
Di•œy
* ,

3175 
GC
 ,

3178 
XRe˘™gÀ
* ,

3183 
	`XSëClo£DownMode
(

3184 
Di•œy
* ,

3188 
	`XSëComm™d
(

3189 
Di•œy
* ,

3190 
Wödow
 ,

3195 
	`XSëDashes
(

3196 
Di•œy
* ,

3197 
GC
 ,

3199 
_Xc⁄°
 * ,

3203 
	`XSëFûlRuÀ
(

3204 
Di•œy
* ,

3205 
GC
 ,

3209 
	`XSëFûlStyÀ
(

3210 
Di•œy
* ,

3211 
GC
 ,

3215 
	`XSëF⁄t
(

3216 
Di•œy
* ,

3217 
GC
 ,

3218 
F⁄t


3221 
	`XSëF⁄tP©h
(

3222 
Di•œy
* ,

3227 
	`XSëF‹eground
(

3228 
Di•œy
* ,

3229 
GC
 ,

3233 
	`XSëFun˘i⁄
(

3234 
Di•œy
* ,

3235 
GC
 ,

3239 
	`XSëGøphicsExposuªs
(

3240 
Di•œy
* ,

3241 
GC
 ,

3242 
Boﬁ


3245 
	`XSëIc⁄Name
(

3246 
Di•œy
* ,

3247 
Wödow
 ,

3248 
_Xc⁄°
 *

3251 
	`XSëI≈utFocus
(

3252 
Di•œy
* ,

3253 
Wödow
 ,

3255 
Time


3258 
	`XSëLöeAâribuãs
(

3259 
Di•œy
* ,

3260 
GC
 ,

3267 
	`XSëModifõrM≠pög
(

3268 
Di•œy
* ,

3269 
XModifõrKeym≠
*

3272 
	`XSëPœ√Mask
(

3273 
Di•œy
* ,

3274 
GC
 ,

3278 
	`XSëPoöãrM≠pög
(

3279 
Di•œy
* ,

3280 
_Xc⁄°
 * ,

3284 
	`XSëS¸ìnSavî
(

3285 
Di•œy
* ,

3292 
	`XSëSñe˘i⁄Ow√r
(

3293 
Di•œy
* ,

3294 
Atom
 ,

3295 
Wödow
 ,

3296 
Time


3299 
	`XSëSèã
(

3300 
Di•œy
* ,

3301 
GC
 ,

3308 
	`XSëStù∂e
(

3309 
Di•œy
* ,

3310 
GC
 ,

3311 
Pixm≠


3314 
	`XSëSubwödowMode
(

3315 
Di•œy
* ,

3316 
GC
 ,

3320 
	`XSëTSOrigö
(

3321 
Di•œy
* ,

3322 
GC
 ,

3327 
	`XSëTûe
(

3328 
Di•œy
* ,

3329 
GC
 ,

3330 
Pixm≠


3333 
	`XSëWödowBackground
(

3334 
Di•œy
* ,

3335 
Wödow
 ,

3339 
	`XSëWödowBackgroundPixm≠
(

3340 
Di•œy
* ,

3341 
Wödow
 ,

3342 
Pixm≠


3345 
	`XSëWödowB‹dî
(

3346 
Di•œy
* ,

3347 
Wödow
 ,

3351 
	`XSëWödowB‹dîPixm≠
(

3352 
Di•œy
* ,

3353 
Wödow
 ,

3354 
Pixm≠


3357 
	`XSëWödowB‹dîWidth
(

3358 
Di•œy
* ,

3359 
Wödow
 ,

3363 
	`XSëWödowCﬁ‹m≠
(

3364 
Di•œy
* ,

3365 
Wödow
 ,

3366 
Cﬁ‹m≠


3369 
	`XSt‹eBuf„r
(

3370 
Di•œy
* ,

3371 
_Xc⁄°
 * ,

3376 
	`XSt‹eByãs
(

3377 
Di•œy
* ,

3378 
_Xc⁄°
 * ,

3382 
	`XSt‹eCﬁ‹
(

3383 
Di•œy
* ,

3384 
Cﬁ‹m≠
 ,

3385 
XCﬁ‹
*

3388 
	`XSt‹eCﬁ‹s
(

3389 
Di•œy
* ,

3390 
Cﬁ‹m≠
 ,

3391 
XCﬁ‹
* ,

3395 
	`XSt‹eName
(

3396 
Di•œy
* ,

3397 
Wödow
 ,

3398 
_Xc⁄°
 *

3401 
	`XSt‹eNamedCﬁ‹
(

3402 
Di•œy
* ,

3403 
Cﬁ‹m≠
 ,

3404 
_Xc⁄°
 * ,

3409 
	`XSync
(

3410 
Di•œy
* ,

3411 
Boﬁ


3414 
	`XTextExã¡s
(

3415 
XF⁄tSåu˘
* ,

3416 
_Xc⁄°
 * ,

3421 
XCh¨Såu˘
*

3424 
	`XTextExã¡s16
(

3425 
XF⁄tSåu˘
* ,

3426 
_Xc⁄°
 
XCh¨2b
* ,

3431 
XCh¨Såu˘
*

3434 
	`XTextWidth
(

3435 
XF⁄tSåu˘
* ,

3436 
_Xc⁄°
 * ,

3440 
	`XTextWidth16
(

3441 
XF⁄tSåu˘
* ,

3442 
_Xc⁄°
 
XCh¨2b
* ,

3446 
Boﬁ
 
	`XTøn¶©eCo‹dö©es
(

3447 
Di•œy
* ,

3448 
Wödow
 ,

3449 
Wödow
 ,

3454 
Wödow
*

3457 
	`XUndeföeCurs‹
(

3458 
Di•œy
* ,

3459 
Wödow


3462 
	`XUngøbBuâ⁄
(

3463 
Di•œy
* ,

3466 
Wödow


3469 
	`XUngøbKey
(

3470 
Di•œy
* ,

3473 
Wödow


3476 
	`XUngøbKeybﬂrd
(

3477 
Di•œy
* ,

3478 
Time


3481 
	`XUngøbPoöãr
(

3482 
Di•œy
* ,

3483 
Time


3486 
	`XUngøbSîvî
(

3487 
Di•œy
*

3490 
	`XUnö°ÆlCﬁ‹m≠
(

3491 
Di•œy
* ,

3492 
Cﬁ‹m≠


3495 
	`XU∆ﬂdF⁄t
(

3496 
Di•œy
* ,

3497 
F⁄t


3500 
	`XUnm≠Subwödows
(

3501 
Di•œy
* ,

3502 
Wödow


3505 
	`XUnm≠Wödow
(

3506 
Di•œy
* ,

3507 
Wödow


3510 
	`XVíd‹Rñó£
(

3511 
Di•œy
*

3514 
	`XW¨pPoöãr
(

3515 
Di•œy
* ,

3516 
Wödow
 ,

3517 
Wödow
 ,

3526 
	`XWidthMMOfS¸ìn
(

3527 
S¸ìn
*

3530 
	`XWidthOfS¸ìn
(

3531 
S¸ìn
*

3534 
	`XWödowEvít
(

3535 
Di•œy
* ,

3536 
Wödow
 ,

3538 
XEvít
*

3541 
	`XWrôeBôm≠Fûe
(

3542 
Di•œy
* ,

3543 
_Xc⁄°
 * ,

3544 
Pixm≠
 ,

3551 
Boﬁ
 
	`XSuµ‹tsLoˇÀ
 ();

3553 *
	`XSëLoˇÀModifõrs
(

3557 
XOM
 
	`XO≥nOM
(

3558 
Di•œy
* ,

3559 
_XrmHashBuckëRec
* ,

3560 
_Xc⁄°
 * ,

3561 
_Xc⁄°
 *

3564 
Sètus
 
	`XClo£OM
(

3565 
XOM


3568 *
	$XSëOMVÆues
(

3569 
XOM
 ,

3571 Ë
	`_X_SENTINEL
(0);

3573 *
	$XGëOMVÆues
(

3574 
XOM
 ,

3576 Ë
	`_X_SENTINEL
(0);

3578 
Di•œy
 *
	`XDi•œyOfOM
(

3579 
XOM


3582 *
	`XLoˇÀOfOM
(

3583 
XOM


3586 
XOC
 
	$XCª©eOC
(

3587 
XOM
 ,

3589 Ë
	`_X_SENTINEL
(0);

3591 
	`XDe°royOC
(

3592 
XOC


3595 
XOM
 
	`XOMOfOC
(

3596 
XOC


3599 *
	$XSëOCVÆues
(

3600 
XOC
 ,

3602 Ë
	`_X_SENTINEL
(0);

3604 *
	$XGëOCVÆues
(

3605 
XOC
 ,

3607 Ë
	`_X_SENTINEL
(0);

3609 
XF⁄tSë
 
	`XCª©eF⁄tSë
(

3610 
Di•œy
* ,

3611 
_Xc⁄°
 * ,

3617 
	`XFªeF⁄tSë
(

3618 
Di•œy
* ,

3619 
XF⁄tSë


3622 
	`XF⁄tsOfF⁄tSë
(

3623 
XF⁄tSë
 ,

3624 
XF⁄tSåu˘
*** ,

3628 *
	`XBa£F⁄tNameLi°OfF⁄tSë
(

3629 
XF⁄tSë


3632 *
	`XLoˇÀOfF⁄tSë
(

3633 
XF⁄tSë


3636 
Boﬁ
 
	`XC⁄ãxtDïídítDøwög
(

3637 
XF⁄tSë


3640 
Boﬁ
 
	`XDúe˘i⁄ÆDïídítDøwög
(

3641 
XF⁄tSë


3644 
Boﬁ
 
	`XC⁄ãxtuÆDøwög
(

3645 
XF⁄tSë


3648 
XF⁄tSëExã¡s
 *
	`XExã¡sOfF⁄tSë
(

3649 
XF⁄tSë


3652 
	`XmbTextEsˇ≥mít
(

3653 
XF⁄tSë
 ,

3654 
_Xc⁄°
 * ,

3658 
	`XwcTextEsˇ≥mít
(

3659 
XF⁄tSë
 ,

3660 
_Xc⁄°
 
wch¨_t
* ,

3664 
	`Xutf8TextEsˇ≥mít
(

3665 
XF⁄tSë
 ,

3666 
_Xc⁄°
 * ,

3670 
	`XmbTextExã¡s
(

3671 
XF⁄tSë
 ,

3672 
_Xc⁄°
 * ,

3674 
XRe˘™gÀ
* ,

3675 
XRe˘™gÀ
*

3678 
	`XwcTextExã¡s
(

3679 
XF⁄tSë
 ,

3680 
_Xc⁄°
 
wch¨_t
* ,

3682 
XRe˘™gÀ
* ,

3683 
XRe˘™gÀ
*

3686 
	`Xutf8TextExã¡s
(

3687 
XF⁄tSë
 ,

3688 
_Xc⁄°
 * ,

3690 
XRe˘™gÀ
* ,

3691 
XRe˘™gÀ
*

3694 
Sètus
 
	`XmbTextPîCh¨Exã¡s
(

3695 
XF⁄tSë
 ,

3696 
_Xc⁄°
 * ,

3698 
XRe˘™gÀ
* ,

3699 
XRe˘™gÀ
* ,

3702 
XRe˘™gÀ
* ,

3703 
XRe˘™gÀ
*

3706 
Sètus
 
	`XwcTextPîCh¨Exã¡s
(

3707 
XF⁄tSë
 ,

3708 
_Xc⁄°
 
wch¨_t
* ,

3710 
XRe˘™gÀ
* ,

3711 
XRe˘™gÀ
* ,

3714 
XRe˘™gÀ
* ,

3715 
XRe˘™gÀ
*

3718 
Sètus
 
	`Xutf8TextPîCh¨Exã¡s
(

3719 
XF⁄tSë
 ,

3720 
_Xc⁄°
 * ,

3722 
XRe˘™gÀ
* ,

3723 
XRe˘™gÀ
* ,

3726 
XRe˘™gÀ
* ,

3727 
XRe˘™gÀ
*

3730 
	`XmbDøwText
(

3731 
Di•œy
* ,

3732 
DøwabÀ
 ,

3733 
GC
 ,

3736 
XmbTextIãm
* ,

3740 
	`XwcDøwText
(

3741 
Di•œy
* ,

3742 
DøwabÀ
 ,

3743 
GC
 ,

3746 
XwcTextIãm
* ,

3750 
	`Xutf8DøwText
(

3751 
Di•œy
* ,

3752 
DøwabÀ
 ,

3753 
GC
 ,

3756 
XmbTextIãm
* ,

3760 
	`XmbDøwSåög
(

3761 
Di•œy
* ,

3762 
DøwabÀ
 ,

3763 
XF⁄tSë
 ,

3764 
GC
 ,

3767 
_Xc⁄°
 * ,

3771 
	`XwcDøwSåög
(

3772 
Di•œy
* ,

3773 
DøwabÀ
 ,

3774 
XF⁄tSë
 ,

3775 
GC
 ,

3778 
_Xc⁄°
 
wch¨_t
* ,

3782 
	`Xutf8DøwSåög
(

3783 
Di•œy
* ,

3784 
DøwabÀ
 ,

3785 
XF⁄tSë
 ,

3786 
GC
 ,

3789 
_Xc⁄°
 * ,

3793 
	`XmbDøwImageSåög
(

3794 
Di•œy
* ,

3795 
DøwabÀ
 ,

3796 
XF⁄tSë
 ,

3797 
GC
 ,

3800 
_Xc⁄°
 * ,

3804 
	`XwcDøwImageSåög
(

3805 
Di•œy
* ,

3806 
DøwabÀ
 ,

3807 
XF⁄tSë
 ,

3808 
GC
 ,

3811 
_Xc⁄°
 
wch¨_t
* ,

3815 
	`Xutf8DøwImageSåög
(

3816 
Di•œy
* ,

3817 
DøwabÀ
 ,

3818 
XF⁄tSë
 ,

3819 
GC
 ,

3822 
_Xc⁄°
 * ,

3826 
XIM
 
	`XO≥nIM
(

3827 
Di•œy
* ,

3828 
_XrmHashBuckëRec
* ,

3833 
Sètus
 
	`XClo£IM
(

3834 
XIM


3837 *
	$XGëIMVÆues
(

3838 
XIM
 , ...

3839 Ë
	`_X_SENTINEL
(0);

3841 *
	$XSëIMVÆues
(

3842 
XIM
 , ...

3843 Ë
	`_X_SENTINEL
(0);

3845 
Di•œy
 *
	`XDi•œyOfIM
(

3846 
XIM


3849 *
	`XLoˇÀOfIM
(

3850 
XIM


3853 
XIC
 
	$XCª©eIC
(

3854 
XIM
 , ...

3855 Ë
	`_X_SENTINEL
(0);

3857 
	`XDe°royIC
(

3858 
XIC


3861 
	`XSëICFocus
(

3862 
XIC


3865 
	`XUn£tICFocus
(

3866 
XIC


3869 
wch¨_t
 *
	`XwcRe£tIC
(

3870 
XIC


3873 *
	`XmbRe£tIC
(

3874 
XIC


3877 *
	`Xutf8Re£tIC
(

3878 
XIC


3881 *
	$XSëICVÆues
(

3882 
XIC
 , ...

3883 Ë
	`_X_SENTINEL
(0);

3885 *
	$XGëICVÆues
(

3886 
XIC
 , ...

3887 Ë
	`_X_SENTINEL
(0);

3889 
XIM
 
	`XIMOfIC
(

3890 
XIC


3893 
Boﬁ
 
	`XFûãrEvít
(

3894 
XEvít
* ,

3895 
Wödow


3898 
	`XmbLookupSåög
(

3899 
XIC
 ,

3900 
XKeyPªs£dEvít
* ,

3903 
KeySym
* ,

3904 
Sètus
*

3907 
	`XwcLookupSåög
(

3908 
XIC
 ,

3909 
XKeyPªs£dEvít
* ,

3910 
wch¨_t
* ,

3912 
KeySym
* ,

3913 
Sètus
*

3916 
	`Xutf8LookupSåög
(

3917 
XIC
 ,

3918 
XKeyPªs£dEvít
* ,

3921 
KeySym
* ,

3922 
Sètus
*

3925 
XVaNe°edLi°
 
	$XVaCª©eNe°edLi°
(

3927 Ë
	`_X_SENTINEL
(0);

3931 
Boﬁ
 
	`XRegi°îIMIn°™tüãCÆlback
(

3932 
Di•œy
* ,

3933 
_XrmHashBuckëRec
* ,

3936 
XIDProc
 ,

3937 
XPoöãr


3940 
Boﬁ
 
	`XUƒegi°îIMIn°™tüãCÆlback
(

3941 
Di•œy
* ,

3942 
_XrmHashBuckëRec
* ,

3945 
XIDProc
 ,

3946 
XPoöãr


3949 (*
	tXC⁄√˘i⁄W©chProc
)(

3950 
	tDi•œy
* ,

3951 
	tXPoöãr
 ,

3953 
	tBoﬁ
 ,

3954 
	tXPoöãr
*

3958 
Sètus
 
	`XI¡î«lC⁄√˘i⁄Numbîs
(

3959 
Di•œy
* ,

3964 
	`XPro˚ssI¡î«lC⁄√˘i⁄
(

3965 
Di•œy
* ,

3969 
Sètus
 
	`XAddC⁄√˘i⁄W©ch
(

3970 
Di•œy
* ,

3971 
XC⁄√˘i⁄W©chProc
 ,

3972 
XPoöãr


3975 
	`XRemoveC⁄√˘i⁄W©ch
(

3976 
Di•œy
* ,

3977 
XC⁄√˘i⁄W©chProc
 ,

3978 
XPoöãr


3981 
	`XSëAuth‹iz©i⁄
(

3988 
	`_Xmbtowc
(

3989 
wch¨_t
 * ,

3994 
	`_Xw˘omb
(

3996 
wch¨_t


3999 
Boﬁ
 
	`XGëEvítD©a
(

4000 
Di•œy
* ,

4001 
XGíîicEvítCookõ
*

4004 
	`XFªeEvítD©a
(

4005 
Di•œy
* ,

4006 
XGíîicEvítCookõ
*

4009 #ifde‡
__˛™g__


4010 #¥agm®
˛™g
 
dügno°ic
 
p›


4013 
_XFUNCPROTOEND


	@/usr/include/X11/cursorfont.h

29 #i‚de‡
_X11_CURSORFONT_H_


30 
	#_X11_CURSORFONT_H_


	)

32 
	#XC_num_glyphs
 154

	)

33 
	#XC_X_curs‹
 0

	)

34 
	#XC_¨row
 2

	)

35 
	#XC_ba£d_¨row_down
 4

	)

36 
	#XC_ba£d_¨row_up
 6

	)

37 
	#XC_bﬂt
 8

	)

38 
	#XC_bogosôy
 10

	)

39 
	#XC_bŸtom_À·_c‹√r
 12

	)

40 
	#XC_bŸtom_right_c‹√r
 14

	)

41 
	#XC_bŸtom_side
 16

	)

42 
	#XC_bŸtom_ãe
 18

	)

43 
	#XC_box_•úÆ
 20

	)

44 
	#XC_˚¡î_±r
 22

	)

45 
	#XC_cú˛e
 24

	)

46 
	#XC_˛ock
 26

	)

47 
	#XC_cof„e_mug
 28

	)

48 
	#XC_¸oss
 30

	)

49 
	#XC_¸oss_ªvî£
 32

	)

50 
	#XC_¸osshaú
 34

	)

51 
	#XC_düm⁄d_¸oss
 36

	)

52 
	#XC_dŸ
 38

	)

53 
	#XC_dŸbox
 40

	)

54 
	#XC_doubÀ_¨row
 42

	)

55 
	#XC_dø·_œrge
 44

	)

56 
	#XC_dø·_smÆl
 46

	)

57 
	#XC_dø≥d_box
 48

	)

58 
	#XC_exch™ge
 50

	)

59 
	#XC_Êeur
 52

	)

60 
	#XC_gobbÀr
 54

	)

61 
	#XC_gumby
 56

	)

62 
	#XC_h™d1
 58

	)

63 
	#XC_h™d2
 60

	)

64 
	#XC_hóπ
 62

	)

65 
	#XC_ic⁄
 64

	)

66 
	#XC_ú⁄_¸oss
 66

	)

67 
	#XC_À·_±r
 68

	)

68 
	#XC_À·_side
 70

	)

69 
	#XC_À·_ãe
 72

	)

70 
	#XC_À·buâ⁄
 74

	)

71 
	#XC_Œ_™gÀ
 76

	)

72 
	#XC_Ã_™gÀ
 78

	)

73 
	#XC_m™
 80

	)

74 
	#XC_middÀbuâ⁄
 82

	)

75 
	#XC_mou£
 84

	)

76 
	#XC_≥ncû
 86

	)

77 
	#XC_pú©e
 88

	)

78 
	#XC_∂us
 90

	)

79 
	#XC_que°i⁄_¨row
 92

	)

80 
	#XC_right_±r
 94

	)

81 
	#XC_right_side
 96

	)

82 
	#XC_right_ãe
 98

	)

83 
	#XC_rightbuâ⁄
 100

	)

84 
	#XC_πl_logo
 102

	)

85 
	#XC_ßûbﬂt
 104

	)

86 
	#XC_sb_down_¨row
 106

	)

87 
	#XC_sb_h_doubÀ_¨row
 108

	)

88 
	#XC_sb_À·_¨row
 110

	)

89 
	#XC_sb_right_¨row
 112

	)

90 
	#XC_sb_up_¨row
 114

	)

91 
	#XC_sb_v_doubÀ_¨row
 116

	)

92 
	#XC_shuâÀ
 118

	)

93 
	#XC_sizög
 120

	)

94 
	#XC_•idî
 122

	)

95 
	#XC_•øyˇn
 124

	)

96 
	#XC_°¨
 126

	)

97 
	#XC_èrgë
 128

	)

98 
	#XC_t¸oss
 130

	)

99 
	#XC_t›_À·_¨row
 132

	)

100 
	#XC_t›_À·_c‹√r
 134

	)

101 
	#XC_t›_right_c‹√r
 136

	)

102 
	#XC_t›_side
 138

	)

103 
	#XC_t›_ãe
 140

	)

104 
	#XC_åek
 142

	)

105 
	#XC_ul_™gÀ
 144

	)

106 
	#XC_umbªŒa
 146

	)

107 
	#XC_ur_™gÀ
 148

	)

108 
	#XC_w©ch
 150

	)

109 
	#XC_xãrm
 152

	)

	@/usr/include/X11/keysym.h

49 
	#XK_MISCELLANY


	)

50 
	#XK_XKB_KEYS


	)

51 
	#XK_LATIN1


	)

52 
	#XK_LATIN2


	)

53 
	#XK_LATIN3


	)

54 
	#XK_LATIN4


	)

55 
	#XK_LATIN8


	)

56 
	#XK_LATIN9


	)

57 
	#XK_CAUCASUS


	)

58 
	#XK_GREEK


	)

59 
	#XK_KATAKANA


	)

60 
	#XK_ARABIC


	)

61 
	#XK_CYRILLIC


	)

62 
	#XK_HEBREW


	)

63 
	#XK_THAI


	)

64 
	#XK_KOREAN


	)

65 
	#XK_ARMENIAN


	)

66 
	#XK_GEORGIAN


	)

67 
	#XK_VIETNAMESE


	)

68 
	#XK_CURRENCY


	)

69 
	#XK_MATHEMATICAL


	)

70 
	#XK_BRAILLE


	)

71 
	#XK_SINHALA


	)

73 
	~<X11/keysymdef.h
>

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

48 
	~<bôs/ty≥s/îr‹_t.h
>

52 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

148 #ifde‡
__USE_ATFILE


149 
	#AT_FDCWD
 -100

	)

152 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

153 
	#AT_REMOVEDIR
 0x200

	)

155 
	#AT_SYMLINK_FOLLOW
 0x400

	)

156 #ifde‡
__USE_GNU


157 
	#AT_NO_AUTOMOUNT
 0x800

	)

159 
	#AT_EMPTY_PATH
 0x1000

	)

160 
	#AT_STATX_SYNC_TYPE
 0x6000

	)

161 
	#AT_STATX_SYNC_AS_STAT
 0x0000

	)

162 
	#AT_STATX_FORCE_SYNC
 0x2000

	)

163 
	#AT_STATX_DONT_SYNC
 0x4000

	)

165 
	#AT_EACCESS
 0x200

	)

174 #i‚de‡
__USE_FILE_OFFSET64


175 
f˙é
 (
__fd
, 
__cmd
, ...);

177 #ifde‡
__REDIRECT


178 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

180 
	#f˙é
 
f˙é64


	)

183 #ifde‡
__USE_LARGEFILE64


184 
f˙é64
 (
__fd
, 
__cmd
, ...);

194 #i‚de‡
__USE_FILE_OFFSET64


195 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__REDIRECT


198 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

199 
	`__n⁄nuŒ
 ((1));

201 
	#›í
 
›í64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

208 #ifde‡
__USE_ATFILE


218 #i‚de‡
__USE_FILE_OFFSET64


219 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

220 
	`__n⁄nuŒ
 ((2));

222 #ifde‡
__REDIRECT


223 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

224 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

226 
	#›í©
 
›í©64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

231 
	`__n⁄nuŒ
 ((2));

240 #i‚de‡
__USE_FILE_OFFSET64


241 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__REDIRECT


244 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

245 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

247 
	#¸ót
 
¸ót64


	)

250 #ifde‡
__USE_LARGEFILE64


251 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

254 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

255 && !
deföed
 
__USE_POSIX
))

264 
	#F_ULOCK
 0

	)

265 
	#F_LOCK
 1

	)

266 
	#F_TLOCK
 2

	)

267 
	#F_TEST
 3

	)

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

275 
	#lockf
 
lockf64


	)

278 #ifde‡
__USE_LARGEFILE64


279 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

283 #ifde‡
__USE_XOPEN2K


286 #i‚de‡
__USE_FILE_OFFSET64


287 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

288 
__advi£
Ë
__THROW
;

290 #ifde‡
__REDIRECT_NTH


291 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

292 
__off64_t
 
__Àn
, 
__advi£
),

293 
posix_Ádvi£64
);

295 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

298 #ifde‡
__USE_LARGEFILE64


299 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

300 
__advi£
Ë
__THROW
;

308 #i‚de‡
__USE_FILE_OFFSET64


309 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

311 #ifde‡
__REDIRECT


312 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

313 
__off64_t
 
__Àn
),

314 
posix_ÁŒoˇã64
);

316 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

319 #ifde‡
__USE_LARGEFILE64


320 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

326 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

327 && 
deföed
 
__va_¨g_∑ck_Àn


328 
	~<bôs/f˙é2.h
>

331 
__END_DECLS


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
	slc⁄v


55 *
	mdecimÆ_poöt
;

56 *
	mthoußnds_£p
;

62 *
	mgroupög
;

68 *
	möt_cuº_symbﬁ
;

69 *
	mcuºícy_symbﬁ
;

70 *
	mm⁄_decimÆ_poöt
;

71 *
	mm⁄_thoußnds_£p
;

72 *
	mm⁄_groupög
;

73 *
	mposôive_sign
;

74 *
	m√g©ive_sign
;

75 
	möt_‰ac_digôs
;

76 
	m‰ac_digôs
;

78 
	mp_cs_¥e˚des
;

80 
	mp_£p_by_•a˚
;

82 
	mn_cs_¥e˚des
;

84 
	mn_£p_by_•a˚
;

91 
	mp_sign_po¢
;

92 
	mn_sign_po¢
;

93 #ifde‡
__USE_ISOC99


95 
	möt_p_cs_¥e˚des
;

97 
	möt_p_£p_by_•a˚
;

99 
	möt_n_cs_¥e˚des
;

101 
	möt_n_£p_by_•a˚
;

108 
	möt_p_sign_po¢
;

109 
	möt_n_sign_po¢
;

111 
	m__öt_p_cs_¥e˚des
;

112 
	m__öt_p_£p_by_•a˚
;

113 
	m__öt_n_cs_¥e˚des
;

114 
	m__öt_n_£p_by_•a˚
;

115 
	m__öt_p_sign_po¢
;

116 
	m__öt_n_sign_po¢
;

122 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

125 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

128 #ifdef 
__USE_XOPEN2K8


135 
	~<bôs/ty≥s/loˇÀ_t.h
>

141 
loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

142 
loˇÀ_t
 
__ba£
Ë
__THROW
;

148 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

149 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

150 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

151 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

152 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

153 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

154 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

155 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

156 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

157 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

158 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

159 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

160 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

161 | 
LC_NUMERIC_MASK
 \

162 | 
LC_TIME_MASK
 \

163 | 
LC_COLLATE_MASK
 \

164 | 
LC_MONETARY_MASK
 \

165 | 
LC_MESSAGES_MASK
 \

166 | 
LC_PAPER_MASK
 \

167 | 
LC_NAME_MASK
 \

168 | 
LC_ADDRESS_MASK
 \

169 | 
LC_TELEPHONE_MASK
 \

170 | 
LC_MEASUREMENT_MASK
 \

171 | 
LC_IDENTIFICATION_MASK
 \

172 )

	)

176 
loˇÀ_t
 
	$du∂oˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

180 
	$‰ìloˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

187 
loˇÀ_t
 
	$u£loˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	#LC_GLOBAL_LOCALE
 ((
loˇÀ_t
Ë-1L)

	)

195 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 #i‡
deföed
 
log
 && deföed 
__GNUC__


30 #w¨nög 
A
 
ma¸o
 
ˇŒed
 
log
 
was
 
Æªady
 
deföed
 
whí
 <
m©h
.
h
> wa†
ö˛uded
.

31 #w¨nög 
This
 
wûl
 
ˇu£
 
compû©i⁄
 
¥obÀms
.

34 
	g__BEGIN_DECLS


37 
	~<bôs/ty≥s.h
>

40 
	~<bôs/m©h-ve˘‹.h
>

43 
	~<bôs/Êﬂä.h
>

47 #i‡
__GNUC_PREREQ
 (3, 3)

48 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
 ())

	)

55 
	#HUGE_VAL
 1e10000

	)

57 #ifde‡
__USE_ISOC99


58 #i‡
__GNUC_PREREQ
 (3, 3)

59 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
 ())

	)

60 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
 ())

	)

62 
	#HUGE_VALF
 1e10000f

	)

63 
	#HUGE_VALL
 1e10000L

	)

66 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

67 
	#HUGE_VAL_F16
 (
	`__buûtö_huge_vÆf16
 ())

	)

69 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

70 
	#HUGE_VAL_F32
 (
	`__buûtö_huge_vÆf32
 ())

	)

72 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

73 
	#HUGE_VAL_F64
 (
	`__buûtö_huge_vÆf64
 ())

	)

75 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

76 
	#HUGE_VAL_F128
 (
	`__buûtö_huge_vÆf128
 ())

	)

78 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

79 
	#HUGE_VAL_F32X
 (
	`__buûtö_huge_vÆf32x
 ())

	)

81 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

82 
	#HUGE_VAL_F64X
 (
	`__buûtö_huge_vÆf64x
 ())

	)

84 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

85 
	#HUGE_VAL_F128X
 (
	`__buûtö_huge_vÆf128x
 ())

	)

88 #ifde‡
__USE_ISOC99


90 #i‡
__GNUC_PREREQ
 (3, 3)

91 
	#INFINITY
 (
	`__buûtö_öff
 ())

	)

93 
	#INFINITY
 
HUGE_VALF


	)

97 #i‡
__GNUC_PREREQ
 (3, 3)

98 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

103 
	#NAN
 (0.0‡/ 0.0f)

	)

107 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

109 #i‡
__GNUC_PREREQ
 (3, 3)

110 
	#SNANF
 (
	`__buûtö_«nsf
 (""))

	)

111 
	#SNAN
 (
	`__buûtö_«ns
 (""))

	)

112 
	#SNANL
 (
	`__buûtö_«n¶
 (""))

	)

115 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

116 
	#SNANF16
 (
	`__buûtö_«nsf16
 (""))

	)

118 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

119 
	#SNANF32
 (
	`__buûtö_«nsf32
 (""))

	)

121 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

122 
	#SNANF64
 (
	`__buûtö_«nsf64
 (""))

	)

124 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

125 
	#SNANF128
 (
	`__buûtö_«nsf128
 (""))

	)

127 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

128 
	#SNANF32X
 (
	`__buûtö_«nsf32x
 (""))

	)

130 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

131 
	#SNANF64X
 (
	`__buûtö_«nsf64x
 (""))

	)

133 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
	#SNANF128X
 (
	`__buûtö_«nsf128x
 (""))

	)

138 
	~<bôs/Êt-evÆ-mëhod.h
>

140 #ifde‡
__USE_ISOC99


148 #i‡
__GLIBC_FLT_EVAL_METHOD
 == 0 || __GLIBC_FLT_EVAL_METHOD == 16

149 
	tÊﬂt_t
;

150 
	tdoubÀ_t
;

151 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 1

152 
	tÊﬂt_t
;

153 
	tdoubÀ_t
;

154 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 2

155 
	tÊﬂt_t
;

156 
	tdoubÀ_t
;

157 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 32

158 
_Flﬂt32
 
	tÊﬂt_t
;

159 
	tdoubÀ_t
;

160 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 33

161 
_Flﬂt32x
 
	tÊﬂt_t
;

162 
_Flﬂt32x
 
	tdoubÀ_t
;

163 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 64

164 
_Flﬂt64
 
	tÊﬂt_t
;

165 
_Flﬂt64
 
	tdoubÀ_t
;

166 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 65

167 
_Flﬂt64x
 
	tÊﬂt_t
;

168 
_Flﬂt64x
 
	tdoubÀ_t
;

169 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 128

170 
_Flﬂt128
 
	tÊﬂt_t
;

171 
_Flﬂt128
 
	tdoubÀ_t
;

172 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 129

173 
_Flﬂt128x
 
	tÊﬂt_t
;

174 
_Flﬂt128x
 
	tdoubÀ_t
;

190 
	~<bôs/Â-logb.h
>

191 #ifde‡
__USE_ISOC99


192 #i‡
__FP_LOGB0_IS_MIN


193 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

195 
	#FP_ILOGB0
 (-2147483647)

	)

197 #i‡
__FP_LOGBNAN_IS_MIN


198 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

200 
	#FP_ILOGBNAN
 2147483647

	)

203 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

204 #i‡
__WORDSIZE
 == 32

205 
	#__FP_LONG_MAX
 0x7fffffffL

	)

207 
	#__FP_LONG_MAX
 0x7fffffffffffffffL

	)

209 #i‡
__FP_LOGB0_IS_MIN


210 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
 - 1)

	)

212 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
)

	)

214 #i‡
__FP_LOGBNAN_IS_MIN


215 
	#FP_LLOGBNAN
 (-
__FP_LONG_MAX
 - 1)

	)

217 
	#FP_LLOGBNAN
 
__FP_LONG_MAX


	)

233 
	~<bôs/Â-Á°.h
>

235 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

239 
	mFP_INT_UPWARD
 =

240 
	#FP_INT_UPWARD
 0

	)

241 
FP_INT_UPWARD
,

242 
	mFP_INT_DOWNWARD
 =

243 
	#FP_INT_DOWNWARD
 1

	)

244 
FP_INT_DOWNWARD
,

245 
	mFP_INT_TOWARDZERO
 =

246 
	#FP_INT_TOWARDZERO
 2

	)

247 
FP_INT_TOWARDZERO
,

248 
	mFP_INT_TONEARESTFROMZERO
 =

249 
	#FP_INT_TONEARESTFROMZERO
 3

	)

250 
FP_INT_TONEARESTFROMZERO
,

251 
	mFP_INT_TONEAREST
 =

252 
	#FP_INT_TONEAREST
 4

	)

253 
FP_INT_TONEAREST
,

262 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

264 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

265 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

266 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

268 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

269 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

270 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

272 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

273 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

274 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

275 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

276 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

277 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

278 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

279 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

280 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

281 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

282 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

283 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

285 
	#_MdoubÀ_
 

	)

286 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

287 
	#__MATH_DECLARING_DOUBLE
 1

	)

288 
	#__MATH_DECLARING_FLOATN
 0

	)

289 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

290 
	~<bôs/m©hˇŒs.h
>

291 #unde‡
_MdoubÀ_


292 #unde‡
__MATH_PRECNAME


293 #unde‡
__MATH_DECLARING_DOUBLE


294 #unde‡
__MATH_DECLARING_FLOATN


296 #ifde‡
__USE_ISOC99


302 
	#_MdoubÀ_
 

	)

303 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

304 
	#__MATH_DECLARING_DOUBLE
 0

	)

305 
	#__MATH_DECLARING_FLOATN
 0

	)

306 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

307 
	~<bôs/m©hˇŒs.h
>

308 #unde‡
_MdoubÀ_


309 #unde‡
__MATH_PRECNAME


310 #unde‡
__MATH_DECLARING_DOUBLE


311 #unde‡
__MATH_DECLARING_FLOATN


313 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

314 || 
deföed
 
__LDBL_COMPAT
 \

315 || 
deföed
 
_LIBC_TEST


316 #ifde‡
__LDBL_COMPAT


318 #ifde‡
__USE_ISOC99


319 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

321 #ifde‡
__REDIRECT_NTH


322 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

323 
__∆dbl_√xâow¨df
)

324 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

326 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

327 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

328 (
__x
, 
__y
),

329 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

333 #unde‡
__MATHDECL_1


334 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

335 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

336 
¨gs
, 
Æüs
)

	)

337 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

338 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

344 
	#_MdoubÀ_
 

	)

345 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

346 
	#__MATH_DECLARING_DOUBLE
 0

	)

347 
	#__MATH_DECLARING_FLOATN
 0

	)

348 
	#__MATH_DECLARE_LDOUBLE
 1

	)

349 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

350 
	~<bôs/m©hˇŒs.h
>

351 #unde‡
_MdoubÀ_


352 #unde‡
__MATH_PRECNAME


353 #unde‡
__MATH_DECLARING_DOUBLE


354 #unde‡
__MATH_DECLARING_FLOATN


363 #i‡
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)

364 
	#_MdoubÀ_
 
_Flﬂt16


	)

365 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f16
##
	)
r

366 
	#__MATH_DECLARING_DOUBLE
 0

	)

367 
	#__MATH_DECLARING_FLOATN
 1

	)

368 #i‡
__HAVE_DISTINCT_FLOAT16


369 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

371 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

372 
	~<bôs/m©hˇŒs.h
>

374 #unde‡
_MdoubÀ_


375 #unde‡
__MATH_PRECNAME


376 #unde‡
__MATH_DECLARING_DOUBLE


377 #unde‡
__MATH_DECLARING_FLOATN


380 #i‡
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)

381 
	#_MdoubÀ_
 
_Flﬂt32


	)

382 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32
##
	)
r

383 
	#__MATH_DECLARING_DOUBLE
 0

	)

384 
	#__MATH_DECLARING_FLOATN
 1

	)

385 #i‡
__HAVE_DISTINCT_FLOAT32


386 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

388 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

389 
	~<bôs/m©hˇŒs.h
>

391 #unde‡
_MdoubÀ_


392 #unde‡
__MATH_PRECNAME


393 #unde‡
__MATH_DECLARING_DOUBLE


394 #unde‡
__MATH_DECLARING_FLOATN


397 #i‡
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)

398 
	#_MdoubÀ_
 
_Flﬂt64


	)

399 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64
##
	)
r

400 
	#__MATH_DECLARING_DOUBLE
 0

	)

401 
	#__MATH_DECLARING_FLOATN
 1

	)

402 #i‡
__HAVE_DISTINCT_FLOAT64


403 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

405 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

406 
	~<bôs/m©hˇŒs.h
>

408 #unde‡
_MdoubÀ_


409 #unde‡
__MATH_PRECNAME


410 #unde‡
__MATH_DECLARING_DOUBLE


411 #unde‡
__MATH_DECLARING_FLOATN


414 #i‡
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)

415 
	#_MdoubÀ_
 
_Flﬂt128


	)

416 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128
##
	)
r

417 
	#__MATH_DECLARING_DOUBLE
 0

	)

418 
	#__MATH_DECLARING_FLOATN
 1

	)

419 #i‡
__HAVE_DISTINCT_FLOAT128


420 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

422 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

423 
	~<bôs/m©hˇŒs.h
>

425 #unde‡
_MdoubÀ_


426 #unde‡
__MATH_PRECNAME


427 #unde‡
__MATH_DECLARING_DOUBLE


428 #unde‡
__MATH_DECLARING_FLOATN


431 #i‡
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)

432 
	#_MdoubÀ_
 
_Flﬂt32x


	)

433 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32x
##
	)
r

434 
	#__MATH_DECLARING_DOUBLE
 0

	)

435 
	#__MATH_DECLARING_FLOATN
 1

	)

436 #i‡
__HAVE_DISTINCT_FLOAT32X


437 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

439 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

440 
	~<bôs/m©hˇŒs.h
>

442 #unde‡
_MdoubÀ_


443 #unde‡
__MATH_PRECNAME


444 #unde‡
__MATH_DECLARING_DOUBLE


445 #unde‡
__MATH_DECLARING_FLOATN


448 #i‡
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)

449 
	#_MdoubÀ_
 
_Flﬂt64x


	)

450 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64x
##
	)
r

451 
	#__MATH_DECLARING_DOUBLE
 0

	)

452 
	#__MATH_DECLARING_FLOATN
 1

	)

453 #i‡
__HAVE_DISTINCT_FLOAT64X


454 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

456 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

457 
	~<bôs/m©hˇŒs.h
>

459 #unde‡
_MdoubÀ_


460 #unde‡
__MATH_PRECNAME


461 #unde‡
__MATH_DECLARING_DOUBLE


462 #unde‡
__MATH_DECLARING_FLOATN


465 #i‡
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)

466 
	#_MdoubÀ_
 
_Flﬂt128x


	)

467 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128x
##
	)
r

468 
	#__MATH_DECLARING_DOUBLE
 0

	)

469 
	#__MATH_DECLARING_FLOATN
 1

	)

470 #i‡
__HAVE_DISTINCT_FLOAT128X


471 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

473 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

474 
	~<bôs/m©hˇŒs.h
>

476 #unde‡
_MdoubÀ_


477 #unde‡
__MATH_PRECNAME


478 #unde‡
__MATH_DECLARING_DOUBLE


479 #unde‡
__MATH_DECLARING_FLOATN


482 #unde‡
__MATHDECL_1


483 #unde‡
__MATHDECL


484 #unde‡
__MATHCALL


487 
	#__MATHCALL_NARROW_ARGS_1
 (
_M¨g_
 
__x
)

	)

488 
	#__MATHCALL_NARROW_ARGS_2
 (
_M¨g_
 
__x
, _M¨g_ 
__y
)

	)

489 
	#__MATHCALL_NARROW_ARGS_3
 (
_M¨g_
 
__x
, _M¨g_ 
__y
, _M¨g_ 
__z
)

	)

490 
	#__MATHCALL_NARROW_NORMAL
(
func
, 
«rgs
) \

491 
_Mªt_
 
func
 
__MATHCALL_NARROW_ARGS_
 ## 
«rgs
 
__THROW


	)

492 
	#__MATHCALL_NARROW_REDIR
(
func
, 
ªdú
, 
«rgs
) \

493 
_Mªt_
 
	`__REDIRECT_NTH
 (
func
, 
__MATHCALL_NARROW_ARGS_
 ## 
«rgs
, \

494 
ªdú
)

	)

495 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

496 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

498 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

500 
	#_Mªt_
 

	)

501 
	#_M¨g_
 

	)

502 
	#__MATHCALL_NAME
(
«me
Ë
f
 ## 
	)
name

503 
	~<bôs/m©hˇŒs-«ºow.h
>

504 #unde‡
_Mªt_


505 #unde‡
_M¨g_


506 #unde‡
__MATHCALL_NAME


508 
	#_Mªt_
 

	)

509 
	#_M¨g_
 

	)

510 
	#__MATHCALL_NAME
(
«me
Ë
f
 ##Çamê## 
l


	)

511 #ifde‡
__LDBL_COMPAT


512 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
f
 ## 
	)
name

513 #unde‡
__MATHCALL_NARROW


514 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

515 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

517 
	~<bôs/m©hˇŒs-«ºow.h
>

518 #unde‡
_Mªt_


519 #unde‡
_M¨g_


520 #unde‡
__MATHCALL_NAME


521 #ifde‡
__LDBL_COMPAT


522 #unde‡
__MATHCALL_REDIR_NAME


523 #unde‡
__MATHCALL_NARROW


524 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

525 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

528 
	#_Mªt_
 

	)

529 
	#_M¨g_
 

	)

530 
	#__MATHCALL_NAME
(
«me
Ë
d
 ##Çamê## 
l


	)

531 #ifde‡
__LDBL_COMPAT


532 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
__∆dbl_d
 ##Çamê## 
l


	)

533 #unde‡
__MATHCALL_NARROW


534 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

535 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

537 
	~<bôs/m©hˇŒs-«ºow.h
>

538 #unde‡
_Mªt_


539 #unde‡
_M¨g_


540 #unde‡
__MATHCALL_NAME


541 #ifde‡
__LDBL_COMPAT


542 #unde‡
__MATHCALL_REDIR_NAME


543 #unde‡
__MATHCALL_NARROW


544 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

545 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

550 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

552 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT32


553 
	#_Mªt_
 
_Flﬂt16


	)

554 
	#_M¨g_
 
_Flﬂt32


	)

555 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f32


	)

556 
	~<bôs/m©hˇŒs-«ºow.h
>

557 #unde‡
_Mªt_


558 #unde‡
_M¨g_


559 #unde‡
__MATHCALL_NAME


562 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT32X


563 
	#_Mªt_
 
_Flﬂt16


	)

564 
	#_M¨g_
 
_Flﬂt32x


	)

565 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f32x


	)

566 
	~<bôs/m©hˇŒs-«ºow.h
>

567 #unde‡
_Mªt_


568 #unde‡
_M¨g_


569 #unde‡
__MATHCALL_NAME


572 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT64


573 
	#_Mªt_
 
_Flﬂt16


	)

574 
	#_M¨g_
 
_Flﬂt64


	)

575 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f64


	)

576 
	~<bôs/m©hˇŒs-«ºow.h
>

577 #unde‡
_Mªt_


578 #unde‡
_M¨g_


579 #unde‡
__MATHCALL_NAME


582 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT64X


583 
	#_Mªt_
 
_Flﬂt16


	)

584 
	#_M¨g_
 
_Flﬂt64x


	)

585 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f64x


	)

586 
	~<bôs/m©hˇŒs-«ºow.h
>

587 #unde‡
_Mªt_


588 #unde‡
_M¨g_


589 #unde‡
__MATHCALL_NAME


592 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT128


593 
	#_Mªt_
 
_Flﬂt16


	)

594 
	#_M¨g_
 
_Flﬂt128


	)

595 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f128


	)

596 
	~<bôs/m©hˇŒs-«ºow.h
>

597 #unde‡
_Mªt_


598 #unde‡
_M¨g_


599 #unde‡
__MATHCALL_NAME


602 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT128X


603 
	#_Mªt_
 
_Flﬂt16


	)

604 
	#_M¨g_
 
_Flﬂt128x


	)

605 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f128x


	)

606 
	~<bôs/m©hˇŒs-«ºow.h
>

607 #unde‡
_Mªt_


608 #unde‡
_M¨g_


609 #unde‡
__MATHCALL_NAME


612 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT32X


613 
	#_Mªt_
 
_Flﬂt32


	)

614 
	#_M¨g_
 
_Flﬂt32x


	)

615 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f32x


	)

616 
	~<bôs/m©hˇŒs-«ºow.h
>

617 #unde‡
_Mªt_


618 #unde‡
_M¨g_


619 #unde‡
__MATHCALL_NAME


622 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT64


623 
	#_Mªt_
 
_Flﬂt32


	)

624 
	#_M¨g_
 
_Flﬂt64


	)

625 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f64


	)

626 
	~<bôs/m©hˇŒs-«ºow.h
>

627 #unde‡
_Mªt_


628 #unde‡
_M¨g_


629 #unde‡
__MATHCALL_NAME


632 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT64X


633 
	#_Mªt_
 
_Flﬂt32


	)

634 
	#_M¨g_
 
_Flﬂt64x


	)

635 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f64x


	)

636 
	~<bôs/m©hˇŒs-«ºow.h
>

637 #unde‡
_Mªt_


638 #unde‡
_M¨g_


639 #unde‡
__MATHCALL_NAME


642 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT128


643 
	#_Mªt_
 
_Flﬂt32


	)

644 
	#_M¨g_
 
_Flﬂt128


	)

645 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f128


	)

646 
	~<bôs/m©hˇŒs-«ºow.h
>

647 #unde‡
_Mªt_


648 #unde‡
_M¨g_


649 #unde‡
__MATHCALL_NAME


652 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT128X


653 
	#_Mªt_
 
_Flﬂt32


	)

654 
	#_M¨g_
 
_Flﬂt128x


	)

655 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f128x


	)

656 
	~<bôs/m©hˇŒs-«ºow.h
>

657 #unde‡
_Mªt_


658 #unde‡
_M¨g_


659 #unde‡
__MATHCALL_NAME


662 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT64


663 
	#_Mªt_
 
_Flﬂt32x


	)

664 
	#_M¨g_
 
_Flﬂt64


	)

665 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f64


	)

666 
	~<bôs/m©hˇŒs-«ºow.h
>

667 #unde‡
_Mªt_


668 #unde‡
_M¨g_


669 #unde‡
__MATHCALL_NAME


672 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT64X


673 
	#_Mªt_
 
_Flﬂt32x


	)

674 
	#_M¨g_
 
_Flﬂt64x


	)

675 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f64x


	)

676 
	~<bôs/m©hˇŒs-«ºow.h
>

677 #unde‡
_Mªt_


678 #unde‡
_M¨g_


679 #unde‡
__MATHCALL_NAME


682 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT128


683 
	#_Mªt_
 
_Flﬂt32x


	)

684 
	#_M¨g_
 
_Flﬂt128


	)

685 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f128


	)

686 
	~<bôs/m©hˇŒs-«ºow.h
>

687 #unde‡
_Mªt_


688 #unde‡
_M¨g_


689 #unde‡
__MATHCALL_NAME


692 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT128X


693 
	#_Mªt_
 
_Flﬂt32x


	)

694 
	#_M¨g_
 
_Flﬂt128x


	)

695 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f128x


	)

696 
	~<bôs/m©hˇŒs-«ºow.h
>

697 #unde‡
_Mªt_


698 #unde‡
_M¨g_


699 #unde‡
__MATHCALL_NAME


702 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT64X


703 
	#_Mªt_
 
_Flﬂt64


	)

704 
	#_M¨g_
 
_Flﬂt64x


	)

705 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f64x


	)

706 
	~<bôs/m©hˇŒs-«ºow.h
>

707 #unde‡
_Mªt_


708 #unde‡
_M¨g_


709 #unde‡
__MATHCALL_NAME


712 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT128


713 
	#_Mªt_
 
_Flﬂt64


	)

714 
	#_M¨g_
 
_Flﬂt128


	)

715 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f128


	)

716 
	~<bôs/m©hˇŒs-«ºow.h
>

717 #unde‡
_Mªt_


718 #unde‡
_M¨g_


719 #unde‡
__MATHCALL_NAME


722 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT128X


723 
	#_Mªt_
 
_Flﬂt64


	)

724 
	#_M¨g_
 
_Flﬂt128x


	)

725 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f128x


	)

726 
	~<bôs/m©hˇŒs-«ºow.h
>

727 #unde‡
_Mªt_


728 #unde‡
_M¨g_


729 #unde‡
__MATHCALL_NAME


732 #i‡
__HAVE_FLOAT64X
 && 
__HAVE_FLOAT128


733 
	#_Mªt_
 
_Flﬂt64x


	)

734 
	#_M¨g_
 
_Flﬂt128


	)

735 
	#__MATHCALL_NAME
(
«me
Ë
f64x
 ##Çamê## 
f128


	)

736 
	~<bôs/m©hˇŒs-«ºow.h
>

737 #unde‡
_Mªt_


738 #unde‡
_M¨g_


739 #unde‡
__MATHCALL_NAME


742 #i‡
__HAVE_FLOAT64X
 && 
__HAVE_FLOAT128X


743 
	#_Mªt_
 
_Flﬂt64x


	)

744 
	#_M¨g_
 
_Flﬂt128x


	)

745 
	#__MATHCALL_NAME
(
«me
Ë
f64x
 ##Çamê## 
f128x


	)

746 
	~<bôs/m©hˇŒs-«ºow.h
>

747 #unde‡
_Mªt_


748 #unde‡
_M¨g_


749 #unde‡
__MATHCALL_NAME


752 #i‡
__HAVE_FLOAT128
 && 
__HAVE_FLOAT128X


753 
	#_Mªt_
 
_Flﬂt128


	)

754 
	#_M¨g_
 
_Flﬂt128x


	)

755 
	#__MATHCALL_NAME
(
«me
Ë
f128
 ##Çamê## 
f128x


	)

756 
	~<bôs/m©hˇŒs-«ºow.h
>

757 #unde‡
_Mªt_


758 #unde‡
_M¨g_


759 #unde‡
__MATHCALL_NAME


764 #unde‡
__MATHCALL_NARROW_ARGS_1


765 #unde‡
__MATHCALL_NARROW_ARGS_2


766 #unde‡
__MATHCALL_NARROW_ARGS_3


767 #unde‡
__MATHCALL_NARROW_NORMAL


768 #unde‡
__MATHCALL_NARROW_REDIR


769 #unde‡
__MATHCALL_NARROW


771 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


773 
signgam
;

776 #i‡(
__HAVE_DISTINCT_FLOAT16
 \

777 || 
__HAVE_DISTINCT_FLOAT32
 \

778 || 
__HAVE_DISTINCT_FLOAT64
 \

779 || 
__HAVE_DISTINCT_FLOAT32X
 \

780 || 
__HAVE_DISTINCT_FLOAT64X
 \

781 || 
__HAVE_DISTINCT_FLOAT128X
)

794 #ifde‡
__NO_LONG_DOUBLE_MATH


795 #i‡
__HAVE_DISTINCT_FLOAT128


798 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

799 ( (
TG_ARG
Ë= (Ë? 
FUNC
 ## 
f
 
ARGS
 : FUNC ARGS)

	)

800 #ñi‡
__HAVE_DISTINCT_FLOAT128


801 #i‡
__HAVE_GENERIC_SELECTION


802 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT32


803 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
Ë
_Flﬂt32
: FUNC ## 
f
 ARGS,

	)

805 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
)

	)

807 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT64X


808 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


809 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
l
 ARGS,

	)

811 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
f128
 ARGS,

	)

814 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
)

	)

816 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

817 
	`_Gíîic
 ((
TG_ARG
), \

818 : 
FUNC
 ## 
f
 
ARGS
, \

819 
	`__MATH_TG_F32
 (
FUNC
, 
ARGS
) \

820 : 
FUNC
 
ARGS
, \

821 : 
FUNC
 ## 
l
 
ARGS
, \

822 
	`__MATH_TG_F64X
 (
FUNC
, 
ARGS
) \

823 
_Flﬂt128
: 
FUNC
 ## 
f128
 
ARGS
)

	)

825 #i‡
__HAVE_FLOATN_NOT_TYPEDEF


828 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

829 
__buûtö_choo£_ex¥
 \

830 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

831 
FUNC
 ## 
f
 
ARGS
, \

832 
__buûtö_choo£_ex¥
 \

833 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

834 
FUNC
 
ARGS
, \

835 
__buûtö_choo£_ex¥
 \

836 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

837 
FUNC
 ## 
l
 
ARGS
, \

838 
FUNC
 ## 
f128
 
ARGS
)))

	)

841 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

842 ( (
TG_ARG
) ==  () \

843 ? 
FUNC
 ## 
f
 
ARGS
 \

844 :  (
TG_ARG
) ==  () \

845 ? 
FUNC
 
ARGS
 \

846 : 
FUNC
 ## 
l
 
ARGS
)

	)

850 #ifde‡
__USE_ISOC99


855 
FP_NAN
 =

856 
	#FP_NAN
 0

	)

857 
FP_NAN
,

858 
FP_INFINITE
 =

859 
	#FP_INFINITE
 1

	)

860 
FP_INFINITE
,

861 
FP_ZERO
 =

862 
	#FP_ZERO
 2

	)

863 
FP_ZERO
,

864 
FP_SUBNORMAL
 =

865 
	#FP_SUBNORMAL
 3

	)

866 
FP_SUBNORMAL
,

867 
FP_NORMAL
 =

868 
	#FP_NORMAL
 4

	)

869 
FP_NORMAL


877 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

878 && (!
deföed
 
__OPTIMIZE_SIZE__
 || deföed 
__˝lu•lus
)

885 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

886 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

888 
	#Â˛assify
(
x
Ë
	`__MATH_TG
 ((x), 
__Â˛assify
, (x))

	)

892 #i‡
	`__GNUC_PREREQ
 (6,0)

893 
	#signbô
(
x
Ë
	`__buûtö_signbô
 (x)

	)

894 #ñi‡
deföed
 
__˝lu•lus


902 
	#signbô
(
x
Ë
	`__buûtö_signbôl
 (x)

	)

903 #ñi‡
	`__GNUC_PREREQ
 (4,0)

904 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__buûtö_signbô
, (x))

	)

906 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__signbô
, (x))

	)

910 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


911 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

913 
	#isföôe
(
x
Ë
	`__MATH_TG
 ((x), 
__föôe
, (x))

	)

917 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


918 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

920 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

925 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


926 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

928 
	#i¢™
(
x
Ë
	`__MATH_TG
 ((x), 
__i¢™
, (x))

	)

932 #i‡
__HAVE_DISTINCT_FLOAT128
 && !
	`__GNUC_PREREQ
 (7,0) \

933 && !
deföed
 
__SUPPORT_SNAN__
 && !deföed 
__˝lu•lus


939 
	#isöf
(
x
) \

940 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
x
), 
_Flﬂt128
) \

941 ? 
	`__isöff128
 (
x
Ë: 
	`__buûtö_isöf_sign
 (x))

	)

942 #ñi‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


943 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

945 
	#isöf
(
x
Ë
	`__MATH_TG
 ((x), 
__isöf
, (x))

	)

949 
	#MATH_ERRNO
 1

	)

950 
	#MATH_ERREXCEPT
 2

	)

957 #ifde‡
__FAST_MATH__


958 
	#m©h_îrh™dlög
 0

	)

959 #ñi‡
deföed
 
__NO_MATH_ERRNO__


960 
	#m©h_îrh™dlög
 (
MATH_ERREXCEPT
)

	)

962 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

967 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

968 
	~<bôs/isˇn⁄iˇl.h
>

971 #i‚de‡
__˝lu•lus


972 
	#issig«lög
(
x
Ë
	`__MATH_TG
 ((x), 
__issig«lög
, (x))

	)

981 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lögf
 (__val); }

982 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lög
 (__val); }

983 
ölöe
 

984 
	`issig«lög
 (
__vÆ
)

986 #ifde‡
__NO_LONG_DOUBLE_MATH


987  
	`__issig«lög
 (
__vÆ
);

989  
	`__issig«lögl
 (
__vÆ
);

992 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


995 
ölöe
 
	`issig«lög
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__issig«lögf128
 (__val); }

997 
	}
}

1001 
	#issubn‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_SUBNORMAL
)

	)

1004 #i‚de‡
__˝lu•lus


1005 #ifde‡
__SUPPORT_SNAN__


1006 
	#iszîo
(
x
Ë(
	`Â˛assify
 (xË=
FP_ZERO
)

	)

1008 
	#iszîo
(
x
Ë(((
	`__ty≥of
 (x)Ë(x)Ë=0)

	)

1012 #ifde‡
__SUPPORT_SNAN__


1013 
ölöe
 

1014 
iszîo
 (
__vÆ
)

1016  
__Â˛assifyf
 (
__vÆ
Ë=
FP_ZERO
;

1018 
ölöe
 

1019 
iszîo
 (
__vÆ
)

1021  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

1023 
ölöe
 

1024 
iszîo
 (
__vÆ
)

1026 #ifde‡
__NO_LONG_DOUBLE_MATH


1027  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

1029  
__Â˛assifyl
 (
__vÆ
Ë=
FP_ZERO
;

1032 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1035 
ölöe
 

1036 
iszîo
 (
_Flﬂt128
 
__vÆ
)

1038  
__Â˛assifyf128
 (
__vÆ
Ë=
FP_ZERO
;

1042 
ãm∂©e
 <
˛ass
 
__T
> 
ölöe
 
boﬁ


1043 
iszîo
 (
__T
 
__vÆ
)

1045  
__vÆ
 == 0;

1052 #ifde‡
__USE_XOPEN


1054 
	#MAXFLOAT
 3.40282347e+38F

	)

1059 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


1060 
	#M_E
 2.7182818284590452354

	)

1061 
	#M_LOG2E
 1.4426950408889634074

	)

1062 
	#M_LOG10E
 0.43429448190325182765

	)

1063 
	#M_LN2
 0.69314718055994530942

	)

1064 
	#M_LN10
 2.30258509299404568402

	)

1065 
	#M_PI
 3.14159265358979323846

	)

1066 
	#M_PI_2
 1.57079632679489661923

	)

1067 
	#M_PI_4
 0.78539816339744830962

	)

1068 
	#M_1_PI
 0.31830988618379067154

	)

1069 
	#M_2_PI
 0.63661977236758134308

	)

1070 
	#M_2_SQRTPI
 1.12837916709551257390

	)

1071 
	#M_SQRT2
 1.41421356237309504880

	)

1072 
	#M_SQRT1_2
 0.70710678118654752440

	)

1078 #ifde‡
__USE_GNU


1079 
	#M_El
 2.718281828459045235360287471352662498L

	)

1080 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

1081 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

1082 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

1083 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

1084 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

1085 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

1086 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

1087 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

1088 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

1089 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

1090 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

1091 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

1094 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


1095 
	#M_Ef16
 
	`__f16
 (2.718281828459045235360287471352662498Ë

	)

1096 
	#M_LOG2Ef16
 
	`__f16
 (1.442695040888963407359924681001892137Ë

	)

1097 
	#M_LOG10Ef16
 
	`__f16
 (0.434294481903251827651128918916605082Ë

	)

1098 
	#M_LN2f16
 
	`__f16
 (0.693147180559945309417232121458176568Ë

	)

1099 
	#M_LN10f16
 
	`__f16
 (2.302585092994045684017991454684364208Ë

	)

1100 
	#M_PIf16
 
	`__f16
 (3.141592653589793238462643383279502884Ë

	)

1101 
	#M_PI_2f16
 
	`__f16
 (1.570796326794896619231321691639751442Ë

	)

1102 
	#M_PI_4f16
 
	`__f16
 (0.785398163397448309615660845819875721Ë

	)

1103 
	#M_1_PIf16
 
	`__f16
 (0.318309886183790671537767526745028724Ë

	)

1104 
	#M_2_PIf16
 
	`__f16
 (0.636619772367581343075535053490057448Ë

	)

1105 
	#M_2_SQRTPIf16
 
	`__f16
 (1.128379167095512573896158903121545172Ë

	)

1106 
	#M_SQRT2f16
 
	`__f16
 (1.414213562373095048801688724209698079Ë

	)

1107 
	#M_SQRT1_2f16
 
	`__f16
 (0.707106781186547524400844362104849039Ë

	)

1110 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


1111 
	#M_Ef32
 
	`__f32
 (2.718281828459045235360287471352662498Ë

	)

1112 
	#M_LOG2Ef32
 
	`__f32
 (1.442695040888963407359924681001892137Ë

	)

1113 
	#M_LOG10Ef32
 
	`__f32
 (0.434294481903251827651128918916605082Ë

	)

1114 
	#M_LN2f32
 
	`__f32
 (0.693147180559945309417232121458176568Ë

	)

1115 
	#M_LN10f32
 
	`__f32
 (2.302585092994045684017991454684364208Ë

	)

1116 
	#M_PIf32
 
	`__f32
 (3.141592653589793238462643383279502884Ë

	)

1117 
	#M_PI_2f32
 
	`__f32
 (1.570796326794896619231321691639751442Ë

	)

1118 
	#M_PI_4f32
 
	`__f32
 (0.785398163397448309615660845819875721Ë

	)

1119 
	#M_1_PIf32
 
	`__f32
 (0.318309886183790671537767526745028724Ë

	)

1120 
	#M_2_PIf32
 
	`__f32
 (0.636619772367581343075535053490057448Ë

	)

1121 
	#M_2_SQRTPIf32
 
	`__f32
 (1.128379167095512573896158903121545172Ë

	)

1122 
	#M_SQRT2f32
 
	`__f32
 (1.414213562373095048801688724209698079Ë

	)

1123 
	#M_SQRT1_2f32
 
	`__f32
 (0.707106781186547524400844362104849039Ë

	)

1126 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


1127 
	#M_Ef64
 
	`__f64
 (2.718281828459045235360287471352662498Ë

	)

1128 
	#M_LOG2Ef64
 
	`__f64
 (1.442695040888963407359924681001892137Ë

	)

1129 
	#M_LOG10Ef64
 
	`__f64
 (0.434294481903251827651128918916605082Ë

	)

1130 
	#M_LN2f64
 
	`__f64
 (0.693147180559945309417232121458176568Ë

	)

1131 
	#M_LN10f64
 
	`__f64
 (2.302585092994045684017991454684364208Ë

	)

1132 
	#M_PIf64
 
	`__f64
 (3.141592653589793238462643383279502884Ë

	)

1133 
	#M_PI_2f64
 
	`__f64
 (1.570796326794896619231321691639751442Ë

	)

1134 
	#M_PI_4f64
 
	`__f64
 (0.785398163397448309615660845819875721Ë

	)

1135 
	#M_1_PIf64
 
	`__f64
 (0.318309886183790671537767526745028724Ë

	)

1136 
	#M_2_PIf64
 
	`__f64
 (0.636619772367581343075535053490057448Ë

	)

1137 
	#M_2_SQRTPIf64
 
	`__f64
 (1.128379167095512573896158903121545172Ë

	)

1138 
	#M_SQRT2f64
 
	`__f64
 (1.414213562373095048801688724209698079Ë

	)

1139 
	#M_SQRT1_2f64
 
	`__f64
 (0.707106781186547524400844362104849039Ë

	)

1142 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


1143 
	#M_Ef128
 
	`__f128
 (2.718281828459045235360287471352662498Ë

	)

1144 
	#M_LOG2Ef128
 
	`__f128
 (1.442695040888963407359924681001892137Ë

	)

1145 
	#M_LOG10Ef128
 
	`__f128
 (0.434294481903251827651128918916605082Ë

	)

1146 
	#M_LN2f128
 
	`__f128
 (0.693147180559945309417232121458176568Ë

	)

1147 
	#M_LN10f128
 
	`__f128
 (2.302585092994045684017991454684364208Ë

	)

1148 
	#M_PIf128
 
	`__f128
 (3.141592653589793238462643383279502884Ë

	)

1149 
	#M_PI_2f128
 
	`__f128
 (1.570796326794896619231321691639751442Ë

	)

1150 
	#M_PI_4f128
 
	`__f128
 (0.785398163397448309615660845819875721Ë

	)

1151 
	#M_1_PIf128
 
	`__f128
 (0.318309886183790671537767526745028724Ë

	)

1152 
	#M_2_PIf128
 
	`__f128
 (0.636619772367581343075535053490057448Ë

	)

1153 
	#M_2_SQRTPIf128
 
	`__f128
 (1.128379167095512573896158903121545172Ë

	)

1154 
	#M_SQRT2f128
 
	`__f128
 (1.414213562373095048801688724209698079Ë

	)

1155 
	#M_SQRT1_2f128
 
	`__f128
 (0.707106781186547524400844362104849039Ë

	)

1158 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


1159 
	#M_Ef32x
 
	`__f32x
 (2.718281828459045235360287471352662498Ë

	)

1160 
	#M_LOG2Ef32x
 
	`__f32x
 (1.442695040888963407359924681001892137Ë

	)

1161 
	#M_LOG10Ef32x
 
	`__f32x
 (0.434294481903251827651128918916605082Ë

	)

1162 
	#M_LN2f32x
 
	`__f32x
 (0.693147180559945309417232121458176568Ë

	)

1163 
	#M_LN10f32x
 
	`__f32x
 (2.302585092994045684017991454684364208Ë

	)

1164 
	#M_PIf32x
 
	`__f32x
 (3.141592653589793238462643383279502884Ë

	)

1165 
	#M_PI_2f32x
 
	`__f32x
 (1.570796326794896619231321691639751442Ë

	)

1166 
	#M_PI_4f32x
 
	`__f32x
 (0.785398163397448309615660845819875721Ë

	)

1167 
	#M_1_PIf32x
 
	`__f32x
 (0.318309886183790671537767526745028724Ë

	)

1168 
	#M_2_PIf32x
 
	`__f32x
 (0.636619772367581343075535053490057448Ë

	)

1169 
	#M_2_SQRTPIf32x
 
	`__f32x
 (1.128379167095512573896158903121545172Ë

	)

1170 
	#M_SQRT2f32x
 
	`__f32x
 (1.414213562373095048801688724209698079Ë

	)

1171 
	#M_SQRT1_2f32x
 
	`__f32x
 (0.707106781186547524400844362104849039Ë

	)

1174 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


1175 
	#M_Ef64x
 
	`__f64x
 (2.718281828459045235360287471352662498Ë

	)

1176 
	#M_LOG2Ef64x
 
	`__f64x
 (1.442695040888963407359924681001892137Ë

	)

1177 
	#M_LOG10Ef64x
 
	`__f64x
 (0.434294481903251827651128918916605082Ë

	)

1178 
	#M_LN2f64x
 
	`__f64x
 (0.693147180559945309417232121458176568Ë

	)

1179 
	#M_LN10f64x
 
	`__f64x
 (2.302585092994045684017991454684364208Ë

	)

1180 
	#M_PIf64x
 
	`__f64x
 (3.141592653589793238462643383279502884Ë

	)

1181 
	#M_PI_2f64x
 
	`__f64x
 (1.570796326794896619231321691639751442Ë

	)

1182 
	#M_PI_4f64x
 
	`__f64x
 (0.785398163397448309615660845819875721Ë

	)

1183 
	#M_1_PIf64x
 
	`__f64x
 (0.318309886183790671537767526745028724Ë

	)

1184 
	#M_2_PIf64x
 
	`__f64x
 (0.636619772367581343075535053490057448Ë

	)

1185 
	#M_2_SQRTPIf64x
 
	`__f64x
 (1.128379167095512573896158903121545172Ë

	)

1186 
	#M_SQRT2f64x
 
	`__f64x
 (1.414213562373095048801688724209698079Ë

	)

1187 
	#M_SQRT1_2f64x
 
	`__f64x
 (0.707106781186547524400844362104849039Ë

	)

1190 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


1197 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


1198 
	#__NO_MATH_INLINES
 1

	)

1201 #ifde‡
__USE_ISOC99


1202 #i‡
__GNUC_PREREQ
 (3, 1)

1209 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

1210 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

1211 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

1212 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

1213 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

1214 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
(x, y)

	)

1216 
	#isgª©î
(
x
, 
y
) \

1217 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1218 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; }))

	)

1219 
	#isgª©îequÆ
(
x
, 
y
) \

1220 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1221 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

1222 
	#i¶ess
(
x
, 
y
) \

1223 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1224 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

1225 
	#i¶es£quÆ
(
x
, 
y
) \

1226 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1227 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

1228 
	#i¶essgª©î
(
x
, 
y
) \

1229 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1230 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x !__y; }))

	)

1232 
	#isun‹dîed
(
x
, 
y
) \

1233 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__u
 = (x); __ty≥of__ (
y
Ë
__v
 = (y); \

1234 
__u
 !
__v
 && (__u !__u || __v !__v); }))

	)

1239 #ifde‡
__USE_EXTERN_INLINES


1240 
	~<bôs/m©hölöe.h
>

1245 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

1248 
	#_MdoubÀ_
 

	)

1249 
	#__MATH_DECLARING_DOUBLE
 1

	)

1250 
	#__MATH_DECLARING_FLOATN
 0

	)

1251 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1252 
fun˘i⁄
 ## 
ªíå™t


	)

1253 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1254 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1255 
	~<bôs/m©h-föôe.h
>

1256 #unde‡
_MdoubÀ_


1257 #unde‡
__MATH_DECLARING_DOUBLE


1258 #unde‡
__MATH_DECLARING_FLOATN


1259 #unde‡
__REDIRFROM_X


1260 #unde‡
__REDIRTO_X


1264 #ifde‡
__USE_ISOC99


1267 
	#_MdoubÀ_
 

	)

1268 
	#__MATH_DECLARING_DOUBLE
 0

	)

1269 
	#__MATH_DECLARING_FLOATN
 0

	)

1270 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1271 
fun˘i⁄
 ## 
f
 ## 
ªíå™t


	)

1272 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1273 
__
 ## 
fun˘i⁄
 ## 
f
 ## 
ªíå™t
 ## 
_föôe


	)

1274 
	~<bôs/m©h-föôe.h
>

1275 #unde‡
_MdoubÀ_


1276 #unde‡
__MATH_DECLARING_DOUBLE


1277 #unde‡
__MATH_DECLARING_FLOATN


1278 #unde‡
__REDIRFROM_X


1279 #unde‡
__REDIRTO_X


1282 #ifde‡
__MATH_DECLARE_LDOUBLE


1283 
	#_MdoubÀ_
 

	)

1284 
	#__MATH_DECLARING_DOUBLE
 0

	)

1285 
	#__MATH_DECLARING_FLOATN
 0

	)

1286 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1287 
fun˘i⁄
 ## 
l
 ## 
ªíå™t


	)

1288 #ifde‡
__NO_LONG_DOUBLE_MATH


1289 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1290 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1292 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1293 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1295 
	~<bôs/m©h-föôe.h
>

1296 #unde‡
_MdoubÀ_


1297 #unde‡
__MATH_DECLARING_DOUBLE


1298 #unde‡
__MATH_DECLARING_FLOATN


1299 #unde‡
__REDIRFROM_X


1300 #unde‡
__REDIRTO_X


1307 #i‡(
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)) \

1308 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1309 
	#_MdoubÀ_
 
_Flﬂt16


	)

1310 
	#__MATH_DECLARING_DOUBLE
 0

	)

1311 
	#__MATH_DECLARING_FLOATN
 1

	)

1312 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1313 
fun˘i⁄
 ## 
f16
 ## 
ªíå™t


	)

1314 #i‡
__HAVE_DISTINCT_FLOAT16


1315 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1316 
__
 ## 
fun˘i⁄
 ## 
f16
 ## 
ªíå™t
 ## 
_föôe


	)

1320 
	~<bôs/m©h-föôe.h
>

1321 #unde‡
_MdoubÀ_


1322 #unde‡
__MATH_DECLARING_DOUBLE


1323 #unde‡
__MATH_DECLARING_FLOATN


1324 #unde‡
__REDIRFROM_X


1325 #unde‡
__REDIRTO_X


1328 #i‡(
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)) \

1329 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1330 
	#_MdoubÀ_
 
_Flﬂt32


	)

1331 
	#__MATH_DECLARING_DOUBLE
 0

	)

1332 
	#__MATH_DECLARING_FLOATN
 1

	)

1333 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1334 
fun˘i⁄
 ## 
f32
 ## 
ªíå™t


	)

1335 #i‡
__HAVE_DISTINCT_FLOAT32


1336 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1337 
__
 ## 
fun˘i⁄
 ## 
f32
 ## 
ªíå™t
 ## 
_föôe


	)

1339 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1340 
__
 ## 
fun˘i⁄
 ## 
f
 ## 
ªíå™t
 ## 
_föôe


	)

1342 
	~<bôs/m©h-föôe.h
>

1343 #unde‡
_MdoubÀ_


1344 #unde‡
__MATH_DECLARING_DOUBLE


1345 #unde‡
__MATH_DECLARING_FLOATN


1346 #unde‡
__REDIRFROM_X


1347 #unde‡
__REDIRTO_X


1350 #i‡(
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)) \

1351 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1352 
	#_MdoubÀ_
 
_Flﬂt64


	)

1353 
	#__MATH_DECLARING_DOUBLE
 0

	)

1354 
	#__MATH_DECLARING_FLOATN
 1

	)

1355 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1356 
fun˘i⁄
 ## 
f64
 ## 
ªíå™t


	)

1357 #i‡
__HAVE_DISTINCT_FLOAT64


1358 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1359 
__
 ## 
fun˘i⁄
 ## 
f64
 ## 
ªíå™t
 ## 
_föôe


	)

1361 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1362 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1364 
	~<bôs/m©h-föôe.h
>

1365 #unde‡
_MdoubÀ_


1366 #unde‡
__MATH_DECLARING_DOUBLE


1367 #unde‡
__MATH_DECLARING_FLOATN


1368 #unde‡
__REDIRFROM_X


1369 #unde‡
__REDIRTO_X


1372 #i‡(
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)) \

1373 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1374 
	#_MdoubÀ_
 
_Flﬂt128


	)

1375 
	#__MATH_DECLARING_DOUBLE
 0

	)

1376 
	#__MATH_DECLARING_FLOATN
 1

	)

1377 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1378 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t


	)

1379 #i‡
__HAVE_DISTINCT_FLOAT128


1380 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1381 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t
 ## 
_föôe


	)

1383 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1384 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1386 
	~<bôs/m©h-föôe.h
>

1387 #unde‡
_MdoubÀ_


1388 #unde‡
__MATH_DECLARING_DOUBLE


1389 #unde‡
__MATH_DECLARING_FLOATN


1390 #unde‡
__REDIRFROM_X


1391 #unde‡
__REDIRTO_X


1394 #i‡(
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)) \

1395 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1396 
	#_MdoubÀ_
 
_Flﬂt32x


	)

1397 
	#__MATH_DECLARING_DOUBLE
 0

	)

1398 
	#__MATH_DECLARING_FLOATN
 1

	)

1399 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1400 
fun˘i⁄
 ## 
f32x
 ## 
ªíå™t


	)

1401 #i‡
__HAVE_DISTINCT_FLOAT32X


1402 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1403 
__
 ## 
fun˘i⁄
 ## 
f32x
 ## 
ªíå™t
 ## 
_föôe


	)

1405 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1406 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1408 
	~<bôs/m©h-föôe.h
>

1409 #unde‡
_MdoubÀ_


1410 #unde‡
__MATH_DECLARING_DOUBLE


1411 #unde‡
__MATH_DECLARING_FLOATN


1412 #unde‡
__REDIRFROM_X


1413 #unde‡
__REDIRTO_X


1416 #i‡(
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)) \

1417 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1418 
	#_MdoubÀ_
 
_Flﬂt64x


	)

1419 
	#__MATH_DECLARING_DOUBLE
 0

	)

1420 
	#__MATH_DECLARING_FLOATN
 1

	)

1421 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1422 
fun˘i⁄
 ## 
f64x
 ## 
ªíå™t


	)

1423 #i‡
__HAVE_DISTINCT_FLOAT64X


1424 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1425 
__
 ## 
fun˘i⁄
 ## 
f64x
 ## 
ªíå™t
 ## 
_föôe


	)

1426 #ñi‡
__HAVE_FLOAT64X_LONG_DOUBLE


1427 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1428 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1430 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1431 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t
 ## 
_föôe


	)

1433 
	~<bôs/m©h-föôe.h
>

1434 #unde‡
_MdoubÀ_


1435 #unde‡
__MATH_DECLARING_DOUBLE


1436 #unde‡
__MATH_DECLARING_FLOATN


1437 #unde‡
__REDIRFROM_X


1438 #unde‡
__REDIRTO_X


1441 #i‡(
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)) \

1442 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1443 
	#_MdoubÀ_
 
_Flﬂt128x


	)

1444 
	#__MATH_DECLARING_DOUBLE
 0

	)

1445 
	#__MATH_DECLARING_FLOATN
 1

	)

1446 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1447 
fun˘i⁄
 ## 
f128x
 ## 
ªíå™t


	)

1448 #i‡
__HAVE_DISTINCT_FLOAT128X


1449 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1450 
__
 ## 
fun˘i⁄
 ## 
f128x
 ## 
ªíå™t
 ## 
_föôe


	)

1454 
	~<bôs/m©h-föôe.h
>

1455 #unde‡
_MdoubÀ_


1456 #unde‡
__MATH_DECLARING_DOUBLE


1457 #unde‡
__MATH_DECLARING_FLOATN


1458 #unde‡
__REDIRFROM_X


1459 #unde‡
__REDIRTO_X


1464 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

1467 #i‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ > 64

1468 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0L)

	)

1469 #ñi‡
__FLT_EVAL_METHOD__
 == 1 || __FLT_EVAL_METHOD__ > 32

1470 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0)

	)

1471 #ñi‡
__FLT_EVAL_METHOD__
 == 0 || __FLT_EVAL_METHOD__ == 32

1472 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0f)

	)

1474 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (y))

	)

1479 #i‡!
deföed
 
__˝lu•lus
 || (__˝lu•lu†< 201103L && !deföed 
__GNUC__
)

1480 
	#i£qsig
(
x
, 
y
) \

1481 
	`__MATH_TG
 (
	`__MATH_EVAL_FMT2
 (
x
, 
y
), 
__i£qsig
, ((x), (y)))

	)

1494 
ãm∂©e
<
ty≥«me
> 
__i£qsig_ty≥
;

1496 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1498 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1500  
	`__i£qsigf
 (
__x
, 
__y
);

1504 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1506 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1508  
	`__i£qsig
 (
__x
, 
__y
);

1512 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1514 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1516 #i‚de‡
__NO_LONG_DOUBLE_MATH


1517  
	`__i£qsigl
 (
__x
, 
__y
);

1519  
	`__i£qsig
 (
__x
, 
__y
);

1524 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1527 
ãm∂©e
<> 
__i£qsig_ty≥
<
_Flﬂt128
>

1529 
	`__ˇŒ
 (
_Flﬂt128
 
__x
, _Flﬂt128 
__y
Ë
	`throw
 ()

1531  
	`__i£qsigf128
 (
__x
, 
__y
);

1536 
ãm∂©e
<
ty≥«me
 
_T1
,Åy≥«mê
_T2
>

1537 
ölöe
 

1538 
	`i£qsig
 (
_T1
 
__x
, 
_T2
 
__y
Ë
	`throw
 ()

1540 #i‡
__˝lu•lus
 >= 201103L

1541 
	`de˛ty≥
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1543 
	`__ty≥of
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1545  
__i£qsig_ty≥
<
_T3
>::
	`__ˇŒ
 (
__x
, 
__y
);

1548 
	}
}

1553 
__END_DECLS


	@/usr/include/pty.h

19 #i‚de‡
_PTY_H


20 
	#_PTY_H
 1

	)

22 
	~<„©uªs.h
>

24 
	gãrmios
;

25 
	gwösize
;

27 
	~<ãrmios.h
>

28 
	~<sys/io˘l.h
>

31 
__BEGIN_DECLS


36 
	$›í±y
 (*
__ama°î
, *
__a¶ave
, *
__«me
,

37 c⁄° 
ãrmios
 *
__ãrmp
,

38 c⁄° 
wösize
 *
__wöp
Ë
__THROW
;

42 
	$f‹k±y
 (*
__ama°î
, *
__«me
,

43 c⁄° 
ãrmios
 *
__ãrmp
,

44 c⁄° 
wösize
 *
__wöp
Ë
__THROW
;

46 
__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

54 
__uid_t
 
	mpw_uid
;

55 
__gid_t
 
	mpw_gid
;

56 *
	mpw_gecos
;

57 *
	mpw_dú
;

58 *
	mpw_shñl
;

62 #ifde‡
__USE_MISC


63 
	~<bôs/ty≥s/FILE.h
>

67 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_MISC


94 
∑sswd
 *
	$fgëpwít
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

102 
	`puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
	`gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
	$gëpw«m
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

118 #ifde‡
__USE_POSIX


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #ifde‡
__USE_MISC


139 
	$gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

142 
	`__n⁄nuŒ
 ((1, 2, 4));

145 
	$gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

149 
	`__n⁄nuŒ
 ((2, 3, 5));

151 
	$gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

152 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

153 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

154 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

155 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

158 #ifdef 
__USE_MISC


166 
	$fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

167 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

168 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

169 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

170 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

175 #ifde‡
__USE_GNU


184 
	`gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

187 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

160 #ifde‡
__USE_MISC


167 
	#sigmask
(
sig
Ë(()(1u << ((sigË- 1)))

	)

170 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

173 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

180 #ifde‡
__USE_MISC


181 
	#NSIG
 
_NSIG


	)

184 #ifde‡
__USE_GNU


185 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

189 #ifde‡
__USE_MISC


190 
__sigh™dÀr_t
 
	tsig_t
;

193 #ifde‡
__USE_POSIX


196 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

209 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #ifde‡
__USE_GNU


213 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

217 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

220 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

221 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

226 
	~<bôs/siga˘i⁄.h
>

229 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

230 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

237 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

240 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

241 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

244 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__USE_POSIX199506


252 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

253 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__USE_POSIX199309


261 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

262 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

269 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

270 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

271 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

272 
	`__n⁄nuŒ
 ((1));

276 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

277 
__THROW
;

282 #ifde‡
__USE_MISC


286 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

287 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

291 
	~<bôs/sigc⁄ãxt.h
>

294 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

299 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


300 
	#__√ed_size_t


	)

301 
	~<°ddef.h
>

303 
	~<bôs/ty≥s/°ack_t.h
>

304 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


306 
	~<sys/uc⁄ãxt.h
>

310 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


314 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

316 
	~<bôs/sig°ack.h
>

317 
	~<bôs/ss_Êags.h
>

321 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

322 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

325 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

326 || 
deföed
 
__USE_MISC
)

327 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

330 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

331 || 
deföed
 
__USE_MISC
)

335 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

336 
__THROW
 
__©åibuã_dïªˇãd__
;

339 #ifde‡
__USE_XOPEN_EXTENDED


343 
	$sighﬁd
 (
__sig
Ë
__THROW
;

346 
	$sigªl£
 (
__sig
Ë
__THROW
;

349 
	$sigign‹e
 (
__sig
Ë
__THROW
;

352 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

355 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


358 
	~<bôs/±hªadty≥s.h
>

359 
	~<bôs/sigthªad.h
>

366 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

368 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

370 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

371 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

373 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

137 
FILE
 *
°dö
;

138 
FILE
 *
°dout
;

139 
FILE
 *
°dîr
;

141 
	#°dö
 
°dö


	)

142 
	#°dout
 
°dout


	)

143 
	#°dîr
 
°dîr


	)

146 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

148 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

150 #ifde‡
__USE_ATFILE


152 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

153 c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_GNU


158 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

175 #ifde‡
__REDIRECT


176 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

178 
	#tmpfûe
 
tmpfûe64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

187 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

220 #ifde‡
__USE_MISC


227 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

230 #ifde‡
__USE_GNU


237 
	`f˛o£Æl
 ();

241 #i‚de‡
__USE_FILE_OFFSET64


246 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

252 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

253 c⁄° *
__ª°ri˘
 
__modes
,

254 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

256 #ifde‡
__REDIRECT


257 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

258 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

259 
__wur
;

260 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

261 c⁄° *
__ª°ri˘
 
__modes
,

262 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

263 
__wur
;

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 #ifde‡
__USE_LARGEFILE64


270 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

272 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

277 #ifdef 
__USE_POSIX


279 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

286 c⁄° *
__ª°ri˘
 
__modes
,

287 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

290 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

293 
__THROW
 
__wur
;

298 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

308 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
__modes
, 
size_t
 
__n
Ë
__THROW
;

311 #ifdef 
__USE_MISC


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

327 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

332 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

334 
	$•rötf
 (*
__ª°ri˘
 
__s
,

335 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

341 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

342 
__gnuc_va_li°
 
__¨g
);

347 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

349 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

350 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

352 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


354 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

355 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

356 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

358 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

360 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

363 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

366 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

367 
__gnuc_va_li°
 
__¨g
)

368 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

369 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

370 c⁄° *
__ª°ri˘
 
__fmt
, ...)

371 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

372 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

373 c⁄° *
__ª°ri˘
 
__fmt
, ...)

374 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

377 #ifde‡
__USE_XOPEN2K8


379 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

380 
__gnuc_va_li°
 
__¨g
)

381 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

382 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

383 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

391 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

392 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

397 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

399 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

400 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

402 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

403 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

404 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

405 #ifde‡
__REDIRECT


409 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

410 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

411 
__isoc99_fsˇnf
Ë
__wur
;

412 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

413 
__isoc99_sˇnf
Ë
__wur
;

414 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

415 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

416 
__isoc99_ssˇnf
);

418 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

419 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

420 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

421 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

422 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

423 
	#fsˇnf
 
__isoc99_fsˇnf


	)

424 
	#sˇnf
 
__isoc99_sˇnf


	)

425 
	#ssˇnf
 
__isoc99_ssˇnf


	)

429 #ifdef 
__USE_ISOC99


434 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

435 
__gnuc_va_li°
 
__¨g
)

436 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

442 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

443 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

446 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

447 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

448 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

450 #i‡!
deföed
 
__USE_GNU
 \

451 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

452 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

453 #ifde‡
__REDIRECT


457 
	`__REDIRECT
 (
vfsˇnf
,

458 (
FILE
 *
__ª°ri˘
 
__s
,

459 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

460 
__isoc99_vfsˇnf
)

461 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

462 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

463 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

464 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

465 
	`__REDIRECT_NTH
 (
vssˇnf
,

466 (c⁄° *
__ª°ri˘
 
__s
,

467 c⁄° *
__ª°ri˘
 
__f‹m©
,

468 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

469 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

471 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

472 c⁄° *
__ª°ri˘
 
__f‹m©
,

473 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

474 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

475 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

476 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

477 c⁄° *
__ª°ri˘
 
__f‹m©
,

478 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

479 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

480 
	#vsˇnf
 
__isoc99_vsˇnf


	)

481 
	#vssˇnf
 
__isoc99_vssˇnf


	)

491 
	`fgëc
 (
FILE
 *
__°ªam
);

492 
	`gëc
 (
FILE
 *
__°ªam
);

498 
	`gëch¨
 ();

500 #ifde‡
__USE_POSIX199506


505 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

506 
	`gëch¨_u∆ocked
 ();

509 #ifde‡
__USE_MISC


516 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

527 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

528 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

534 
	`putch¨
 (
__c
);

536 #ifde‡
__USE_MISC


543 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 #ifde‡
__USE_POSIX199506


551 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

552 
	`putch¨_u∆ocked
 (
__c
);

556 #i‡
deföed
 
__USE_MISC
 \

557 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

559 
	`gëw
 (
FILE
 *
__°ªam
);

562 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

570 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

571 
__wur
;

573 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

583 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

586 #ifde‡
__USE_GNU


593 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

594 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

598 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

609 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

610 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

611 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

612 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

613 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

614 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

622 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

623 
size_t
 *
__ª°ri˘
 
__n
,

624 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

632 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

638 
	`puts
 (c⁄° *
__s
);

645 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

652 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

658 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

659 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

661 #ifde‡
__USE_GNU


668 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

669 
FILE
 *
__ª°ri˘
 
__°ªam
);

672 #ifde‡
__USE_MISC


679 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

680 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

682 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

690 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

695 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

700 
	`ªwöd
 (
FILE
 *
__°ªam
);

707 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


708 #i‚de‡
__USE_FILE_OFFSET64


713 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

718 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

720 #ifde‡
__REDIRECT


721 
	`__REDIRECT
 (
f£eko
,

722 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

723 
f£eko64
);

724 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

726 
	#f£eko
 
f£eko64


	)

727 
	#·ñlo
 
·ñlo64


	)

732 #i‚de‡
__USE_FILE_OFFSET64


737 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

742 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

744 #ifde‡
__REDIRECT


745 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

746 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

747 
	`__REDIRECT
 (
f£ços
,

748 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

750 
	#fgëpos
 
fgëpos64


	)

751 
	#f£ços
 
f£ços64


	)

755 #ifde‡
__USE_LARGEFILE64


756 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

757 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

758 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

759 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

763 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

765 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

769 #ifde‡
__USE_MISC


771 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

772 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

773 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

781 
	`≥º‹
 (c⁄° *
__s
);

787 
	~<bôs/sys_îæi°.h
>

790 #ifdef 
__USE_POSIX


792 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_MISC


797 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

801 #ifde‡
__USE_POSIX2


806 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

812 
	`p˛o£
 (
FILE
 *
__°ªam
);

816 #ifdef 
__USE_POSIX


818 *
	$˘îmid
 (*
__s
Ë
__THROW
;

822 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


824 *
	`cu£rid
 (*
__s
);

828 #ifdef 
__USE_GNU


829 
ob°ack
;

832 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

833 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

834 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

835 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

836 c⁄° *
__ª°ri˘
 
__f‹m©
,

837 
__gnuc_va_li°
 
__¨gs
)

838 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

842 #ifde‡
__USE_POSIX199506


846 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

853 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

856 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


859 
	~<bôs/gë›t_posix.h
>

864 
	`__uÊow
 (
FILE
 *);

865 
	`__ovîÊow
 (
FILE
 *, );

869 #ifde‡
__USE_EXTERN_INLINES


870 
	~<bôs/°dio.h
>

872 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


873 
	~<bôs/°dio2.h
>

875 #ifde‡
__LDBL_COMPAT


876 
	~<bôs/°dio-ldbl.h
>

879 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

541 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

542 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

549 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

550 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

552 #ifde‡
__USE_GNU


558 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

563 
	$‰ì
 (*
__±r
Ë
__THROW
;

565 #ifde‡
__USE_MISC


566 
	~<Æloˇ.h
>

569 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

570 || 
deföed
 
__USE_MISC


572 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

575 #ifde‡
__USE_XOPEN2K


577 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

581 #ifde‡
__USE_ISOC11


583 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

584 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

588 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

592 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

594 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


596 #ifde‡
__˝lu•lus


597 "C++" 
	`©_quick_exô
 ((*
__func
) ())

598 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

600 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #ifdef 
__USE_MISC


607 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

614 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

616 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


620 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

623 #ifde‡
__USE_ISOC99


626 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_GNU


636 *
	$£cuª_gëív
 (c⁄° *
__«me
)

637 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


644 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

647 #ifde‡
__USE_XOPEN2K


650 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

651 
__THROW
 
	`__n⁄nuŒ
 ((2));

654 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifdef 
__USE_MISC


661 
	$˛óªnv
 (Ë
__THROW
;

665 #i‡
deföed
 
__USE_MISC
 \

666 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

672 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


684 #i‚de‡
__USE_FILE_OFFSET64


685 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

687 #ifde‡
__REDIRECT


688 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

689 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

691 
	#mk°emp
 
mk°emp64


	)

694 #ifde‡
__USE_LARGEFILE64


695 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__USE_MISC


706 #i‚de‡
__USE_FILE_OFFSET64


707 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

711 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

713 
	#mk°emps
 
mk°emps64


	)

716 #ifde‡
__USE_LARGEFILE64


717 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

718 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_XOPEN2K8


728 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

731 #ifde‡
__USE_GNU


738 #i‚de‡
__USE_FILE_OFFSET64


739 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__REDIRECT


742 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

743 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 
	#mko°emp
 
mko°emp64


	)

748 #ifde‡
__USE_LARGEFILE64


749 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

758 #i‚de‡
__USE_FILE_OFFSET64


759 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

760 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

762 #ifde‡
__REDIRECT


763 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

764 
__Êags
), 
mko°emps64
)

765 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

767 
	#mko°emps
 
mko°emps64


	)

770 #ifde‡
__USE_LARGEFILE64


771 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

772 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

784 #ifdef 
__USE_GNU


787 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


797 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

798 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

803 #i‚de‡
__COMPAR_FN_T


804 
	#__COMPAR_FN_T


	)

805 (*
	t__com∑r_‚_t
) (const *, const *);

807 #ifdef 
__USE_GNU


808 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

811 #ifde‡
__USE_GNU


812 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

817 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

818 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

819 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

821 #ifde‡
__USE_EXTERN_INLINES


822 
	~<bôs/°dlib-b£¨ch.h
>

827 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

828 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

829 #ifde‡
__USE_GNU


830 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

832 
	`__n⁄nuŒ
 ((1, 4));

837 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

838 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

840 #ifde‡
__USE_ISOC99


841 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

842 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
div_t
 
	$div
 (
__numî
, 
__díom
)

850 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

852 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 #ifde‡
__USE_ISOC99


855 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

856 
__díom
)

857 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

861 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

862 || 
deföed
 
__USE_MISC


869 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

870 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

875 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

876 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

881 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

882 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

885 #ifde‡
__USE_MISC


887 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

888 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

889 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

894 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

899 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

901 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

902 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

906 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

907 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

908 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

910 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

911 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

912 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

922 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

923 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

926 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

930 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

931 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

934 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

935 
__THROW
;

938 #ifde‡
__USE_MISC


943 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

947 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


954 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

955 *c⁄° *
__ª°ri˘
 
__tokís
,

956 **
__ª°ri˘
 
__vÆuï
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

963 #ifde‡
__USE_XOPEN2KXSI


965 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

968 #ifde‡
__USE_XOPEN_EXTENDED


973 
	$gø¡±
 (
__fd
Ë
__THROW
;

977 
	$u∆ock±
 (
__fd
Ë
__THROW
;

982 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

985 #ifde‡
__USE_GNU


989 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

990 
__THROW
 
	`__n⁄nuŒ
 ((2));

993 
	`gë±
 ();

996 #ifde‡
__USE_MISC


1000 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1001 
__THROW
 
	`__n⁄nuŒ
 ((1));

1004 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1007 
	$ây¶Ÿ
 (Ë
__THROW
;

1010 
	~<bôs/°dlib-Êﬂt.h
>

1013 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1014 
	~<bôs/°dlib.h
>

1016 #ifde‡
__LDBL_COMPAT


1017 
	~<bôs/°dlib-ldbl.h
>

1020 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/ty≥s/sig£t_t.h
>

36 
	~<bôs/ty≥s/time_t.h
>

37 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

38 #ifde‡
__USE_XOPEN2K


39 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

42 #i‚de‡
__su£c⁄ds_t_deföed


43 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

44 
	#__su£c⁄ds_t_deföed


	)

49 
	t__fd_mask
;

52 #unde‡
__NFDBITS


54 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

55 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

56 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

63 #ifde‡
__USE_XOPEN


64 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

65 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

67 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

68 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

70 } 
	tfd_£t
;

73 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

75 #ifde‡
__USE_MISC


77 
__fd_mask
 
	tfd_mask
;

80 
	#NFDBITS
 
__NFDBITS


	)

85 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

86 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

87 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

88 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

91 
__BEGIN_DECLS


101 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

102 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

103 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

104 
timevÆ
 *
__ª°ri˘
 
__timeout
);

106 #ifde‡
__USE_XOPEN2K


113 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

114 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

115 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

116 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

117 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

122 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


123 
	~<bôs/£À˘2.h
>

126 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

42 
__loff_t
 
	tloff_t
;

45 #i‚de‡
__öo_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__öo_t
 
	töo_t
;

49 
__öo64_t
 
	töo_t
;

51 
	#__öo_t_deföed


	)

53 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


54 
__öo64_t
 
	töo64_t
;

55 
	#__öo64_t_deföed


	)

58 #i‚de‡
__dev_t_deföed


59 
__dev_t
 
	tdev_t
;

60 
	#__dev_t_deföed


	)

63 #i‚de‡
__gid_t_deföed


64 
__gid_t
 
	tgid_t
;

65 
	#__gid_t_deföed


	)

68 #i‚de‡
__mode_t_deföed


69 
__mode_t
 
	tmode_t
;

70 
	#__mode_t_deföed


	)

73 #i‚de‡
__∆ök_t_deföed


74 
__∆ök_t
 
	t∆ök_t
;

75 
	#__∆ök_t_deföed


	)

78 #i‚de‡
__uid_t_deföed


79 
__uid_t
 
	tuid_t
;

80 
	#__uid_t_deföed


	)

83 #i‚de‡
__off_t_deföed


84 #i‚de‡
__USE_FILE_OFFSET64


85 
__off_t
 
	toff_t
;

87 
__off64_t
 
	toff_t
;

89 
	#__off_t_deföed


	)

91 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


92 
__off64_t
 
	toff64_t
;

93 
	#__off64_t_deföed


	)

96 #i‚de‡
__pid_t_deföed


97 
__pid_t
 
	tpid_t
;

98 
	#__pid_t_deföed


	)

101 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

102 && !
deföed
 
__id_t_deföed


103 
__id_t
 
	tid_t
;

104 
	#__id_t_deföed


	)

107 #i‚de‡
__ssize_t_deföed


108 
__ssize_t
 
	tssize_t
;

109 
	#__ssize_t_deföed


	)

112 #ifdef 
__USE_MISC


113 #i‚de‡
__daddr_t_deföed


114 
__daddr_t
 
	tdaddr_t
;

115 
__ˇddr_t
 
	tˇddr_t
;

116 
	#__daddr_t_deföed


	)

120 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


121 
__key_t
 
	tkey_t
;

122 
	#__key_t_deföed


	)

125 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


126 
	~<bôs/ty≥s/˛ock_t.h
>

128 
	~<bôs/ty≥s/˛ockid_t.h
>

129 
	~<bôs/ty≥s/time_t.h
>

130 
	~<bôs/ty≥s/timî_t.h
>

132 #ifde‡
__USE_XOPEN


133 #i‚de‡
__u£c⁄ds_t_deföed


134 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

135 
	#__u£c⁄ds_t_deföed


	)

137 #i‚de‡
__su£c⁄ds_t_deföed


138 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

139 
	#__su£c⁄ds_t_deföed


	)

143 
	#__√ed_size_t


	)

144 
	~<°ddef.h
>

146 #ifde‡
__USE_MISC


148 
	tul⁄g
;

149 
	tush‹t
;

150 
	tuöt
;

155 
	~<bôs/°döt-öä.h
>

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 
	tu_öt8_t
;

161 
	tu_öt16_t
;

162 
	tu_öt32_t
;

163 #i‡
__WORDSIZE
 == 64

164 
	tu_öt64_t
;

166 
__exãnsi⁄__
 
	tu_öt64_t
;

169 
	tªgi°î_t
;

174 
	#__u_ötN_t
(
N
, 
MODE
) \

175 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

177 
	t__u_ötN_t
 (8, 
	t__QI__
);

178 
__u_ötN_t
 (16, 
__HI__
);

179 
__u_ötN_t
 (32, 
__SI__
);

180 
__u_ötN_t
 (64, 
__DI__
);

182 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

188 
	#__BIT_TYPES_DEFINED__
 1

	)

191 #ifdef 
__USE_MISC


193 
	~<ídün.h
>

196 
	~<sys/£À˘.h
>

200 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

201 && !
deföed
 
__blksize_t_deföed


202 
__blksize_t
 
	tblksize_t
;

203 
	#__blksize_t_deföed


	)

207 #i‚de‡
__USE_FILE_OFFSET64


208 #i‚de‡
__blk˙t_t_deföed


209 
__blk˙t_t
 
	tblk˙t_t
;

210 
	#__blk˙t_t_deföed


	)

212 #i‚de‡
__fsblk˙t_t_deföed


213 
__fsblk˙t_t
 
	tfsblk˙t_t
;

214 
	#__fsblk˙t_t_deföed


	)

216 #i‚de‡
__fsfû˙t_t_deföed


217 
__fsfû˙t_t
 
	tfsfû˙t_t
;

218 
	#__fsfû˙t_t_deföed


	)

221 #i‚de‡
__blk˙t_t_deföed


222 
__blk˙t64_t
 
	tblk˙t_t
;

223 
	#__blk˙t_t_deföed


	)

225 #i‚de‡
__fsblk˙t_t_deföed


226 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

227 
	#__fsblk˙t_t_deföed


	)

229 #i‚de‡
__fsfû˙t_t_deföed


230 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

231 
	#__fsfû˙t_t_deföed


	)

235 #ifde‡
__USE_LARGEFILE64


236 
__blk˙t64_t
 
	tblk˙t64_t
;

237 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

238 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

243 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


244 
	~<bôs/±hªadty≥s.h
>

247 
	g__END_DECLS


	@/usr/include/sys/wait.h

22 #i‚def 
_SYS_WAIT_H


23 
	#_SYS_WAIT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 #i‚de‡
__pid_t_deföed


31 
__pid_t
 
	tpid_t
;

32 
	#__pid_t_deföed


	)

35 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


36 
	~<sig«l.h
>

39 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


42 
	~<bôs/ty≥s/°ru˘_rußge.h
>

46 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

49 
	~<bôs/waôÊags.h
>

52 
	~<bôs/waô°©us.h
>

54 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

55 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

56 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

57 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

58 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

59 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

60 #ifde‡
__WIFCONTINUED


61 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

65 #ifdef 
__USE_MISC


66 
	#WCOREFLAG
 
__WCOREFLAG


	)

67 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (°©us)

	)

68 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

69 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

73 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


76 
	mP_ALL
,

77 
	mP_PID
,

78 
	mP_PGID


79 } 
	tidty≥_t
;

88 
__pid_t
 
waô
 (*
__°©_loc
);

90 #ifdef 
__USE_MISC


92 
	#WAIT_ANY
 (-1Ë

	)

93 
	#WAIT_MYPGRP
 0

	)

111 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

113 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


114 #i‚de‡
__id_t_deföed


115 
__id_t
 
	tid_t
;

116 
	#__id_t_deföed


	)

119 
	~<bôs/ty≥s/sigöfo_t.h
>

132 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

133 
__›ti⁄s
);

136 #i‡
deföed
 
__USE_MISC
 \

137 || (
deföed
 
	g__USE_XOPEN_EXTENDED
 && !deföed 
	g__USE_XOPEN2K
)

140 
	grußge
;

147 
__pid_t
 
	$waô3
 (*
__°©_loc
, 
__›ti⁄s
,

148 
rußge
 * 
__ußge
Ë
__THROWNL
;

151 #ifde‡
__USE_MISC


153 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, *
__°©_loc
, 
__›ti⁄s
,

154 
rußge
 *
__ußge
Ë
__THROWNL
;

158 
__END_DECLS


	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #ifde‡
__USE_POSIX


128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #ifde‡
__USE_POSIX


149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

178 #ifde‡
__USE_MISC


181 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

187 
	#__i¶óp
(
yór
) \

188 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

191 #ifde‡
__USE_MISC


196 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

199 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

202 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

206 #ifde‡
__USE_POSIX199309


211 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

212 
time•ec
 *
__ªmaöög
);

216 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

219 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

222 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

223 
__THROW
;

225 #ifde‡
__USE_XOPEN2K


230 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

231 c⁄° 
time•ec
 *
__ªq
,

232 
time•ec
 *
__ªm
);

235 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

240 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

241 
sigevít
 *
__ª°ri˘
 
__evp
,

242 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

245 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

248 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

249 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

250 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

253 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

254 
__THROW
;

257 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

261 #ifde‡
__USE_ISOC11


263 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

268 #ifde‡
__USE_XOPEN_EXTENDED


280 
gëd©e_îr
;

289 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

292 #ifde‡
__USE_GNU


303 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

304 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

307 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_MISC


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_MISC


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #ifde‡
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #ifde‡
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_MISC


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #ifde‡
__USE_MISC


784 
	$ây¶Ÿ
 (Ë
__THROW
;

789 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

792 #ifde‡
__USE_ATFILE


795 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

796 c⁄° *
__to
, 
__Êags
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

800 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


802 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

803 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

808 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

809 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

813 #ifde‡
__USE_ATFILE


815 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

816 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

819 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

820 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

825 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

827 #ifde‡
__USE_ATFILE


829 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

830 
__THROW
 
	`__n⁄nuŒ
 ((2));

834 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

841 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

848 *
	`gëlogö
 ();

849 #ifde‡
__USE_POSIX199506


856 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

859 #ifdef 
__USE_MISC


861 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

865 #ifdef 
__USE_POSIX2


869 
	~<bôs/gë›t_posix.h
>

873 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


877 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

881 #i‡
deföed
 
__USE_MISC


884 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

895 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

897 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

904 
	$vh™gup
 (Ë
__THROW
;

907 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

916 
size_t
 
__off£t
, 
__sˇÀ
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1));

923 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

927 *
	$gëu£rshñl
 (Ë
__THROW
;

928 
	$ídu£rshñl
 (Ë
__THROW
;

929 
	$£tu£rshñl
 (Ë
__THROW
;

935 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

939 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

942 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

946 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

954 
	`fsync
 (
__fd
);

957 #ifde‡
__USE_GNU


960 
	$syncfs
 (
__fd
Ë
__THROW
;

964 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


967 
	`gëho°id
 ();

970 
	$sync
 (Ë
__THROW
;

973 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


976 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

981 
	$gëdèbÀsize
 (Ë
__THROW
;

987 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


990 #i‚de‡
__USE_FILE_OFFSET64


991 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

992 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

994 #ifde‡
__REDIRECT_NTH


995 
	`__REDIRECT_NTH
 (
åunˇã
,

996 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

997 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 
	#åunˇã
 
åunˇã64


	)

1002 #ifde‡
__USE_LARGEFILE64


1003 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1009 #i‡
deföed
 
__USE_POSIX199309
 \

1010 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1013 #i‚de‡
__USE_FILE_OFFSET64


1014 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1016 #ifde‡
__REDIRECT_NTH


1017 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1018 
·runˇã64
Ë
__wur
;

1020 
	#·runˇã
 
·runˇã64


	)

1023 #ifde‡
__USE_LARGEFILE64


1024 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1030 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1031 || 
deföed
 
__USE_MISC


1035 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1041 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1045 #ifde‡
__USE_MISC


1056 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1061 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1073 
	#F_ULOCK
 0

	)

1074 
	#F_LOCK
 1

	)

1075 
	#F_TLOCK
 2

	)

1076 
	#F_TEST
 3

	)

1078 #i‚de‡
__USE_FILE_OFFSET64


1079 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1081 #ifde‡
__REDIRECT


1082 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1083 
lockf64
Ë
__wur
;

1085 
	#lockf
 
lockf64


	)

1088 #ifde‡
__USE_LARGEFILE64


1089 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1094 #ifde‡
__USE_GNU


1099 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1100 (
__exãnsi⁄__
 \

1101 ({ 
__ªsu…
; \

1102 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1103 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1104 
__ªsu…
; 
	}
}))

	)

1107 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1108 
__outfd
, 
__off64_t
 *
__poutoff
,

1109 
size_t
 
__Àngth
, 
__Êags
);

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1118 #ifde‡
__USE_MISC


1124 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1125 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 #ifdef 
__USE_XOPEN


1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1141 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1143 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1146 *
	`cu£rid
 (*
__s
);

1152 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1153 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1154 (*
__∑ª¡
) (),

1155 (*
__chûd
Ë()Ë
__THROW
;

1158 #ifde‡
__USE_MISC


1161 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1165 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1166 
	~<bôs/uni°d.h
>

1169 
__END_DECLS


	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


24 
	#_WCHAR_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

30 
	~<bôs/Êﬂä.h
>

32 
	#__√ed_size_t


	)

33 
	#__√ed_wch¨_t


	)

34 
	#__√ed_NULL


	)

35 
	~<°ddef.h
>

37 
	#__√ed___va_li°


	)

38 
	~<°d¨g.h
>

40 
	~<bôs/wch¨.h
>

41 
	~<bôs/ty≥s/wöt_t.h
>

42 
	~<bôs/ty≥s/mb°©e_t.h
>

43 
	~<bôs/ty≥s/__FILE.h
>

45 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


46 
	~<bôs/ty≥s/FILE.h
>

48 #ifde‡
__USE_XOPEN2K8


49 
	~<bôs/ty≥s/loˇÀ_t.h
>

53 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

54 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

57 #i‚de‡
WCHAR_MIN


59 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

60 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

63 #i‚de‡
WEOF


64 
	#WEOF
 (0xffffffffu)

	)

74 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_GNU
 \

75 && !(
deföed
 
	g__USE_XOPEN2K
 && !deföed 
	g__USE_XOPEN2KXSI
))

76 
	~<bôs/w˘y≥-wch¨.h
>

79 
__BEGIN_DECLS


83 
	gtm
;

87 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

88 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

89 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

92 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

93 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

94 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

97 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

98 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

99 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

101 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

102 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

103 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

106 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

109 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

112 #ifde‡
__USE_XOPEN2K8


114 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

117 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

118 
size_t
 
__n
Ë
__THROW
;

122 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

123 
loˇÀ_t
 
__loc
Ë
__THROW
;

125 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

126 
size_t
 
__n
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

131 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

135 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

136 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

138 #ifde‡
__USE_XOPEN2K8


144 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

145 
loˇÀ_t
 
__loc
Ë
__THROW
;

150 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

151 
size_t
 
__n
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

154 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

158 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


159 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

160 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

161 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

162 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

164 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

165 
__THROW
 
__©åibuã_puª__
;

168 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


169 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

170 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

171 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

172 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

174 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

175 
__THROW
 
__©åibuã_puª__
;

178 #ifde‡
__USE_GNU


181 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

182 
__THROW
 
__©åibuã_puª__
;

187 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

188 
__THROW
 
__©åibuã_puª__
;

191 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

192 
__THROW
 
__©åibuã_puª__
;

194 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


195 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

196 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

197 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

198 c⁄° 
wch¨_t
 *
__ac˚±
)

199 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

201 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

202 
__THROW
 
__©åibuã_puª__
;

205 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


206 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

207 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

208 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

209 c⁄° 
wch¨_t
 *
__√edÀ
)

210 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

212 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

213 
__THROW
 
__©åibuã_puª__
;

217 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

218 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

219 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

222 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

224 #ifde‡
__USE_XOPEN


226 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


227 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

228 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

229 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

230 c⁄° 
wch¨_t
 *
__√edÀ
)

231 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

233 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

234 
__THROW
 
__©åibuã_puª__
;

238 #ifde‡
__USE_XOPEN2K8


240 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

241 
__THROW
 
__©åibuã_puª__
;

246 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


247 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

248 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

249 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

250 
size_t
 
__n
)

251 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

253 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

254 
__THROW
 
__©åibuã_puª__
;

258 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

259 
__THROW
 
__©åibuã_puª__
;

262 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

263 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

267 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

268 
__THROW
;

271 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

273 #ifde‡
__USE_GNU


276 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

277 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

278 
__THROW
;

284 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

288 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

292 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

296 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

297 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

298 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

301 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

302 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

305 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

306 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

307 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

308 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

310 #ifde‡
__USE_EXTERN_INLINES


316 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

317 
__exã∫_ölöe
 
wöt_t


318 
	`__NTH
 (
	$btowc
 (
__c
))

319 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

320 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

322 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

323 
__exã∫_ölöe
 

324 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

325 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

326 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

328 
__exã∫_ölöe
 
size_t


329 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

330 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

331 {  (
__ps
 !
NULL


332 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

337 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

338 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

339 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

343 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

344 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

345 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

348 #ifdef 
__USE_XOPEN2K8


351 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

352 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

353 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

357 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

358 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

359 
size_t
 
__nwc
, size_à
__Àn
,

360 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

365 #ifde‡
__USE_XOPEN


367 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

371 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

377 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

378 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

380 #ifde‡
__USE_ISOC99


382 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

383 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

384 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

385 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

390 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


391 
_Flﬂt16
 
	$wc°of16
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

392 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

395 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


396 
_Flﬂt32
 
	$wc°of32
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

397 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

400 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


401 
_Flﬂt64
 
	$wc°of64
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

402 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

405 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


406 
_Flﬂt128
 
	$wc°of128
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

407 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

410 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


411 
_Flﬂt32x
 
	$wc°of32x
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

412 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

415 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


416 
_Flﬂt64x
 
	$wc°of64x
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

417 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

420 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


421 
_Flﬂt128x
 
	$wc°of128x
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

422 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

428 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

429 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

433 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

434 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

435 
__THROW
;

437 #ifde‡
__USE_ISOC99


440 
__exãnsi⁄__


441 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

442 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

443 
__THROW
;

447 
__exãnsi⁄__


448 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

450 
__ba£
Ë
__THROW
;

453 #ifde‡
__USE_GNU


456 
__exãnsi⁄__


457 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

459 
__THROW
;

463 
__exãnsi⁄__


464 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

465 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

466 
__ba£
Ë
__THROW
;

469 #ifde‡
__USE_GNU


473 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

475 
loˇÀ_t
 
__loc
Ë
__THROW
;

477 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

478 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

479 
__ba£
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

481 
__exãnsi⁄__


482 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

483 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

484 
__ba£
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
, 
loˇÀ_t
 
__loc
)

490 
__THROW
;

492 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

493 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

494 
__THROW
;

496 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

497 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

498 
__THROW
;

500 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

502 
loˇÀ_t
 
__loc
Ë
__THROW
;

504 #i‡
__HAVE_FLOAT16


505 
_Flﬂt16
 
	$wc°of16_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
loˇÀ_t
 
__loc
Ë
__THROW
;

510 #i‡
__HAVE_FLOAT32


511 
_Flﬂt32
 
	$wc°of32_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

512 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

513 
loˇÀ_t
 
__loc
Ë
__THROW
;

516 #i‡
__HAVE_FLOAT64


517 
_Flﬂt64
 
	$wc°of64_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

518 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

519 
loˇÀ_t
 
__loc
Ë
__THROW
;

522 #i‡
__HAVE_FLOAT128


523 
_Flﬂt128
 
	$wc°of128_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

524 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

525 
loˇÀ_t
 
__loc
Ë
__THROW
;

528 #i‡
__HAVE_FLOAT32X


529 
_Flﬂt32x
 
	$wc°of32x_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

530 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

531 
loˇÀ_t
 
__loc
Ë
__THROW
;

534 #i‡
__HAVE_FLOAT64X


535 
_Flﬂt64x
 
	$wc°of64x_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

536 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

537 
loˇÀ_t
 
__loc
Ë
__THROW
;

540 #i‡
__HAVE_FLOAT128X


541 
_Flﬂt128x
 
	$wc°of128x_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
loˇÀ_t
 
__loc
Ë
__THROW
;

548 #ifde‡
__USE_XOPEN2K8


551 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

552 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

556 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

557 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

558 
__THROW
;

564 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

567 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

570 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


573 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

580 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

581 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

587 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

590 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

591 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

592 
__THROW
 ;

598 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

599 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

600 
__gnuc_va_li°
 
__¨g
)

606 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

607 
__gnuc_va_li°
 
__¨g
)

611 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

612 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

613 
__gnuc_va_li°
 
__¨g
)

614 
__THROW
 ;

621 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

622 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

628 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

631 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

632 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

633 
__THROW
 ;

635 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

636 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

637 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

638 #ifde‡
__REDIRECT


642 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

643 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

644 
__isoc99_fwsˇnf
)

646 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

647 
__isoc99_wsˇnf
)

649 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

650 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

651 ...), 
__isoc99_swsˇnf
)

654 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

656 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

657 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

658 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

659 
__THROW
;

660 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

661 
	#wsˇnf
 
__isoc99_wsˇnf


	)

662 
	#swsˇnf
 
__isoc99_swsˇnf


	)

668 #ifde‡
__USE_ISOC99


673 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

674 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

675 
__gnuc_va_li°
 
__¨g
)

681 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

682 
__gnuc_va_li°
 
__¨g
)

685 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

686 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

687 
__gnuc_va_li°
 
__¨g
)

688 
__THROW
 ;

690 #i‡!
deföed
 
__USE_GNU
 \

691 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

692 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

693 #ifde‡
__REDIRECT


694 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

695 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

698 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

699 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

701 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

706 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

707 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

708 
__gnuc_va_li°
 
__¨g
);

709 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
);

711 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

712 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

714 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

715 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

716 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

727 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

728 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

734 
wöt_t
 
	`gëwch¨
 ();

741 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

742 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

748 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

756 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

757 
__FILE
 *
__ª°ri˘
 
__°ªam
);

763 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

764 
__FILE
 *
__ª°ri˘
 
__°ªam
);

771 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

774 #ifde‡
__USE_GNU


782 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

783 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

791 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

808 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

809 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

818 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

819 
__FILE
 *
__ª°ri˘
 
__°ªam
);

827 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

828 
__FILE
 *
__ª°ri˘
 
__°ªam
);

835 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

836 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

837 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

839 #ifde‡
__USE_GNU


842 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

843 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

844 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

845 
loˇÀ_t
 
__loc
Ë
__THROW
;

849 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


850 
	~<bôs/wch¨2.h
>

853 #ifde‡
__LDBL_COMPAT


854 
	~<bôs/wch¨-ldbl.h
>

857 
__END_DECLS


	@/usr/include/X11/X.h

3 #i‚de‡
X_H


4 
	#X_H


	)

53 
	#X_PROTOCOL
 11

	)

54 
	#X_PROTOCOL_REVISION
 0

	)

63 #i‚de‡
_XSERVER64


64 #i‚de‡
_XTYPEDEF_XID


65 
	#_XTYPEDEF_XID


	)

66 
	tXID
;

68 #i‚de‡
_XTYPEDEF_MASK


69 
	#_XTYPEDEF_MASK


	)

70 
	tMask
;

72 #i‚de‡
_XTYPEDEF_ATOM


73 
	#_XTYPEDEF_ATOM


	)

74 
	tAtom
;

76 
	tVisuÆID
;

77 
	tTime
;

79 
	~<X11/Xmd.h
>

80 #i‚de‡
_XTYPEDEF_XID


81 
	#_XTYPEDEF_XID


	)

82 
CARD32
 
	tXID
;

84 #i‚de‡
_XTYPEDEF_MASK


85 
	#_XTYPEDEF_MASK


	)

86 
CARD32
 
	tMask
;

88 #i‚de‡
_XTYPEDEF_ATOM


89 
	#_XTYPEDEF_ATOM


	)

90 
CARD32
 
	tAtom
;

92 
CARD32
 
	tVisuÆID
;

93 
CARD32
 
	tTime
;

96 
XID
 
	tWödow
;

97 
XID
 
	tDøwabÀ
;

98 #i‚de‡
_XTYPEDEF_FONT


99 
	#_XTYPEDEF_FONT


	)

100 
XID
 
	tF⁄t
;

102 
XID
 
	tPixm≠
;

103 
XID
 
	tCurs‹
;

104 
XID
 
	tCﬁ‹m≠
;

105 
XID
 
	tGC⁄ãxt
;

106 
XID
 
	tKeySym
;

108 
	tKeyCode
;

114 #i‚de‡
N⁄e


115 
	#N⁄e
 0L

	)

118 
	#P¨ítRñ©ive
 1L

	)

121 
	#C›yFromP¨ít
 0L

	)

126 
	#PoöãrWödow
 0L

	)

127 
	#I≈utFocus
 1L

	)

129 
	#PoöãrRoŸ
 1L

	)

131 
	#AnyPr›îtyTy≥
 0L

	)

133 
	#AnyKey
 0L

	)

135 
	#AnyBuâ⁄
 0L

	)

137 
	#AŒTemp‹¨y
 0L

	)

139 
	#CuºítTime
 0L

	)

141 
	#NoSymbﬁ
 0L

	)

150 
	#NoEvítMask
 0L

	)

151 
	#KeyPªssMask
 (1L<<0)

	)

152 
	#KeyRñó£Mask
 (1L<<1)

	)

153 
	#Buâ⁄PªssMask
 (1L<<2)

	)

154 
	#Buâ⁄Rñó£Mask
 (1L<<3)

	)

155 
	#E¡îWödowMask
 (1L<<4)

	)

156 
	#LóveWödowMask
 (1L<<5)

	)

157 
	#PoöãrMŸi⁄Mask
 (1L<<6)

	)

158 
	#PoöãrMŸi⁄HötMask
 (1L<<7)

	)

159 
	#Buâ⁄1MŸi⁄Mask
 (1L<<8)

	)

160 
	#Buâ⁄2MŸi⁄Mask
 (1L<<9)

	)

161 
	#Buâ⁄3MŸi⁄Mask
 (1L<<10)

	)

162 
	#Buâ⁄4MŸi⁄Mask
 (1L<<11)

	)

163 
	#Buâ⁄5MŸi⁄Mask
 (1L<<12)

	)

164 
	#Buâ⁄MŸi⁄Mask
 (1L<<13)

	)

165 
	#Keym≠SèãMask
 (1L<<14)

	)

166 
	#ExposuªMask
 (1L<<15)

	)

167 
	#VisibûôyCh™geMask
 (1L<<16)

	)

168 
	#Såu˘uªNŸifyMask
 (1L<<17)

	)

169 
	#ResizeRedúe˘Mask
 (1L<<18)

	)

170 
	#Sub°ru˘uªNŸifyMask
 (1L<<19)

	)

171 
	#Sub°ru˘uªRedúe˘Mask
 (1L<<20)

	)

172 
	#FocusCh™geMask
 (1L<<21)

	)

173 
	#Pr›îtyCh™geMask
 (1L<<22)

	)

174 
	#Cﬁ‹m≠Ch™geMask
 (1L<<23)

	)

175 
	#Ow√rGøbBuâ⁄Mask
 (1L<<24)

	)

181 
	#KeyPªss
 2

	)

182 
	#KeyRñó£
 3

	)

183 
	#Buâ⁄Pªss
 4

	)

184 
	#Buâ⁄Rñó£
 5

	)

185 
	#MŸi⁄NŸify
 6

	)

186 
	#E¡îNŸify
 7

	)

187 
	#LóveNŸify
 8

	)

188 
	#FocusIn
 9

	)

189 
	#FocusOut
 10

	)

190 
	#Keym≠NŸify
 11

	)

191 
	#Expo£
 12

	)

192 
	#GøphicsExpo£
 13

	)

193 
	#NoExpo£
 14

	)

194 
	#VisibûôyNŸify
 15

	)

195 
	#Cª©eNŸify
 16

	)

196 
	#De°royNŸify
 17

	)

197 
	#Unm≠NŸify
 18

	)

198 
	#M≠NŸify
 19

	)

199 
	#M≠Reque°
 20

	)

200 
	#Rï¨ítNŸify
 21

	)

201 
	#C⁄figuªNŸify
 22

	)

202 
	#C⁄figuªReque°
 23

	)

203 
	#GøvôyNŸify
 24

	)

204 
	#ResizeReque°
 25

	)

205 
	#CúcuœãNŸify
 26

	)

206 
	#CúcuœãReque°
 27

	)

207 
	#Pr›îtyNŸify
 28

	)

208 
	#Sñe˘i⁄CÀ¨
 29

	)

209 
	#Sñe˘i⁄Reque°
 30

	)

210 
	#Sñe˘i⁄NŸify
 31

	)

211 
	#Cﬁ‹m≠NŸify
 32

	)

212 
	#Clõ¡Mesßge
 33

	)

213 
	#M≠pögNŸify
 34

	)

214 
	#GíîicEvít
 35

	)

215 
	#LASTEvít
 36

	)

221 
	#Shi·Mask
 (1<<0)

	)

222 
	#LockMask
 (1<<1)

	)

223 
	#C⁄åﬁMask
 (1<<2)

	)

224 
	#Mod1Mask
 (1<<3)

	)

225 
	#Mod2Mask
 (1<<4)

	)

226 
	#Mod3Mask
 (1<<5)

	)

227 
	#Mod4Mask
 (1<<6)

	)

228 
	#Mod5Mask
 (1<<7)

	)

233 
	#Shi·M≠Index
 0

	)

234 
	#LockM≠Index
 1

	)

235 
	#C⁄åﬁM≠Index
 2

	)

236 
	#Mod1M≠Index
 3

	)

237 
	#Mod2M≠Index
 4

	)

238 
	#Mod3M≠Index
 5

	)

239 
	#Mod4M≠Index
 6

	)

240 
	#Mod5M≠Index
 7

	)

246 
	#Buâ⁄1Mask
 (1<<8)

	)

247 
	#Buâ⁄2Mask
 (1<<9)

	)

248 
	#Buâ⁄3Mask
 (1<<10)

	)

249 
	#Buâ⁄4Mask
 (1<<11)

	)

250 
	#Buâ⁄5Mask
 (1<<12)

	)

252 
	#AnyModifõr
 (1<<15Ë

	)

259 
	#Buâ⁄1
 1

	)

260 
	#Buâ⁄2
 2

	)

261 
	#Buâ⁄3
 3

	)

262 
	#Buâ⁄4
 4

	)

263 
	#Buâ⁄5
 5

	)

267 
	#NŸifyN‹mÆ
 0

	)

268 
	#NŸifyGøb
 1

	)

269 
	#NŸifyUngøb
 2

	)

270 
	#NŸifyWhûeGøbbed
 3

	)

272 
	#NŸifyHöt
 1

	)

276 
	#NŸifyAn˚°‹
 0

	)

277 
	#NŸifyVútuÆ
 1

	)

278 
	#NŸifyIn„ri‹
 2

	)

279 
	#NŸifyN⁄löór
 3

	)

280 
	#NŸifyN⁄löórVútuÆ
 4

	)

281 
	#NŸifyPoöãr
 5

	)

282 
	#NŸifyPoöãrRoŸ
 6

	)

283 
	#NŸifyDëaûN⁄e
 7

	)

287 
	#VisibûôyUnobscuªd
 0

	)

288 
	#VisibûôyP¨tüŒyObscuªd
 1

	)

289 
	#VisibûôyFuŒyObscuªd
 2

	)

293 
	#Pœ˚OnT›
 0

	)

294 
	#Pœ˚OnBŸtom
 1

	)

298 
	#FamûyI¡î√t
 0

	)

299 
	#FamûyDEC√t
 1

	)

300 
	#FamûyChaos
 2

	)

301 
	#FamûyI¡î√t6
 6

	)

304 
	#FamûySîvîI¡î¥ëed
 5

	)

308 
	#Pr›îtyNewVÆue
 0

	)

309 
	#Pr›îtyDñëe
 1

	)

313 
	#Cﬁ‹m≠Unö°ÆÀd
 0

	)

314 
	#Cﬁ‹m≠In°ÆÀd
 1

	)

318 
	#GøbModeSync
 0

	)

319 
	#GøbModeAsync
 1

	)

323 
	#GøbSuc˚ss
 0

	)

324 
	#AÃódyGøbbed
 1

	)

325 
	#GøbInvÆidTime
 2

	)

326 
	#GøbNŸVõwabÀ
 3

	)

327 
	#GøbFrozí
 4

	)

331 
	#AsyncPoöãr
 0

	)

332 
	#SyncPoöãr
 1

	)

333 
	#RïœyPoöãr
 2

	)

334 
	#AsyncKeybﬂrd
 3

	)

335 
	#SyncKeybﬂrd
 4

	)

336 
	#RïœyKeybﬂrd
 5

	)

337 
	#AsyncBŸh
 6

	)

338 
	#SyncBŸh
 7

	)

342 
	#RevîtToN⁄e
 ()
N⁄e


	)

343 
	#RevîtToPoöãrRoŸ
 ()
PoöãrRoŸ


	)

344 
	#RevîtToP¨ít
 2

	)

350 
	#Suc˚ss
 0

	)

351 
	#BadReque°
 1

	)

352 
	#BadVÆue
 2

	)

353 
	#BadWödow
 3

	)

354 
	#BadPixm≠
 4

	)

355 
	#BadAtom
 5

	)

356 
	#BadCurs‹
 6

	)

357 
	#BadF⁄t
 7

	)

358 
	#BadM©ch
 8

	)

359 
	#BadDøwabÀ
 9

	)

360 
	#BadAc˚ss
 10

	)

369 
	#BadAŒoc
 11

	)

370 
	#BadCﬁ‹
 12

	)

371 
	#BadGC
 13

	)

372 
	#BadIDChoi˚
 14

	)

373 
	#BadName
 15

	)

374 
	#BadLígth
 16

	)

375 
	#BadIm∂emíèti⁄
 17

	)

377 
	#Fú°Exãnsi⁄Eº‹
 128

	)

378 
	#La°Exãnsi⁄Eº‹
 255

	)

387 
	#I≈utOuçut
 1

	)

388 
	#I≈utO∆y
 2

	)

392 
	#CWBackPixm≠
 (1L<<0)

	)

393 
	#CWBackPixñ
 (1L<<1)

	)

394 
	#CWB‹dîPixm≠
 (1L<<2)

	)

395 
	#CWB‹dîPixñ
 (1L<<3)

	)

396 
	#CWBôGøvôy
 (1L<<4)

	)

397 
	#CWWöGøvôy
 (1L<<5)

	)

398 
	#CWBackögSt‹e
 (1L<<6)

	)

399 
	#CWBackögPœ√s
 (1L<<7)

	)

400 
	#CWBackögPixñ
 (1L<<8)

	)

401 
	#CWOvîrideRedúe˘
 (1L<<9)

	)

402 
	#CWSaveUndî
 (1L<<10)

	)

403 
	#CWEvítMask
 (1L<<11)

	)

404 
	#CWD⁄tPr›ag©e
 (1L<<12)

	)

405 
	#CWCﬁ‹m≠
 (1L<<13)

	)

406 
	#CWCurs‹
 (1L<<14)

	)

410 
	#CWX
 (1<<0)

	)

411 
	#CWY
 (1<<1)

	)

412 
	#CWWidth
 (1<<2)

	)

413 
	#CWHeight
 (1<<3)

	)

414 
	#CWB‹dîWidth
 (1<<4)

	)

415 
	#CWSiblög
 (1<<5)

	)

416 
	#CWSèckMode
 (1<<6)

	)

421 
	#F‹gëGøvôy
 0

	)

422 
	#N‹thWe°Gøvôy
 1

	)

423 
	#N‹thGøvôy
 2

	)

424 
	#N‹thEa°Gøvôy
 3

	)

425 
	#We°Gøvôy
 4

	)

426 
	#CíãrGøvôy
 5

	)

427 
	#Ea°Gøvôy
 6

	)

428 
	#SouthWe°Gøvôy
 7

	)

429 
	#SouthGøvôy
 8

	)

430 
	#SouthEa°Gøvôy
 9

	)

431 
	#SèticGøvôy
 10

	)

435 
	#Unm≠Gøvôy
 0

	)

439 
	#NŸU£ful
 0

	)

440 
	#WhíM≠≥d
 1

	)

441 
	#Always
 2

	)

445 
	#IsUnm≠≥d
 0

	)

446 
	#IsUnvõwabÀ
 1

	)

447 
	#IsVõwabÀ
 2

	)

451 
	#SëModeIn£π
 0

	)

452 
	#SëModeDñëe
 1

	)

456 
	#De°royAŒ
 0

	)

457 
	#RëaöPîm™ít
 1

	)

458 
	#RëaöTemp‹¨y
 2

	)

462 
	#Above
 0

	)

463 
	#Bñow
 1

	)

464 
	#T›If
 2

	)

465 
	#BŸtomIf
 3

	)

466 
	#Oµosôe
 4

	)

470 
	#Rai£Lowe°
 0

	)

471 
	#LowîHighe°
 1

	)

475 
	#Pr›ModeRïœ˚
 0

	)

476 
	#Pr›ModePª≥nd
 1

	)

477 
	#Pr›ModeAµíd
 2

	)

485 
	#GX˛ór
 0x0

	)

486 
	#GX™d
 0x1

	)

487 
	#GX™dRevî£
 0x2

	)

488 
	#GXc›y
 0x3

	)

489 
	#GX™dInvîãd
 0x4

	)

490 
	#GXno›
 0x5

	)

491 
	#GXx‹
 0x6

	)

492 
	#GX‹
 0x7

	)

493 
	#GXn‹
 0x8

	)

494 
	#GXequiv
 0x9

	)

495 
	#GXövît
 0x®

	)

496 
	#GX‹Revî£
 0xb

	)

497 
	#GXc›yInvîãd
 0x¯

	)

498 
	#GX‹Invîãd
 0xd

	)

499 
	#GX«nd
 0xê

	)

500 
	#GX£t
 0x‡

	)

504 
	#LöeSﬁid
 0

	)

505 
	#LöeOnOffDash
 1

	)

506 
	#LöeDoubÀDash
 2

	)

510 
	#C≠NŸLa°
 0

	)

511 
	#C≠Buâ
 1

	)

512 
	#C≠Round
 2

	)

513 
	#C≠Proje˘ög
 3

	)

517 
	#JoöMôî
 0

	)

518 
	#JoöRound
 1

	)

519 
	#JoöBevñ
 2

	)

523 
	#FûlSﬁid
 0

	)

524 
	#FûlTûed
 1

	)

525 
	#FûlStù∂ed
 2

	)

526 
	#FûlO∑queStù∂ed
 3

	)

530 
	#EvíOddRuÀ
 0

	)

531 
	#WödögRuÀ
 1

	)

535 
	#ClùByChûdªn
 0

	)

536 
	#In˛udeIn„ri‹s
 1

	)

540 
	#Uns‹ãd
 0

	)

541 
	#YS‹ãd
 1

	)

542 
	#YXS‹ãd
 2

	)

543 
	#YXB™ded
 3

	)

547 
	#Co‹dModeOrigö
 0

	)

548 
	#Co‹dModePªvious
 1

	)

552 
	#Com∂ex
 0

	)

553 
	#N⁄c⁄vex
 1

	)

554 
	#C⁄vex
 2

	)

558 
	#ArcCh‹d
 0

	)

559 
	#ArcPõSli˚
 1

	)

564 
	#GCFun˘i⁄
 (1L<<0)

	)

565 
	#GCPœ√Mask
 (1L<<1)

	)

566 
	#GCF‹eground
 (1L<<2)

	)

567 
	#GCBackground
 (1L<<3)

	)

568 
	#GCLöeWidth
 (1L<<4)

	)

569 
	#GCLöeStyÀ
 (1L<<5)

	)

570 
	#GCC≠StyÀ
 (1L<<6)

	)

571 
	#GCJoöStyÀ
 (1L<<7)

	)

572 
	#GCFûlStyÀ
 (1L<<8)

	)

573 
	#GCFûlRuÀ
 (1L<<9)

	)

574 
	#GCTûe
 (1L<<10)

	)

575 
	#GCStù∂e
 (1L<<11)

	)

576 
	#GCTûeStùXOrigö
 (1L<<12)

	)

577 
	#GCTûeStùYOrigö
 (1L<<13)

	)

578 
	#GCF⁄t
 (1L<<14)

	)

579 
	#GCSubwödowMode
 (1L<<15)

	)

580 
	#GCGøphicsExposuªs
 (1L<<16)

	)

581 
	#GCClùXOrigö
 (1L<<17)

	)

582 
	#GCClùYOrigö
 (1L<<18)

	)

583 
	#GCClùMask
 (1L<<19)

	)

584 
	#GCDashOff£t
 (1L<<20)

	)

585 
	#GCDashLi°
 (1L<<21)

	)

586 
	#GCArcMode
 (1L<<22)

	)

588 
	#GCLa°Bô
 22

	)

595 
	#F⁄tLe·ToRight
 0

	)

596 
	#F⁄tRightToLe·
 1

	)

598 
	#F⁄tCh™ge
 255

	)

606 
	#XYBôm≠
 0

	)

607 
	#XYPixm≠
 1

	)

608 
	#ZPixm≠
 2

	)

616 
	#AŒocN⁄e
 0

	)

617 
	#AŒocAŒ
 1

	)

622 
	#DoRed
 (1<<0)

	)

623 
	#DoGªí
 (1<<1)

	)

624 
	#DoBlue
 (1<<2)

	)

632 
	#Curs‹Sh≠e
 0

	)

633 
	#TûeSh≠e
 1

	)

634 
	#Stù∂eSh≠e
 2

	)

640 
	#AutoRïótModeOff
 0

	)

641 
	#AutoRïótModeOn
 1

	)

642 
	#AutoRïótModeDeÁu…
 2

	)

644 
	#LedModeOff
 0

	)

645 
	#LedModeOn
 1

	)

649 
	#KBKeyClickPî˚¡
 (1L<<0)

	)

650 
	#KBBñlPî˚¡
 (1L<<1)

	)

651 
	#KBBñlPôch
 (1L<<2)

	)

652 
	#KBBñlDuøti⁄
 (1L<<3)

	)

653 
	#KBLed
 (1L<<4)

	)

654 
	#KBLedMode
 (1L<<5)

	)

655 
	#KBKey
 (1L<<6)

	)

656 
	#KBAutoRïótMode
 (1L<<7)

	)

658 
	#M≠pögSuc˚ss
 0

	)

659 
	#M≠pögBusy
 1

	)

660 
	#M≠pögFaûed
 2

	)

662 
	#M≠pögModifõr
 0

	)

663 
	#M≠pögKeybﬂrd
 1

	)

664 
	#M≠pögPoöãr
 2

	)

670 
	#D⁄tPª„rBœnkög
 0

	)

671 
	#Pª„rBœnkög
 1

	)

672 
	#DeÁu…Bœnkög
 2

	)

674 
	#DißbÀS¸ìnSavî
 0

	)

675 
	#DißbÀS¸ìnI¡îvÆ
 0

	)

677 
	#D⁄tAŒowExposuªs
 0

	)

678 
	#AŒowExposuªs
 1

	)

679 
	#DeÁu…Exposuªs
 2

	)

683 
	#S¸ìnSavîRe£t
 0

	)

684 
	#S¸ìnSavîA˘ive
 1

	)

692 
	#Ho°In£π
 0

	)

693 
	#Ho°Dñëe
 1

	)

697 
	#E«bÀAc˚ss
 1

	)

698 
	#DißbÀAc˚ss
 0

	)

704 
	#SèticGøy
 0

	)

705 
	#GøySˇÀ
 1

	)

706 
	#SèticCﬁ‹
 2

	)

707 
	#P£udoCﬁ‹
 3

	)

708 
	#TrueCﬁ‹
 4

	)

709 
	#Dúe˘Cﬁ‹
 5

	)

714 
	#LSBFú°
 0

	)

715 
	#MSBFú°
 1

	)

	@/usr/include/X11/Xft/XftCompat.h

23 #i‚de‡
_XFTCOMPAT_H_


24 
	#_XFTCOMPAT_H_


	)

25 
	~<X11/Xfun˝rŸo.h
>

31 
FcCh¨8
 
	tX·Ch¨8
;

32 
FcCh¨16
 
	tX·Ch¨16
;

33 
FcCh¨32
 
	tX·Ch¨32
;

35 
	#XFT_FAMILY
 
FC_FAMILY


	)

36 
	#XFT_STYLE
 
FC_STYLE


	)

37 
	#XFT_SLANT
 
FC_SLANT


	)

38 
	#XFT_WEIGHT
 
FC_WEIGHT


	)

39 
	#XFT_SIZE
 
FC_SIZE


	)

40 
	#XFT_PIXEL_SIZE
 
FC_PIXEL_SIZE


	)

41 
	#XFT_SPACING
 
FC_SPACING


	)

42 
	#XFT_FOUNDRY
 
FC_FOUNDRY


	)

43 
	#XFT_ANTIALIAS
 
FC_ANTIALIAS


	)

44 
	#XFT_FILE
 
FC_FILE


	)

45 
	#XFT_INDEX
 
FC_INDEX


	)

46 
	#XFT_RASTERIZER
 
FC_RASTERIZER


	)

47 
	#XFT_OUTLINE
 
FC_OUTLINE


	)

48 
	#XFT_SCALABLE
 
FC_SCALABLE


	)

49 
	#XFT_RGBA
 
FC_RGBA


	)

52 
	#XFT_SCALE
 
FC_SCALE


	)

53 
	#XFT_MINSPACE
 
FC_MINSPACE


	)

54 
	#XFT_DPI
 
FC_DPI


	)

57 
	#XFT_CHAR_WIDTH
 
FC_CHAR_WIDTH


	)

58 
	#XFT_CHAR_HEIGHT
 
FC_CHAR_HEIGHT


	)

59 
	#XFT_MATRIX
 
FC_MATRIX


	)

61 
	#XFT_WEIGHT_LIGHT
 
FC_WEIGHT_LIGHT


	)

62 
	#XFT_WEIGHT_MEDIUM
 
FC_WEIGHT_MEDIUM


	)

63 
	#XFT_WEIGHT_DEMIBOLD
 
FC_WEIGHT_DEMIBOLD


	)

64 
	#XFT_WEIGHT_BOLD
 
FC_WEIGHT_BOLD


	)

65 
	#XFT_WEIGHT_BLACK
 
FC_WEIGHT_BLACK


	)

67 
	#XFT_SLANT_ROMAN
 
FC_SLANT_ROMAN


	)

68 
	#XFT_SLANT_ITALIC
 
FC_SLANT_ITALIC


	)

69 
	#XFT_SLANT_OBLIQUE
 
FC_SLANT_OBLIQUE


	)

71 
	#XFT_PROPORTIONAL
 
FC_PROPORTIONAL


	)

72 
	#XFT_MONO
 
FC_MONO


	)

73 
	#XFT_CHARCELL
 
FC_CHARCELL


	)

75 
	#XFT_RGBA_UNKNOWN
 
FC_RGBA_UNKNOWN


	)

76 
	#XFT_RGBA_RGB
 
FC_RGBA_RGB


	)

77 
	#XFT_RGBA_BGR
 
FC_RGBA_BGR


	)

78 
	#XFT_RGBA_VRGB
 
FC_RGBA_VRGB


	)

79 
	#XFT_RGBA_VBGR
 
FC_RGBA_VBGR


	)

80 
	#XFT_RGBA_NONE
 
FC_RGBA_NONE


	)

85 
	#XFT_ENCODING
 "ícodög"

	)

87 
FcTy≥
 
	tX·Ty≥
;

89 
FcM©rix
 
	tX·M©rix
;

91 
	#X·M©rixInô
(
m
Ë
	`FcM©rixInô
(m)

	)

93 
FcResu…
 
	tX·Resu…
;

95 
	#X·Resu…M©ch
 
FcResu…M©ch


	)

96 
	#X·Resu…NoM©ch
 
FcResu…NoM©ch


	)

97 
	#X·Resu…Ty≥Mism©ch
 
FcResu…Ty≥Mism©ch


	)

98 
	#X·Resu…NoId
 
FcResu…NoId


	)

100 
FcVÆue
 
	tX·VÆue
;

101 
FcP©ã∫
 
	tX·P©ã∫
;

102 
FcF⁄tSë
 
	tX·F⁄tSë
;

103 
FcObje˘Së
 
	tX·Obje˘Së
;

105 
	#X·GlyphExi°s
 
X·Ch¨Exi°s


	)

107 
	#X·Obje˘SëCª©e
 
FcObje˘SëCª©e


	)

108 
	#X·Obje˘SëAdd
 
FcObje˘SëAdd


	)

109 
	#X·Obje˘SëDe°roy
 
FcObje˘SëDe°roy


	)

110 
	#X·Obje˘SëVaBuûd
 
FcObje˘SëVaBuûd


	)

111 
	#X·Obje˘SëBuûd
 
FcObje˘SëBuûd


	)

113 
	#X·F⁄tSëM©ch
 
FcF⁄tSëM©ch


	)

114 
	#X·F⁄tSëDe°roy
 
FcF⁄tSëDe°roy


	)

116 
	#X·M©rixEquÆ
 
FcM©rixEquÆ


	)

117 
	#X·M©rixMu…ùly
 
FcM©rixMu…ùly


	)

118 
	#X·M©rixRŸ©e
 
FcM©rixRŸ©e


	)

119 
	#X·M©rixSˇÀ
 
FcM©rixSˇÀ


	)

120 
	#X·M©rixShór
 
FcM©rixShór


	)

122 
	#X·P©ã∫Cª©e
 
FcP©ã∫Cª©e


	)

123 
	#X·P©ã∫Du∂iˇã
 
FcP©ã∫Du∂iˇã


	)

124 
	#X·VÆueDe°roy
 
FcVÆueDe°roy


	)

125 
	#X·VÆueLi°De°roy
 
FcVÆueLi°De°roy


	)

126 
	#X·P©ã∫De°roy
 
FcP©ã∫De°roy


	)

127 
	#X·P©ã∫Föd
 
FcP©ã∫Föd


	)

128 
	#X·P©ã∫Add
 
FcP©ã∫Add


	)

129 
	#X·P©ã∫Gë
 
FcP©ã∫Gë


	)

130 
	#X·P©ã∫Dñ
 
FcP©ã∫Dñ


	)

131 
	#X·P©ã∫AddI¡egî
 
FcP©ã∫AddI¡egî


	)

132 
	#X·P©ã∫AddDoubÀ
 
FcP©ã∫AddDoubÀ


	)

133 
	#X·P©ã∫AddSåög
(
p
,
e
,
s
Ë
	`FcP©ã∫AddSåög
’,e,(
FcCh¨8
 *)(s))

	)

134 
	#X·P©ã∫AddM©rix
 
FcP©ã∫AddM©rix


	)

135 
	#X·P©ã∫AddBoﬁ
 
FcP©ã∫AddBoﬁ


	)

136 
	#X·P©ã∫GëI¡egî
 
FcP©ã∫GëI¡egî


	)

137 
	#X·P©ã∫GëDoubÀ
 
FcP©ã∫GëDoubÀ


	)

138 
	#X·P©ã∫GëSåög
(
p
,
e
,
i
,
n
Ë
	`FcP©ã∫GëSåög
’,e,i,(
FcCh¨8
 **Ë“))

	)

139 
	#X·P©ã∫GëM©rix
 
FcP©ã∫GëM©rix


	)

140 
	#X·P©ã∫GëBoﬁ
 
FcP©ã∫GëBoﬁ


	)

141 
	#X·P©ã∫VaBuûd
 
FcP©ã∫VaBuûd


	)

142 
	#X·P©ã∫Buûd
 
FcP©ã∫Buûd


	)

144 
	#X·Utf8ToUcs4
 
FcUtf8ToUcs4


	)

145 
	#X·Utf8Lí
 
FcUtf8Lí


	)

147 
	#X·Ty≥Void
 
FcTy≥Void


	)

148 
	#X·Ty≥I¡egî
 
FcTy≥I¡egî


	)

149 
	#X·Ty≥DoubÀ
 
FcTy≥DoubÀ


	)

150 
	#X·Ty≥Såög
 
FcTy≥Såög


	)

151 
	#X·Ty≥Boﬁ
 
FcTy≥Boﬁ


	)

152 
	#X·Ty≥M©rix
 
FcTy≥M©rix


	)

154 
	#X·C⁄figSub°ôuã
(
p
Ë
	`FcC⁄figSub°ôuã
 (0,Ö, 
FcM©chP©ã∫
)

	)

156 
_XFUNCPROTOBEGIN


158 
FcBoﬁ


159 
X·NameU≈¨£
 (
X·P©ã∫
 *
∑t
, *
de°
, 
Àn
);

161 
	g_XFUNCPROTOEND


	@/usr/include/X11/Xfuncproto.h

29 #i‚de‡
_XFUNCPROTO_H_


30 
	#_XFUNCPROTO_H_


	)

32 #i‚de‡
NìdFun˘i⁄PrŸŸy≥s


33 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

36 #i‚de‡
NìdV¨¨gsPrŸŸy≥s


37 
	#NìdV¨¨gsPrŸŸy≥s
 1

	)

40 #i‡
NìdFun˘i⁄PrŸŸy≥s


42 #i‚de‡
NìdNe°edPrŸŸy≥s


43 
	#NìdNe°edPrŸŸy≥s
 1

	)

46 #i‚de‡
_Xc⁄°


47 
	#_Xc⁄°
 c⁄°

	)

51 #i‡!
deföed
(
NARROWPROTO
) && \

52 (
deföed
(
__löux__
Ë|| deföed(
__FªeBSD__
Ë|| deföed(
__NëBSD__
Ë|| 
	$deföed
(
__O≥nBSD__
))

53 
	#NARROWPROTO


	)

55 #i‚de‡
FUNCPROTO


56 
	#FUNCPROTO
 15

	)

59 #i‚de‡
NìdWidePrŸŸy≥s


60 #ifde‡
NARROWPROTO


61 
	#NìdWidePrŸŸy≥s
 0

	)

63 
	#NìdWidePrŸŸy≥s
 1

	)

69 #i‚de‡
_XFUNCPROTOBEGIN


70 #i‡
	`deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

71 
	#_XFUNCPROTOBEGIN
 "C" {

	)

72 
	#_XFUNCPROTOEND
 
	}

	)
}

74 
	#_XFUNCPROTOBEGIN


	)

75 
	#_XFUNCPROTOEND


	)

80 #i‚de‡
__has_©åibuã


81 
	#__has_©åibuã
(
x
Ë0

	)

83 #i‚de‡
__has_„©uª


84 
	#__has_„©uª
(
x
Ë0

	)

86 #i‚de‡
__has_exãnsi⁄


87 
	#__has_exãnsi⁄
(
x
Ë0

	)

91 #i‡
__has_©åibuã
(
__£¡öñ__
Ë|| (
deföed
(
__GNUC__
) && (__GNUC__ >= 4))

92 
	#_X_SENTINEL
(
x
Ë
	`__©åibuã__
 ((
	`__£¡öñ__
(x)))

	)

94 
	#_X_SENTINEL
(
x
)

	)

98 #i‡(
__has_©åibuã
(
visibûôy
Ë|| (
deföed
(
__GNUC__
) && (__GNUC__ >= 4))) \

99 && !
deföed
(
__CYGWIN__
Ë&& !
	$deföed
(
__MINGW32__
)

100 
	#_X_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

101 
	#_X_HIDDEN
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

102 
	#_X_INTERNAL
 
	`__©åibuã__
((
	`visibûôy
("öã∫Æ")))

	)

103 #ñi‡
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

104 
	#_X_EXPORT
 
__globÆ


	)

105 
	#_X_HIDDEN
 
__hiddí


	)

106 
	#_X_INTERNAL
 
__hiddí


	)

108 
	#_X_EXPORT


	)

109 
	#_X_HIDDEN


	)

110 
	#_X_INTERNAL


	)

115 #i‡
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

116 
	#_X_LIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

117 
	#_X_UNLIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

119 
	#_X_LIKELY
(
x
Ë(x)

	)

120 
	#_X_UNLIKELY
(
x
Ë(x)

	)

125 #i‡
	`__has_©åibuã
(
__cﬁd__
) || \

126 (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 403))

127 
	#_X_COLD
 
	`__©åibuã__
((
__cﬁd__
))

	)

129 
	#_X_COLD


	)

133 #i‡
	`__has_©åibuã
(
dïªˇãd
) \

134 || (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 301)) \

135 || (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x5130))

136 
	#_X_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

138 
	#_X_DEPRECATED


	)

142 #i‡
	`__has_exãnsi⁄
(
©åibuã_dïªˇãd_wôh_mesßge
) || \

143 (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ >5Ë|| ((__GNUC__ =4Ë&& (
__GNUC_MINOR__
 >= 5))))

144 
	#_X_DEPRECATED_MSG
(
_msg
Ë
	`__©åibuã__
((
	`dïªˇãd
(_msg)))

	)

146 
	#_X_DEPRECATED_MSG
(
_msg
Ë
_X_DEPRECATED


	)

150 #i‡
	`__has_©åibuã
(
n‹ëu∫
) \

151 || (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)) \

152 || (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

153 
	#_X_NORETURN
 
	`__©åibuã
((
n‹ëu∫
))

	)

155 
	#_X_NORETURN


	)

159 #i‡
	`__has_©åibuã
(
__f‹m©__
) \

160 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 203)

161 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,x,y)))

	)

163 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
)

	)

169 #i‡
	`__has_©åibuã
(
n⁄nuŒ
) \

170 && 
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)

171 
	#_X_NONNULL
(...Ë
	`__©åibuã__
((
	`n⁄nuŒ
(
__VA_ARGS__
)))

	)

172 #ñi‡
	`__has_©åibuã
(
n⁄nuŒ
) \

173 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

174 
	#_X_NONNULL
(
¨gs
...Ë
	`__©åibuã__
((
	`n⁄nuŒ
◊rgs)))

	)

175 #ñi‡
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)

176 
	#_X_NONNULL
(...Ë

	)

180 #i‡
	`__has_©åibuã
(
__unu£d__
) \

181 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)

182 
	#_X_UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

184 
	#_X_UNUSED


	)

190 #i‡
	`deföed
(
ölöe
) || \

191 (
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)) || \

192 (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550))

193 
	#_X_INLINE
 
ölöe


	)

194 #ñi‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

195 
	#_X_INLINE
 
__ölöe__


	)

197 
	#_X_INLINE


	)

202 #i‚de‡
_X_RESTRICT_KYWD


203 #i‡
	`deföed
(
ª°ri˘
) || \

204 (
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L) \

205 && !
	$deföed
(
__˝lu•lus
))

206 
	#_X_RESTRICT_KYWD
 
ª°ri˘


	)

207 #ñi‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

208 
	#_X_RESTRICT_KYWD
 
__ª°ri˘__


	)

210 
	#_X_RESTRICT_KYWD


	)

215 #i‡
	`__has_©åibuã
(
no_ßnôize_thªad
)

216 
	#_X_NOTSAN
 
	`__©åibuã__
((
no_ßnôize_thªad
))

	)

218 
	#_X_NOTSAN


	)

	@/usr/include/X11/Xosdefs.h

27 #i‚de‡
_XOSDEFS_H_


28 
	#_XOSDEFS_H_


	)

37 #ifde‡
_SCO_DS


38 #i‚de‡
__SCO__


39 
	#__SCO__


	)

43 #ifde‡
__i386__


44 #ifde‡
SYSV


45 #i‡!
deföed
(
__SCO__
) && \

46 !
deföed
(
__UNIXWARE__
Ë&& !
	$deföed
(
__sun
)

47 #i‡!
	`deföed
(
_POSIX_SOURCE
)

48 
	#X_NOT_POSIX


	)

54 #ifde‡
__sun


58 #i‡
	`deföed
(
__SVR4
Ë&& !deföed(
SVR4
)

59 
	#SVR4
 1

	)

61 #ifde‡
SVR4


63 
	#X_POSIX_C_SOURCE
 199300L

	)

67 #ifde‡
WIN32


68 #i‚de‡
_POSIX_


69 
	#X_NOT_POSIX


	)

74 #ifde‡
__APPLE__


75 
	#NULL_NOT_ZERO


	)

82 #i‡
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_POSIX_SOURCE
Ë|| deföed(
_POSIX_C_SOURCE
)

83 #i‚de‡
_DARWIN_C_SOURCE


84 
	#_DARWIN_C_SOURCE


	)

90 #ifde‡
__GNU__


91 #i‚de‡
PATH_MAX


92 
	#PATH_MAX
 4096

	)

94 #i‚de‡
MAXPATHLEN


95 
	#MAXPATHLEN
 4096

	)

99 #i‡
	`deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

100 #i‚de‡
PATH_MAX


101 
	#PATH_MAX
 1024

	)

103 #i‚de‡
MAXPATHLEN


104 
	#MAXPATHLEN
 1024

	)

108 #i‡
	`deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__FªeBSD__
) \

109 || 
	`deföed
(
__APPLE__
Ë|| 
	$deföed
(
__Døg⁄Fly__
)

110 #i‚de‡
CSRG_BASED


111 
	#CSRG_BASED


	)

	@/usr/include/X11/extensions/XKBstr.h

27 #i‚de‡
_XKBSTR_H_


28 
	#_XKBSTR_H_


	)

30 
	~<X11/exãnsi⁄s/XKB.h
>

32 
	#XkbCh¨ToI¡
(
v
Ë((v)&0x80?()((v)|(~0xff)):()((v)&0x7f))

	)

33 
	#XkbI¡To2Ch¨s
(
i
,
h
,
l
Ë(((h)=((i>>8)&0xff)),(÷)=((i)&0xff)))

	)

34 
	#Xkb2Ch¨sToI¡
(
h
,
l
Ë(()(((h)<<8)|÷)))

	)

41 #ifde‡
__˛™g__


42 #¥agm®
˛™g
 
dügno°ic
 
push


43 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

50 
	s_XkbSèãRec
 {

51 
	mgroup
;

52 
	mlocked_group
;

53 
	mba£_group
;

54 
	mœtched_group
;

55 
	mmods
;

56 
	mba£_mods
;

57 
	mœtched_mods
;

58 
	mlocked_mods
;

59 
	mcom∑t_°©e
;

60 
	mgøb_mods
;

61 
	mcom∑t_gøb_mods
;

62 
	mlookup_mods
;

63 
	mcom∑t_lookup_mods
;

64 
	m±r_buâ⁄s
;

65 } 
	tXkbSèãRec
,*
	tXkbSèãPå
;

66 
	#XkbModLocks
(
s
Ë((s)->
locked_mods
)

	)

67 
	#XkbSèãMods
(
s
Ë((s)->
ba£_mods
|(s)->
œtched_mods
|
	`XkbModLocks
(s))

	)

68 
	#XkbGroupLock
(
s
Ë((s)->
locked_group
)

	)

69 
	#XkbSèãGroup
(
s
Ë((s)->
ba£_group
+(s)->
œtched_group
+
	`XkbGroupLock
(s))

	)

70 
	#XkbSèãFõldFromRec
(
s
Ë
	`XkbBuûdC‹eSèã
((s)->
lookup_mods
,(s)->
group
)

	)

71 
	#XkbGøbSèãFromRec
(
s
Ë
	`XkbBuûdC‹eSèã
((s)->
gøb_mods
,(s)->
group
)

	)

73 
	s_XkbMods
 {

74 
	mmask
;

75 
	mªÆ_mods
;

76 
	mvmods
;

77 } 
	tXkbModsRec
,*
	tXkbModsPå
;

79 
	s_XkbKTM≠E¡ry
 {

80 
Boﬁ
 
	ma˘ive
;

81 
	mÀvñ
;

82 
XkbModsRec
 
	mmods
;

83 } 
	tXkbKTM≠E¡ryRec
,*
	tXkbKTM≠E¡ryPå
;

85 
	s_XkbKeyTy≥
 {

86 
XkbModsRec
 
	mmods
;

87 
	mnum_Àvñs
;

88 
	mm≠_cou¡
;

90 
XkbKTM≠E¡ryPå
 
	mm≠
;

92 
XkbModsPå
 
	m¥e£rve
;

93 
Atom
 
	m«me
;

95 
Atom
 * 
	mÀvñ_«mes
;

96 } 
	tXkbKeyTy≥Rec
, *
	tXkbKeyTy≥På
;

98 
	#XkbNumGroups
(
g
Ë((g)&0x0f)

	)

99 
	#XkbOutOfR™geGroupInfo
(
g
Ë((g)&0xf0)

	)

100 
	#XkbOutOfR™geGroupA˘i⁄
(
g
Ë((g)&0xc0)

	)

101 
	#XkbOutOfR™geGroupNumbî
(
g
Ë(((g)&0x30)>>4)

	)

102 
	#XkbSëGroupInfo
(
g
,
w
,
n
Ë(((w)&0xc0)|((“)&3)<<4)|((g)&0x0f))

	)

103 
	#XkbSëNumGroups
(
g
,
n
Ë(((g)&0xf0)|(“)&0x0f))

	)

109 
	s_XkbBehavi‹
 {

110 
	mty≥
;

111 
	md©a
;

112 } 
	tXkbBehavi‹
;

114 
	#XkbAnyA˘i⁄D©aSize
 7

	)

115 
	s_XkbAnyA˘i⁄
 {

116 
	mty≥
;

117 
	md©a
[
XkbAnyA˘i⁄D©aSize
];

118 } 
	tXkbAnyA˘i⁄
;

120 
	s_XkbModA˘i⁄
 {

121 
	mty≥
;

122 
	mÊags
;

123 
	mmask
;

124 
	mªÆ_mods
;

125 
	mvmods1
;

126 
	mvmods2
;

127 } 
	tXkbModA˘i⁄
;

128 
	#XkbModA˘i⁄VMods
(
a
) \

129 (()(((
a
)->
vmods1
<<8)|(◊)->
vmods2
)))

	)

130 
	#XkbSëModA˘i⁄VMods
(
a
,
v
) \

131 (((
a
)->
vmods1
=(((
v
)>>8)&0xff)),◊)->
vmods2
=((v)&0xff))

	)

133 
	s_XkbGroupA˘i⁄
 {

134 
	mty≥
;

135 
	mÊags
;

136 
	mgroup_XXX
;

137 } 
	tXkbGroupA˘i⁄
;

138 
	#XkbSAGroup
(
a
Ë(
	`XkbCh¨ToI¡
(◊)->
group_XXX
))

	)

139 
	#XkbSASëGroup
(
a
,
g
Ë(◊)->
group_XXX
=(g))

	)

141 
	s_XkbISOA˘i⁄
 {

142 
	mty≥
;

143 
	mÊags
;

144 
	mmask
;

145 
	mªÆ_mods
;

146 
	mgroup_XXX
;

147 
	maf„˘
;

148 
	mvmods1
;

149 
	mvmods2
;

150 } 
	tXkbISOA˘i⁄
;

152 
	s_XkbPåA˘i⁄
 {

153 
	mty≥
;

154 
	mÊags
;

155 
	mhigh_XXX
;

156 
	mlow_XXX
;

157 
	mhigh_YYY
;

158 
	mlow_YYY
;

159 } 
	tXkbPåA˘i⁄
;

160 
	#XkbPåA˘i⁄X
(
a
Ë(
	`Xkb2Ch¨sToI¡
(◊)->
high_XXX
,◊)->
low_XXX
))

	)

161 
	#XkbPåA˘i⁄Y
(
a
Ë(
	`Xkb2Ch¨sToI¡
(◊)->
high_YYY
,◊)->
low_YYY
))

	)

162 
	#XkbSëPåA˘i⁄X
(
a
,
x
Ë(
	`XkbI¡To2Ch¨s
(x,◊)->
high_XXX
,◊)->
low_XXX
))

	)

163 
	#XkbSëPåA˘i⁄Y
(
a
,
y
Ë(
	`XkbI¡To2Ch¨s
(y,◊)->
high_YYY
,◊)->
low_YYY
))

	)

165 
	s_XkbPåBäA˘i⁄
 {

166 
	mty≥
;

167 
	mÊags
;

168 
	mcou¡
;

169 
	mbuâ⁄
;

170 } 
	tXkbPåBäA˘i⁄
;

172 
	s_XkbPåDÊtA˘i⁄
 {

173 
	mty≥
;

174 
	mÊags
;

175 
	maf„˘
;

176 
	mvÆueXXX
;

177 } 
	tXkbPåDÊtA˘i⁄
;

178 
	#XkbSAPåDÊtVÆue
(
a
Ë(
	`XkbCh¨ToI¡
(◊)->
vÆueXXX
))

	)

179 
	#XkbSASëPåDÊtVÆue
(
a
,
c
Ë(◊)->
vÆueXXX
((c)&0xff))

	)

181 
	s_XkbSwôchS¸ìnA˘i⁄
 {

182 
	mty≥
;

183 
	mÊags
;

184 
	ms¸ìnXXX
;

185 } 
	tXkbSwôchS¸ìnA˘i⁄
;

186 
	#XkbSAS¸ìn
(
a
Ë(
	`XkbCh¨ToI¡
(◊)->
s¸ìnXXX
))

	)

187 
	#XkbSASëS¸ìn
(
a
,
s
Ë(◊)->
s¸ìnXXX
((s)&0xff))

	)

189 
	s_XkbCålsA˘i⁄
 {

190 
	mty≥
;

191 
	mÊags
;

192 
	m˘æs3
;

193 
	m˘æs2
;

194 
	m˘æs1
;

195 
	m˘æs0
;

196 } 
	tXkbCålsA˘i⁄
;

197 
	#XkbA˘i⁄SëCåls
(
a
,
c
Ë((◊)->
˘æs3
=(((c)>>24)&0xff)),\

198 ((
a
)->
˘æs2
=(((
c
)>>16)&0xff)),\

199 ((
a
)->
˘æs1
=(((
c
)>>8)&0xff)),\

200 ((
a
)->
˘æs0
=((
c
)&0xff)))

	)

201 
	#XkbA˘i⁄Cåls
(
a
Ë(((()◊)->
˘æs3
)<<24)|\

202 ((()(
a
)->
˘æs2
)<<16)|\

203 ((()(
a
)->
˘æs1
)<<8)|\

204 (()((
a
)->
˘æs0
)))

	)

206 
	s_XkbMesßgeA˘i⁄
 {

207 
	mty≥
;

208 
	mÊags
;

209 
	mmesßge
[6];

210 } 
	tXkbMesßgeA˘i⁄
;

212 
	s_XkbRedúe˘KeyA˘i⁄
 {

213 
	mty≥
;

214 
	m√w_key
;

215 
	mmods_mask
;

216 
	mmods
;

217 
	mvmods_mask0
;

218 
	mvmods_mask1
;

219 
	mvmods0
;

220 
	mvmods1
;

221 } 
	tXkbRedúe˘KeyA˘i⁄
;

223 
	#XkbSARedúe˘VMods
(
a
Ë(((()◊)->
vmods1
)<<8)|\

224 (()(
a
)->
vmods0
))

	)

225 
	#XkbSARedúe˘SëVMods
(
a
,
m
Ë((◊)->
vmods1
=(((m)>>8)&0xff)),\

226 ((
a
)->
vmods0
=((
m
)&0xff)))

	)

227 
	#XkbSARedúe˘VModsMask
(
a
Ë(((()◊)->
vmods_mask1
)<<8)|\

228 (()(
a
)->
vmods_mask0
))

	)

229 
	#XkbSARedúe˘SëVModsMask
(
a
,
m
Ë((◊)->
vmods_mask1
=(((m)>>8)&0xff)),\

230 ((
a
)->
vmods_mask0
=((
m
)&0xff)))

	)

232 
	s_XkbDevi˚BäA˘i⁄
 {

233 
	mty≥
;

234 
	mÊags
;

235 
	mcou¡
;

236 
	mbuâ⁄
;

237 
	mdevi˚
;

238 } 
	tXkbDevi˚BäA˘i⁄
;

240 
	s_XkbDevi˚VÆu©‹A˘i⁄
 {

241 
	mty≥
;

242 
	mdevi˚
;

243 
	mv1_wh©
;

244 
	mv1_ndx
;

245 
	mv1_vÆue
;

246 
	mv2_wh©
;

247 
	mv2_ndx
;

248 
	mv2_vÆue
;

249 } 
	tXkbDevi˚VÆu©‹A˘i⁄
;

251 
	u_XkbA˘i⁄
 {

252 
XkbAnyA˘i⁄
 
	m™y
;

253 
XkbModA˘i⁄
 
	mmods
;

254 
XkbGroupA˘i⁄
 
	mgroup
;

255 
XkbISOA˘i⁄
 
	miso
;

256 
XkbPåA˘i⁄
 
	m±r
;

257 
XkbPåBäA˘i⁄
 
	mbä
;

258 
XkbPåDÊtA˘i⁄
 
	mdÊt
;

259 
XkbSwôchS¸ìnA˘i⁄
 
	ms¸ìn
;

260 
XkbCålsA˘i⁄
 
	m˘æs
;

261 
XkbMesßgeA˘i⁄
 
	mmsg
;

262 
XkbRedúe˘KeyA˘i⁄
 
	mªdúe˘
;

263 
XkbDevi˚BäA˘i⁄
 
	mdevbä
;

264 
XkbDevi˚VÆu©‹A˘i⁄
 
	mdevvÆ
;

265 
	mty≥
;

266 } 
	tXkbA˘i⁄
;

268 
	s_XkbC⁄åﬁs
 {

269 
	mmk_dÊt_bä
;

270 
	mnum_groups
;

271 
	mgroups_wøp
;

272 
XkbModsRec
 
	möã∫Æ
;

273 
XkbModsRec
 
	mign‹e_lock
;

274 
	míabÀd_˘æs
;

275 
	mª≥©_dñay
;

276 
	mª≥©_öãrvÆ
;

277 
	m¶ow_keys_dñay
;

278 
	mdeboun˚_dñay
;

279 
	mmk_dñay
;

280 
	mmk_öãrvÆ
;

281 
	mmk_time_to_max
;

282 
	mmk_max_•ìd
;

283 
	mmk_curve
;

284 
	max_›ti⁄s
;

285 
	max_timeout
;

286 
	maxt_›ts_mask
;

287 
	maxt_›ts_vÆues
;

288 
	maxt_˘æs_mask
;

289 
	maxt_˘æs_vÆues
;

290 
	m≥r_key_ª≥©
[
XkbPîKeyBôAºaySize
];

291 } 
	tXkbC⁄åﬁsRec
, *
	tXkbC⁄åﬁsPå
;

293 
	#XkbAX_AnyFìdback
(
c
Ë((c)->
íabÀd_˘æs
&
XkbAc˚ssXFìdbackMask
)

	)

294 
	#XkbAX_NìdO±i⁄
(
c
,
w
Ë((c)->
ax_›ti⁄s
&(w))

	)

295 
	#XkbAX_NìdFìdback
(
c
,
w
Ë(
	`XkbAX_AnyFìdback
(c)&&
	`XkbAX_NìdO±i⁄
(c,w))

	)

297 
	s_XkbSîvîM≠Rec
 {

300 
	mnum_a˘s
;

301 
	msize_a˘s
;

302 
XkbA˘i⁄
 *
	ma˘s
;

306 
XkbBehavi‹
 *
	mbehavi‹s
;

307 *
	mkey_a˘s
;

308 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

310 *
	mc_ex∂icô
;

312 *
	mex∂icô
;

314 
	mvmods
[
XkbNumVútuÆMods
];

315 *
	mvmodm≠
;

316 } 
	tXkbSîvîM≠Rec
, *
	tXkbSîvîM≠På
;

318 
	#XkbSMKeyA˘i⁄sPå
(
m
,
k
Ë(&(m)->
a˘s
[(m)->
key_a˘s
[k]])

	)

324 
	s_XkbSymM≠Rec
 {

325 
	mkt_ödex
[
XkbNumKbdGroups
];

326 
	mgroup_öfo
;

327 
	mwidth
;

328 
	moff£t
;

329 } 
	tXkbSymM≠Rec
, *
	tXkbSymM≠På
;

331 
	s_XkbClõ¡M≠Rec
 {

334 
	msize_ty≥s
;

335 
	mnum_ty≥s
;

336 
XkbKeyTy≥På
 
	mty≥s
;

339 
	msize_syms
;

340 
	mnum_syms
;

341 
KeySym
 *
	msyms
;

343 
XkbSymM≠På
 
	mkey_sym_m≠
;

346 *
	mmodm≠
;

347 } 
	tXkbClõ¡M≠Rec
, *
	tXkbClõ¡M≠På
;

349 
	#XkbCMKeyGroupInfo
(
m
,
k
Ë((m)->
key_sym_m≠
[k].
group_öfo
)

	)

350 
	#XkbCMKeyNumGroups
(
m
,
k
Ë(
	`XkbNumGroups
((m)->
key_sym_m≠
[k].
group_öfo
))

	)

351 
	#XkbCMKeyGroupWidth
(
m
,
k
,
g
Ë(
	`XkbCMKeyTy≥
(m,k,g)->
num_Àvñs
)

	)

352 
	#XkbCMKeyGroupsWidth
(
m
,
k
Ë((m)->
key_sym_m≠
[k].
width
)

	)

353 
	#XkbCMKeyTy≥Index
(
m
,
k
,
g
Ë((m)->
key_sym_m≠
[k].
kt_ödex
[g&0x3])

	)

354 
	#XkbCMKeyTy≥
(
m
,
k
,
g
Ë(&(m)->
ty≥s
[
	`XkbCMKeyTy≥Index
(m,k,g)])

	)

355 
	#XkbCMKeyNumSyms
(
m
,
k
Ë(
	`XkbCMKeyGroupsWidth
(m,k)*
	`XkbCMKeyNumGroups
(m,k))

	)

356 
	#XkbCMKeySymsOff£t
(
m
,
k
Ë((m)->
key_sym_m≠
[k].
off£t
)

	)

357 
	#XkbCMKeySymsPå
(
m
,
k
Ë(&(m)->
syms
[
	`XkbCMKeySymsOff£t
(m,k)])

	)

363 
	s_XkbSymI¡î¥ëRec
 {

364 
KeySym
 
	msym
;

365 
	mÊags
;

366 
	mm©ch
;

367 
	mmods
;

368 
	mvútuÆ_mod
;

369 
XkbAnyA˘i⁄
 
	ma˘
;

370 } 
	tXkbSymI¡î¥ëRec
,*
	tXkbSymI¡î¥ëPå
;

372 
	s_XkbCom∑tM≠Rec
 {

375 
XkbSymI¡î¥ëPå
 
	msym_öãΩªt
;

376 
XkbModsRec
 
	mgroups
[
XkbNumKbdGroups
];

377 
	mnum_si
;

378 
	msize_si
;

379 } 
	tXkbCom∑tM≠Rec
, *
	tXkbCom∑tM≠På
;

381 
	s_XkbIndiˇt‹M≠Rec
 {

382 
	mÊags
;

383 
	mwhich_groups
;

384 
	mgroups
;

385 
	mwhich_mods
;

386 
XkbModsRec
 
	mmods
;

387 
	m˘æs
;

388 } 
	tXkbIndiˇt‹M≠Rec
, *
	tXkbIndiˇt‹M≠På
;

390 
	#XkbIM_IsAuto
(
i
Ë((((i)->
Êags
&
XkbIM_NoAutom©ic
)==0)&&\

391 (((
i
)->
which_groups
&&(i)->
groups
)||\

392 ((
i
)->
which_mods
&&(i)->
mods
.
mask
)||\

393 ((
i
)->
˘æs
)))

	)

394 
	#XkbIM_InU£
(
i
Ë(((i)->
Êags
)||((i)->
which_groups
)||\

395 ((
i
)->
which_mods
)||((i)->
˘æs
))

	)

398 
	s_XkbIndiˇt‹Rec
 {

399 
	mphys_ödiˇt‹s
;

400 
XkbIndiˇt‹M≠Rec
 
	mm≠s
[
XkbNumIndiˇt‹s
];

401 } 
	tXkbIndiˇt‹Rec
,*
	tXkbIndiˇt‹På
;

403 
	s_XkbKeyNameRec
 {

404 
	m«me
[
XkbKeyNameLígth
];

405 } 
	tXkbKeyNameRec
,*
	tXkbKeyNamePå
;

407 
	s_XkbKeyAlüsRec
 {

408 
	mªÆ
[
XkbKeyNameLígth
];

409 
	mÆüs
[
XkbKeyNameLígth
];

410 } 
	tXkbKeyAlüsRec
,*
	tXkbKeyAlüsPå
;

415 
	s_XkbNamesRec
 {

416 
Atom
 
	mkeycodes
;

417 
Atom
 
	mgeomëry
;

418 
Atom
 
	msymbﬁs
;

419 
Atom
 
	mty≥s
;

420 
Atom
 
	mcom∑t
;

421 
Atom
 
	mvmods
[
XkbNumVútuÆMods
];

422 
Atom
 
	mödiˇt‹s
[
XkbNumIndiˇt‹s
];

423 
Atom
 
	mgroups
[
XkbNumKbdGroups
];

425 
XkbKeyNamePå
 
	mkeys
;

427 
XkbKeyAlüsPå
 
	mkey_Æü£s
;

429 
Atom
 *
	mødio_groups
;

430 
Atom
 
	mphys_symbﬁs
;

433 
	mnum_keys
;

434 
	mnum_key_Æü£s
;

435 
	mnum_rg
;

436 } 
	tXkbNamesRec
,*
	tXkbNamesPå
;

438 
_XkbGeomëry
 *
	tXkbGeomëryPå
;

442 
	s_XkbDesc
 {

443 
_XDi•œy
 * 
	mdpy
;

444 
	mÊags
;

445 
	mdevi˚_•ec
;

446 
KeyCode
 
	mmö_key_code
;

447 
KeyCode
 
	mmax_key_code
;

449 
XkbC⁄åﬁsPå
 
	m˘æs
;

450 
XkbSîvîM≠På
 
	m£rvî
;

451 
XkbClõ¡M≠På
 
	mm≠
;

452 
XkbIndiˇt‹På
 
	mödiˇt‹s
;

453 
XkbNamesPå
 
	m«mes
;

454 
XkbCom∑tM≠På
 
	mcom∑t
;

455 
XkbGeomëryPå
 
	mgeom
;

456 } 
	tXkbDescRec
, *
	tXkbDescPå
;

457 
	#XkbKeyKeyTy≥Index
(
d
,
k
,
g
Ë(
	`XkbCMKeyTy≥Index
((d)->
m≠
,k,g))

	)

458 
	#XkbKeyKeyTy≥
(
d
,
k
,
g
Ë(
	`XkbCMKeyTy≥
((d)->
m≠
,k,g))

	)

459 
	#XkbKeyGroupWidth
(
d
,
k
,
g
Ë(
	`XkbCMKeyGroupWidth
((d)->
m≠
,k,g))

	)

460 
	#XkbKeyGroupsWidth
(
d
,
k
Ë(
	`XkbCMKeyGroupsWidth
((d)->
m≠
,k))

	)

461 
	#XkbKeyGroupInfo
(
d
,
k
Ë(
	`XkbCMKeyGroupInfo
((d)->
m≠
,(k)))

	)

462 
	#XkbKeyNumGroups
(
d
,
k
Ë(
	`XkbCMKeyNumGroups
((d)->
m≠
,(k)))

	)

463 
	#XkbKeyNumSyms
(
d
,
k
Ë(
	`XkbCMKeyNumSyms
((d)->
m≠
,(k)))

	)

464 
	#XkbKeySymsPå
(
d
,
k
Ë(
	`XkbCMKeySymsPå
((d)->
m≠
,(k)))

	)

465 
	#XkbKeySym
(
d
,
k
,
n
Ë(
	`XkbKeySymsPå
(d,k)[n])

	)

466 
	#XkbKeySymE¡ry
(
d
,
k
,
¶
,
g
) \

467 (
	`XkbKeySym
(
d
,
k
,((
	`XkbKeyGroupsWidth
(d,k)*(
g
))+(
¶
))))

	)

468 
	#XkbKeyA˘i⁄
(
d
,
k
,
n
) \

469 (
	`XkbKeyHasA˘i⁄s
(
d
,
k
)?&
	`XkbKeyA˘i⁄sPå
(d,k)[
n
]:
NULL
)

	)

470 
	#XkbKeyA˘i⁄E¡ry
(
d
,
k
,
¶
,
g
) \

471 (
	`XkbKeyHasA˘i⁄s
(
d
,
k
)?\

472 
	`XkbKeyA˘i⁄
(
d
,
k
,((
	`XkbKeyGroupsWidth
(d,k)*(
g
))+(
¶
))):
NULL
)

	)

474 
	#XkbKeyHasA˘i⁄s
(
d
,
k
Ë((d)->
£rvî
->
key_a˘s
[k]!=0)

	)

475 
	#XkbKeyNumA˘i⁄s
(
d
,
k
Ë(
	`XkbKeyHasA˘i⁄s
(d,k)?
	`XkbKeyNumSyms
(d,k):1)

	)

476 
	#XkbKeyA˘i⁄sPå
(
d
,
k
Ë(
	`XkbSMKeyA˘i⁄sPå
((d)->
£rvî
,k))

	)

477 
	#XkbKeycodeInR™ge
(
d
,
k
Ë(((k)>=(d)->
mö_key_code
)&&\

478 ((
k
)<=(
d
)->
max_key_code
))

	)

479 
	#XkbNumKeys
(
d
Ë((d)->
max_key_code
-(d)->
mö_key_code
+1)

	)

486 
	s_XkbM≠Ch™ges
 {

487 
	mch™ged
;

488 
KeyCode
 
	mmö_key_code
;

489 
KeyCode
 
	mmax_key_code
;

490 
	mfú°_ty≥
;

491 
	mnum_ty≥s
;

492 
KeyCode
 
	mfú°_key_sym
;

493 
	mnum_key_syms
;

494 
KeyCode
 
	mfú°_key_a˘
;

495 
	mnum_key_a˘s
;

496 
KeyCode
 
	mfú°_key_behavi‹
;

497 
	mnum_key_behavi‹s
;

498 
KeyCode
 
	mfú°_key_ex∂icô
;

499 
	mnum_key_ex∂icô
;

500 
KeyCode
 
	mfú°_modm≠_key
;

501 
	mnum_modm≠_keys
;

502 
KeyCode
 
	mfú°_vmodm≠_key
;

503 
	mnum_vmodm≠_keys
;

504 
	m∑d
;

505 
	mvmods
;

506 } 
	tXkbM≠Ch™gesRec
,*
	tXkbM≠Ch™gesPå
;

508 
	s_XkbC⁄åﬁsCh™ges
 {

509 
	mch™ged_˘æs
;

510 
	míabÀd_˘æs_ch™ges
;

511 
Boﬁ
 
	mnum_groups_ch™ged
;

512 } 
	tXkbC⁄åﬁsCh™gesRec
,*
	tXkbC⁄åﬁsCh™gesPå
;

514 
	s_XkbIndiˇt‹Ch™ges
 {

515 
	m°©e_ch™ges
;

516 
	mm≠_ch™ges
;

517 } 
	tXkbIndiˇt‹Ch™gesRec
,*
	tXkbIndiˇt‹Ch™gesPå
;

519 
	s_XkbNameCh™ges
 {

520 
	mch™ged
;

521 
	mfú°_ty≥
;

522 
	mnum_ty≥s
;

523 
	mfú°_lvl
;

524 
	mnum_lvls
;

525 
	mnum_Æü£s
;

526 
	mnum_rg
;

527 
	mfú°_key
;

528 
	mnum_keys
;

529 
	mch™ged_vmods
;

530 
	mch™ged_ödiˇt‹s
;

531 
	mch™ged_groups
;

532 } 
	tXkbNameCh™gesRec
,*
	tXkbNameCh™gesPå
;

534 
	s_XkbCom∑tCh™ges
 {

535 
	mch™ged_groups
;

536 
	mfú°_si
;

537 
	mnum_si
;

538 } 
	tXkbCom∑tCh™gesRec
,*
	tXkbCom∑tCh™gesPå
;

540 
	s_XkbCh™ges
 {

541 
	mdevi˚_•ec
;

542 
	m°©e_ch™ges
;

543 
XkbM≠Ch™gesRec
 
	mm≠
;

544 
XkbC⁄åﬁsCh™gesRec
 
	m˘æs
;

545 
XkbIndiˇt‹Ch™gesRec
 
	mödiˇt‹s
;

546 
XkbNameCh™gesRec
 
	m«mes
;

547 
XkbCom∑tCh™gesRec
 
	mcom∑t
;

548 } 
	tXkbCh™gesRec
, *
	tXkbCh™gesPå
;

555 
	s_XkbComp⁄ítNames
 {

556 * 
	mkeym≠
;

557 * 
	mkeycodes
;

558 * 
	mty≥s
;

559 * 
	mcom∑t
;

560 * 
	msymbﬁs
;

561 * 
	mgeomëry
;

562 } 
	tXkbComp⁄ítNamesRec
, *
	tXkbComp⁄ítNamesPå
;

564 
	s_XkbComp⁄ítName
 {

565 
	mÊags
;

566 * 
	m«me
;

567 } 
	tXkbComp⁄ítNameRec
,*
	tXkbComp⁄ítNamePå
;

569 
	s_XkbComp⁄ítLi°
 {

570 
	mnum_keym≠s
;

571 
	mnum_keycodes
;

572 
	mnum_ty≥s
;

573 
	mnum_com∑t
;

574 
	mnum_symbﬁs
;

575 
	mnum_geomëry
;

576 
XkbComp⁄ítNamePå
 
	mkeym≠s
;

577 
XkbComp⁄ítNamePå
 
	mkeycodes
;

578 
XkbComp⁄ítNamePå
 
	mty≥s
;

579 
XkbComp⁄ítNamePå
 
	mcom∑t
;

580 
XkbComp⁄ítNamePå
 
	msymbﬁs
;

581 
XkbComp⁄ítNamePå
 
	mgeomëry
;

582 } 
	tXkbComp⁄ítLi°Rec
, *
	tXkbComp⁄ítLi°På
;

588 
	s_XkbDevi˚LedInfo
 {

589 
	mÀd_˛ass
;

590 
	mÀd_id
;

591 
	mphys_ödiˇt‹s
;

592 
	mm≠s_¥e£¡
;

593 
	m«mes_¥e£¡
;

594 
	m°©e
;

595 
Atom
 
	m«mes
[
XkbNumIndiˇt‹s
];

596 
XkbIndiˇt‹M≠Rec
 
	mm≠s
[
XkbNumIndiˇt‹s
];

597 } 
	tXkbDevi˚LedInfoRec
,*
	tXkbDevi˚LedInfoPå
;

599 
	s_XkbDevi˚Info
 {

600 * 
	m«me
;

601 
Atom
 
	mty≥
;

602 
	mdevi˚_•ec
;

603 
Boﬁ
 
	mhas_own_°©e
;

604 
	msuµ‹ãd
;

605 
	munsuµ‹ãd
;

608 
	mnum_bäs
;

609 
XkbA˘i⁄
 * 
	mbä_a˘s
;

611 
	msz_Àds
;

612 
	mnum_Àds
;

613 
	mdÊt_kbd_fb
;

614 
	mdÊt_Àd_fb
;

617 
XkbDevi˚LedInfoPå
 
	mÀds
;

618 } 
	tXkbDevi˚InfoRec
,*
	tXkbDevi˚InfoPå
;

620 
	#XkbXI_DevHasBäA˘s
(
d
Ë(((d)->
num_bäs
>0)&&((d)->
bä_a˘s
!=
NULL
))

	)

621 
	#XkbXI_LegÆDevBä
(
d
,
b
Ë(
	`XkbXI_DevHasBäA˘s
(d)&&((b)<(d)->
num_bäs
))

	)

622 
	#XkbXI_DevHasLeds
(
d
Ë(((d)->
num_Àds
>0)&&((d)->
Àds
!=
NULL
))

	)

624 
	s_XkbDevi˚LedCh™ges
 {

625 
	mÀd_˛ass
;

626 
	mÀd_id
;

627 
	mdeföed
;

628 
_XkbDevi˚LedCh™ges
 *
	m√xt
;

629 } 
	tXkbDevi˚LedCh™gesRec
,*
	tXkbDevi˚LedCh™gesPå
;

631 
	s_XkbDevi˚Ch™ges
 {

632 
	mch™ged
;

633 
	mfú°_bä
;

634 
	mnum_bäs
;

635 
XkbDevi˚LedCh™gesRec
 
	mÀds
;

636 } 
	tXkbDevi˚Ch™gesRec
,*
	tXkbDevi˚Ch™gesPå
;

638 #ifde‡
__˛™g__


639 #¥agm®
˛™g
 
dügno°ic
 
p›


	@/usr/include/X11/extensions/Xrender.h

25 #i‚de‡
_XRENDER_H_


26 
	#_XRENDER_H_


	)

28 
	~<X11/Xlib.h
>

29 
	~<X11/Xfun˝rŸo.h
>

30 
	~<X11/Xosdefs.h
>

31 
	~<X11/Xutû.h
>

33 
	~<X11/exãnsi⁄s/ªndî.h
>

36 
	mªd
;

37 
	mªdMask
;

38 
	mgªí
;

39 
	mgªíMask
;

40 
	mblue
;

41 
	mblueMask
;

42 
	mÆpha
;

43 
	mÆphaMask
;

44 } 
	tXRídîDúe˘F‹m©
;

47 
Pi˘F‹m©
 
	mid
;

48 
	mty≥
;

49 
	mdïth
;

50 
XRídîDúe˘F‹m©
 
	mdúe˘
;

51 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

52 } 
	tXRídîPi˘F‹m©
;

54 
	#Pi˘F‹m©ID
 (1 << 0)

	)

55 
	#Pi˘F‹m©Ty≥
 (1 << 1)

	)

56 
	#Pi˘F‹m©Dïth
 (1 << 2)

	)

57 
	#Pi˘F‹m©Red
 (1 << 3)

	)

58 
	#Pi˘F‹m©RedMask
 (1 << 4)

	)

59 
	#Pi˘F‹m©Gªí
 (1 << 5)

	)

60 
	#Pi˘F‹m©GªíMask
 (1 << 6)

	)

61 
	#Pi˘F‹m©Blue
 (1 << 7)

	)

62 
	#Pi˘F‹m©BlueMask
 (1 << 8)

	)

63 
	#Pi˘F‹m©AÕha
 (1 << 9)

	)

64 
	#Pi˘F‹m©AÕhaMask
 (1 << 10)

	)

65 
	#Pi˘F‹m©Cﬁ‹m≠
 (1 << 11)

	)

67 
	s_XRídîPi˘uªAâribuãs
 {

68 
	mª≥©
;

69 
Pi˘uª
 
	mÆpha_m≠
;

70 
	mÆpha_x_‹igö
;

71 
	mÆpha_y_‹igö
;

72 
	m˛ù_x_‹igö
;

73 
	m˛ù_y_‹igö
;

74 
Pixm≠
 
	m˛ù_mask
;

75 
Boﬁ
 
	mgøphics_exposuªs
;

76 
	msubwödow_mode
;

77 
	mpﬁy_edge
;

78 
	mpﬁy_mode
;

79 
Atom
 
	mdôhî
;

80 
Boﬁ
 
	mcomp⁄ít_Æpha
;

81 } 
	tXRídîPi˘uªAâribuãs
;

84 
	mªd
;

85 
	mgªí
;

86 
	mblue
;

87 
	mÆpha
;

88 } 
	tXRídîCﬁ‹
;

90 
	s_XGlyphInfo
 {

91 
	mwidth
;

92 
	mheight
;

93 
	mx
;

94 
	my
;

95 
	mxOff
;

96 
	myOff
;

97 } 
	tXGlyphInfo
;

99 
	s_XGlyphE…8
 {

100 
GlyphSë
 
	mglyph£t
;

101 
_Xc⁄°
 *
	mch¨s
;

102 
	mnch¨s
;

103 
	mxOff
;

104 
	myOff
;

105 } 
	tXGlyphE…8
;

107 
	s_XGlyphE…16
 {

108 
GlyphSë
 
	mglyph£t
;

109 
_Xc⁄°
 *
	mch¨s
;

110 
	mnch¨s
;

111 
	mxOff
;

112 
	myOff
;

113 } 
	tXGlyphE…16
;

115 
	s_XGlyphE…32
 {

116 
GlyphSë
 
	mglyph£t
;

117 
_Xc⁄°
 *
	mch¨s
;

118 
	mnch¨s
;

119 
	mxOff
;

120 
	myOff
;

121 } 
	tXGlyphE…32
;

123 
	tXDoubÀ
;

125 
	s_XPoötDoubÀ
 {

126 
XDoubÀ
 
	mx
, 
	my
;

127 } 
	tXPoötDoubÀ
;

129 
	#XDoubÀToFixed
(
f
Ë((
XFixed
Ë((fË* 65536))

	)

130 
	#XFixedToDoubÀ
(
f
Ë(((
XDoubÀ
Ë(f)Ë/ 65536)

	)

132 
	tXFixed
;

134 
	s_XPoötFixed
 {

135 
XFixed
 
	mx
, 
	my
;

136 } 
	tXPoötFixed
;

138 
	s_XLöeFixed
 {

139 
XPoötFixed
 
	mp1
, 
	mp2
;

140 } 
	tXLöeFixed
;

142 
	s_XTrüngÀ
 {

143 
XPoötFixed
 
	mp1
, 
	mp2
, 
	mp3
;

144 } 
	tXTrüngÀ
;

146 
	s_XCú˛e
 {

147 
XFixed
 
	mx
;

148 
XFixed
 
	my
;

149 
XFixed
 
	mødius
;

150 } 
	tXCú˛e
;

152 
	s_XTø≥zoid
 {

153 
XFixed
 
	mt›
, 
	mbŸtom
;

154 
XLöeFixed
 
	mÀ·
, 
	mright
;

155 } 
	tXTø≥zoid
;

157 
	s_XTønsf‹m
 {

158 
XFixed
 
	mm©rix
[3][3];

159 } 
	tXTønsf‹m
;

161 
	s_XFûãrs
 {

162 
	mnfûãr
;

163 **
	mfûãr
;

164 
	m«lüs
;

165 *
	mÆüs
;

166 } 
	tXFûãrs
;

168 
	s_XIndexVÆue
 {

169 
	mpixñ
;

170 
	mªd
, 
	mgªí
, 
	mblue
, 
	mÆpha
;

171 } 
	tXIndexVÆue
;

173 
	s_XAnimCurs‹
 {

174 
Curs‹
 
	mcurs‹
;

175 
	mdñay
;

176 } 
	tXAnimCurs‹
;

178 
	s_XS∑nFix
 {

179 
XFixed
 
	mÀ·
, 
	mright
, 
	my
;

180 } 
	tXS∑nFix
;

182 
	s_XTøp
 {

183 
XS∑nFix
 
	mt›
, 
	mbŸtom
;

184 } 
	tXTøp
;

186 
	s_XLöórGødõ¡
 {

187 
XPoötFixed
 
	mp1
;

188 
XPoötFixed
 
	mp2
;

189 } 
	tXLöórGødõ¡
;

191 
	s_XRadülGødõ¡
 {

192 
XCú˛e
 
	mö√r
;

193 
XCú˛e
 
	mouãr
;

194 } 
	tXRadülGødõ¡
;

196 
	s_XC⁄iˇlGødõ¡
 {

197 
XPoötFixed
 
	m˚¡î
;

198 
XFixed
 
	m™gÀ
;

199 } 
	tXC⁄iˇlGødõ¡
;

201 
_XFUNCPROTOBEGIN


203 
Boﬁ
 
XRídîQuîyExãnsi⁄
 (
Di•œy
 *
dpy
, *
evít_ba£p
, *
îr‹_ba£p
);

205 
Sètus
 
XRídîQuîyVîsi⁄
 (
Di•œy
 *
dpy
,

206 *
maj‹_vîsi⁄p
,

207 *
mö‹_vîsi⁄p
);

209 
Sètus
 
XRídîQuîyF‹m©s
 (
Di•œy
 *
dpy
);

211 
XRídîQuîySubpixñOrdî
 (
Di•œy
 *
dpy
, 
s¸ìn
);

213 
Boﬁ
 
XRídîSëSubpixñOrdî
 (
Di•œy
 *
dpy
, 
s¸ìn
, 
subpixñ
);

215 
XRídîPi˘F‹m©
 *

216 
XRídîFödVisuÆF‹m©
 (
Di•œy
 *
dpy
, 
_Xc⁄°
 
VisuÆ
 *
visuÆ
);

218 
XRídîPi˘F‹m©
 *

219 
XRídîFödF‹m©
 (
Di•œy
 *
dpy
,

220 
mask
,

221 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
ãm∂
,

222 
cou¡
);

224 
	#Pi˘Sènd¨dARGB32
 0

	)

225 
	#Pi˘Sènd¨dRGB24
 1

	)

226 
	#Pi˘Sènd¨dA8
 2

	)

227 
	#Pi˘Sènd¨dA4
 3

	)

228 
	#Pi˘Sènd¨dA1
 4

	)

229 
	#Pi˘Sènd¨dNUM
 5

	)

231 
XRídîPi˘F‹m©
 *

232 
XRídîFödSènd¨dF‹m©
 (
Di•œy
 *
dpy
,

233 
f‹m©
);

235 
XIndexVÆue
 *

236 
XRídîQuîyPi˘IndexVÆues
(
Di•œy
 *
dpy
,

237 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
f‹m©
,

238 *
num
);

240 
Pi˘uª


241 
XRídîCª©ePi˘uª
 (
Di•œy
 *
dpy
,

242 
DøwabÀ
 
døwabÀ
,

243 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
f‹m©
,

244 
vÆuemask
,

245 
_Xc⁄°
 
XRídîPi˘uªAâribuãs
 *
©åibuãs
);

248 
XRídîCh™gePi˘uª
 (
Di•œy
 *
dpy
,

249 
Pi˘uª
 
pi˘uª
,

250 
vÆuemask
,

251 
_Xc⁄°
 
XRídîPi˘uªAâribuãs
 *
©åibuãs
);

254 
XRídîSëPi˘uªClùRe˘™gÀs
 (
Di•œy
 *
dpy
,

255 
Pi˘uª
 
pi˘uª
,

256 
xOrigö
,

257 
yOrigö
,

258 
_Xc⁄°
 
XRe˘™gÀ
 *
ª˘s
,

259 
n
);

262 
XRídîSëPi˘uªClùRegi⁄
 (
Di•œy
 *
dpy
,

263 
Pi˘uª
 
pi˘uª
,

264 
Regi⁄
 
r
);

267 
XRídîSëPi˘uªTønsf‹m
 (
Di•œy
 *
dpy
,

268 
Pi˘uª
 
pi˘uª
,

269 
XTønsf‹m
 *
å™sf‹m
);

272 
XRídîFªePi˘uª
 (
Di•œy
 *
dpy
,

273 
Pi˘uª
 
pi˘uª
);

276 
XRídîComposôe
 (
Di•œy
 *
dpy
,

277 
›
,

278 
Pi˘uª
 
§c
,

279 
Pi˘uª
 
mask
,

280 
Pi˘uª
 
d°
,

281 
§c_x
,

282 
§c_y
,

283 
mask_x
,

284 
mask_y
,

285 
d°_x
,

286 
d°_y
,

287 
width
,

288 
height
);

290 
GlyphSë


291 
XRídîCª©eGlyphSë
 (
Di•œy
 *
dpy
, 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
f‹m©
);

293 
GlyphSë


294 
XRídîRe„ªn˚GlyphSë
 (
Di•œy
 *
dpy
, 
GlyphSë
 
exi°ög
);

297 
XRídîFªeGlyphSë
 (
Di•œy
 *
dpy
, 
GlyphSë
 
glyph£t
);

300 
XRídîAddGlyphs
 (
Di•œy
 *
dpy
,

301 
GlyphSë
 
glyph£t
,

302 
_Xc⁄°
 
Glyph
 *
gids
,

303 
_Xc⁄°
 
XGlyphInfo
 *
glyphs
,

304 
nglyphs
,

305 
_Xc⁄°
 *
images
,

306 
nbyã_images
);

309 
XRídîFªeGlyphs
 (
Di•œy
 *
dpy
,

310 
GlyphSë
 
glyph£t
,

311 
_Xc⁄°
 
Glyph
 *
gids
,

312 
nglyphs
);

315 
XRídîComposôeSåög8
 (
Di•œy
 *
dpy
,

316 
›
,

317 
Pi˘uª
 
§c
,

318 
Pi˘uª
 
d°
,

319 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
maskF‹m©
,

320 
GlyphSë
 
glyph£t
,

321 
xSrc
,

322 
ySrc
,

323 
xD°
,

324 
yD°
,

325 
_Xc⁄°
 *
°rög
,

326 
nch¨
);

329 
XRídîComposôeSåög16
 (
Di•œy
 *
dpy
,

330 
›
,

331 
Pi˘uª
 
§c
,

332 
Pi˘uª
 
d°
,

333 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
maskF‹m©
,

334 
GlyphSë
 
glyph£t
,

335 
xSrc
,

336 
ySrc
,

337 
xD°
,

338 
yD°
,

339 
_Xc⁄°
 *
°rög
,

340 
nch¨
);

343 
XRídîComposôeSåög32
 (
Di•œy
 *
dpy
,

344 
›
,

345 
Pi˘uª
 
§c
,

346 
Pi˘uª
 
d°
,

347 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
maskF‹m©
,

348 
GlyphSë
 
glyph£t
,

349 
xSrc
,

350 
ySrc
,

351 
xD°
,

352 
yD°
,

353 
_Xc⁄°
 *
°rög
,

354 
nch¨
);

357 
XRídîComposôeText8
 (
Di•œy
 *
dpy
,

358 
›
,

359 
Pi˘uª
 
§c
,

360 
Pi˘uª
 
d°
,

361 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
maskF‹m©
,

362 
xSrc
,

363 
ySrc
,

364 
xD°
,

365 
yD°
,

366 
_Xc⁄°
 
XGlyphE…8
 *
ñts
,

367 
√…
);

370 
XRídîComposôeText16
 (
Di•œy
 *
dpy
,

371 
›
,

372 
Pi˘uª
 
§c
,

373 
Pi˘uª
 
d°
,

374 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
maskF‹m©
,

375 
xSrc
,

376 
ySrc
,

377 
xD°
,

378 
yD°
,

379 
_Xc⁄°
 
XGlyphE…16
 *
ñts
,

380 
√…
);

383 
XRídîComposôeText32
 (
Di•œy
 *
dpy
,

384 
›
,

385 
Pi˘uª
 
§c
,

386 
Pi˘uª
 
d°
,

387 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
maskF‹m©
,

388 
xSrc
,

389 
ySrc
,

390 
xD°
,

391 
yD°
,

392 
_Xc⁄°
 
XGlyphE…32
 *
ñts
,

393 
√…
);

396 
XRídîFûlRe˘™gÀ
 (
Di•œy
 *
dpy
,

397 
›
,

398 
Pi˘uª
 
d°
,

399 
_Xc⁄°
 
XRídîCﬁ‹
 *
cﬁ‹
,

400 
x
,

401 
y
,

402 
width
,

403 
height
);

406 
XRídîFûlRe˘™gÀs
 (
Di•œy
 *
dpy
,

407 
›
,

408 
Pi˘uª
 
d°
,

409 
_Xc⁄°
 
XRídîCﬁ‹
 *
cﬁ‹
,

410 
_Xc⁄°
 
XRe˘™gÀ
 *
ª˘™gÀs
,

411 
n_ª˘s
);

414 
XRídîComposôeTø≥zoids
 (
Di•œy
 *
dpy
,

415 
›
,

416 
Pi˘uª
 
§c
,

417 
Pi˘uª
 
d°
,

418 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
maskF‹m©
,

419 
xSrc
,

420 
ySrc
,

421 
_Xc⁄°
 
XTø≥zoid
 *
å≠s
,

422 
¡øp
);

425 
XRídîComposôeTrüngÀs
 (
Di•œy
 *
dpy
,

426 
›
,

427 
Pi˘uª
 
§c
,

428 
Pi˘uª
 
d°
,

429 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
maskF‹m©
,

430 
xSrc
,

431 
ySrc
,

432 
_Xc⁄°
 
XTrüngÀ
 *
åüngÀs
,

433 
¡rüngÀ
);

436 
XRídîComposôeTriSåù
 (
Di•œy
 *
dpy
,

437 
›
,

438 
Pi˘uª
 
§c
,

439 
Pi˘uª
 
d°
,

440 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
maskF‹m©
,

441 
xSrc
,

442 
ySrc
,

443 
_Xc⁄°
 
XPoötFixed
 *
poöts
,

444 
≈oöt
);

447 
XRídîComposôeTriF™
 (
Di•œy
 *
dpy
,

448 
›
,

449 
Pi˘uª
 
§c
,

450 
Pi˘uª
 
d°
,

451 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
maskF‹m©
,

452 
xSrc
,

453 
ySrc
,

454 
_Xc⁄°
 
XPoötFixed
 *
poöts
,

455 
≈oöt
);

458 
XRídîComposôeDoubÀPﬁy
 (
Di•œy
 *
dpy
,

459 
›
,

460 
Pi˘uª
 
§c
,

461 
Pi˘uª
 
d°
,

462 
_Xc⁄°
 
XRídîPi˘F‹m©
 *
maskF‹m©
,

463 
xSrc
,

464 
ySrc
,

465 
xD°
,

466 
yD°
,

467 
_Xc⁄°
 
XPoötDoubÀ
 *
Âoöts
,

468 
≈oöts
,

469 
wödög
);

470 
Sètus


471 
XRídîP¨£Cﬁ‹
(
Di•œy
 *
dpy
,

472 *
•ec
,

473 
XRídîCﬁ‹
 *
def
);

475 
Curs‹


476 
XRídîCª©eCurs‹
 (
Di•œy
 *
dpy
,

477 
Pi˘uª
 
sour˚
,

478 
x
,

479 
y
);

481 
XFûãrs
 *

482 
XRídîQuîyFûãrs
 (
Di•œy
 *
dpy
, 
DøwabÀ
 
døwabÀ
);

485 
XRídîSëPi˘uªFûãr
 (
Di•œy
 *
dpy
,

486 
Pi˘uª
 
pi˘uª
,

487 c⁄° *
fûãr
,

488 
XFixed
 *
∑øms
,

489 
≈¨ams
);

491 
Curs‹


492 
XRídîCª©eAnimCurs‹
 (
Di•œy
 *
dpy
,

493 
ncurs‹
,

494 
XAnimCurs‹
 *
curs‹s
);

498 
XRídîAddTøps
 (
Di•œy
 *
dpy
,

499 
Pi˘uª
 
pi˘uª
,

500 
xOff
,

501 
yOff
,

502 
_Xc⁄°
 
XTøp
 *
å≠s
,

503 
¡øp
);

505 
Pi˘uª
 
XRídîCª©eSﬁidFûl
 (
Di•œy
 *
dpy
,

506 c⁄° 
XRídîCﬁ‹
 *
cﬁ‹
);

508 
Pi˘uª
 
XRídîCª©eLöórGødõ¡
 (
Di•œy
 *
dpy
,

509 c⁄° 
XLöórGødõ¡
 *
gødõ¡
,

510 c⁄° 
XFixed
 *
°›s
,

511 c⁄° 
XRídîCﬁ‹
 *
cﬁ‹s
,

512 
n°›s
);

514 
Pi˘uª
 
XRídîCª©eRadülGødõ¡
 (
Di•œy
 *
dpy
,

515 c⁄° 
XRadülGødõ¡
 *
gødõ¡
,

516 c⁄° 
XFixed
 *
°›s
,

517 c⁄° 
XRídîCﬁ‹
 *
cﬁ‹s
,

518 
n°›s
);

520 
Pi˘uª
 
XRídîCª©eC⁄iˇlGødõ¡
 (
Di•œy
 *
dpy
,

521 c⁄° 
XC⁄iˇlGødõ¡
 *
gødõ¡
,

522 c⁄° 
XFixed
 *
°›s
,

523 c⁄° 
XRídîCﬁ‹
 *
cﬁ‹s
,

524 
n°›s
);

526 
	g_XFUNCPROTOEND


	@/usr/include/X11/keysymdef.h

115 
	#XK_VoidSymbﬁ
 0xfffff‡

	)

117 #ifde‡
XK_MISCELLANY


124 
	#XK_BackS∑˚
 0xff08

	)

125 
	#XK_Tab
 0xff09

	)

126 
	#XK_Löe„ed
 0xff0®

	)

127 
	#XK_CÀ¨
 0xff0b

	)

128 
	#XK_Rëu∫
 0xff0d

	)

129 
	#XK_Pau£
 0xff13

	)

130 
	#XK_S¸ﬁl_Lock
 0xff14

	)

131 
	#XK_Sys_Req
 0xff15

	)

132 
	#XK_Esˇ≥
 0xff1b

	)

133 
	#XK_Dñëe
 0xfff‡

	)

139 
	#XK_Mu…i_key
 0xff20

	)

140 
	#XK_Codeöput
 0xff37

	)

141 
	#XK_SögÀC™did©e
 0xff3c

	)

142 
	#XK_Mu…ùÀC™did©e
 0xff3d

	)

143 
	#XK_PªviousC™did©e
 0xff3e

	)

147 
	#XK_K™ji
 0xff21

	)

148 
	#XK_Muhík™
 0xff22

	)

149 
	#XK_Hík™_Mode
 0xff23

	)

150 
	#XK_Hík™
 0xff23

	)

151 
	#XK_Romaji
 0xff24

	)

152 
	#XK_Húag™a
 0xff25

	)

153 
	#XK_K©ak™a
 0xff26

	)

154 
	#XK_Húag™a_K©ak™a
 0xff27

	)

155 
	#XK_Zíkaku
 0xff28

	)

156 
	#XK_H™kaku
 0xff29

	)

157 
	#XK_Zíkaku_H™kaku
 0xff2®

	)

158 
	#XK_Touroku
 0xff2b

	)

159 
	#XK_Massyo
 0xff2¯

	)

160 
	#XK_K™a_Lock
 0xff2d

	)

161 
	#XK_K™a_Shi·
 0xff2ê

	)

162 
	#XK_Eisu_Shi·
 0xff2‡

	)

163 
	#XK_Eisu_toggÀ
 0xff30

	)

164 
	#XK_K™ji_B™gou
 0xff37

	)

165 
	#XK_Zí_Koho
 0xff3d

	)

166 
	#XK_M´_Koho
 0xff3ê

	)

172 
	#XK_Home
 0xff50

	)

173 
	#XK_Le·
 0xff51

	)

174 
	#XK_Up
 0xff52

	)

175 
	#XK_Right
 0xff53

	)

176 
	#XK_Down
 0xff54

	)

177 
	#XK_Pri‹
 0xff55

	)

178 
	#XK_Page_Up
 0xff55

	)

179 
	#XK_Next
 0xff56

	)

180 
	#XK_Page_Down
 0xff56

	)

181 
	#XK_End
 0xff57

	)

182 
	#XK_Begö
 0xff58

	)

187 
	#XK_Sñe˘
 0xff60

	)

188 
	#XK_Pröt
 0xff61

	)

189 
	#XK_Execuã
 0xff62

	)

190 
	#XK_In£π
 0xff63

	)

191 
	#XK_Undo
 0xff65

	)

192 
	#XK_Redo
 0xff66

	)

193 
	#XK_Míu
 0xff67

	)

194 
	#XK_Föd
 0xff68

	)

195 
	#XK_C™˚l
 0xff69

	)

196 
	#XK_Hñp
 0xff6®

	)

197 
	#XK_Bªak
 0xff6b

	)

198 
	#XK_Mode_swôch
 0xff7ê

	)

199 
	#XK_s¸ùt_swôch
 0xff7ê

	)

200 
	#XK_Num_Lock
 0xff7f

	)

204 
	#XK_KP_S∑˚
 0xff80

	)

205 
	#XK_KP_Tab
 0xff89

	)

206 
	#XK_KP_E¡î
 0xff8d

	)

207 
	#XK_KP_F1
 0xff91

	)

208 
	#XK_KP_F2
 0xff92

	)

209 
	#XK_KP_F3
 0xff93

	)

210 
	#XK_KP_F4
 0xff94

	)

211 
	#XK_KP_Home
 0xff95

	)

212 
	#XK_KP_Le·
 0xff96

	)

213 
	#XK_KP_Up
 0xff97

	)

214 
	#XK_KP_Right
 0xff98

	)

215 
	#XK_KP_Down
 0xff99

	)

216 
	#XK_KP_Pri‹
 0xff9a

	)

217 
	#XK_KP_Page_Up
 0xff9a

	)

218 
	#XK_KP_Next
 0xff9b

	)

219 
	#XK_KP_Page_Down
 0xff9b

	)

220 
	#XK_KP_End
 0xff9c

	)

221 
	#XK_KP_Begö
 0xff9d

	)

222 
	#XK_KP_In£π
 0xff9e

	)

223 
	#XK_KP_Dñëe
 0xff9f

	)

224 
	#XK_KP_EquÆ
 0xffbd

	)

225 
	#XK_KP_Mu…ùly
 0xfÁa

	)

226 
	#XK_KP_Add
 0xfÁb

	)

227 
	#XK_KP_Sï¨©‹
 0xfÁ¯

	)

228 
	#XK_KP_Subåa˘
 0xfÁd

	)

229 
	#XK_KP_DecimÆ
 0xfÁe

	)

230 
	#XK_KP_Divide
 0xfÁf

	)

232 
	#XK_KP_0
 0xffb0

	)

233 
	#XK_KP_1
 0xffb1

	)

234 
	#XK_KP_2
 0xffb2

	)

235 
	#XK_KP_3
 0xffb3

	)

236 
	#XK_KP_4
 0xffb4

	)

237 
	#XK_KP_5
 0xffb5

	)

238 
	#XK_KP_6
 0xffb6

	)

239 
	#XK_KP_7
 0xffb7

	)

240 
	#XK_KP_8
 0xffb8

	)

241 
	#XK_KP_9
 0xffb9

	)

252 
	#XK_F1
 0xffbe

	)

253 
	#XK_F2
 0xffbf

	)

254 
	#XK_F3
 0xffc0

	)

255 
	#XK_F4
 0xffc1

	)

256 
	#XK_F5
 0xffc2

	)

257 
	#XK_F6
 0xffc3

	)

258 
	#XK_F7
 0xffc4

	)

259 
	#XK_F8
 0xffc5

	)

260 
	#XK_F9
 0xffc6

	)

261 
	#XK_F10
 0xffc7

	)

262 
	#XK_F11
 0xffc8

	)

263 
	#XK_L1
 0xffc8

	)

264 
	#XK_F12
 0xffc9

	)

265 
	#XK_L2
 0xffc9

	)

266 
	#XK_F13
 0xffˇ

	)

267 
	#XK_L3
 0xffˇ

	)

268 
	#XK_F14
 0xffcb

	)

269 
	#XK_L4
 0xffcb

	)

270 
	#XK_F15
 0xffcc

	)

271 
	#XK_L5
 0xffcc

	)

272 
	#XK_F16
 0xffcd

	)

273 
	#XK_L6
 0xffcd

	)

274 
	#XK_F17
 0xff˚

	)

275 
	#XK_L7
 0xff˚

	)

276 
	#XK_F18
 0xffcf

	)

277 
	#XK_L8
 0xffcf

	)

278 
	#XK_F19
 0xffd0

	)

279 
	#XK_L9
 0xffd0

	)

280 
	#XK_F20
 0xffd1

	)

281 
	#XK_L10
 0xffd1

	)

282 
	#XK_F21
 0xffd2

	)

283 
	#XK_R1
 0xffd2

	)

284 
	#XK_F22
 0xffd3

	)

285 
	#XK_R2
 0xffd3

	)

286 
	#XK_F23
 0xffd4

	)

287 
	#XK_R3
 0xffd4

	)

288 
	#XK_F24
 0xffd5

	)

289 
	#XK_R4
 0xffd5

	)

290 
	#XK_F25
 0xffd6

	)

291 
	#XK_R5
 0xffd6

	)

292 
	#XK_F26
 0xffd7

	)

293 
	#XK_R6
 0xffd7

	)

294 
	#XK_F27
 0xffd8

	)

295 
	#XK_R7
 0xffd8

	)

296 
	#XK_F28
 0xffd9

	)

297 
	#XK_R8
 0xffd9

	)

298 
	#XK_F29
 0xffda

	)

299 
	#XK_R9
 0xffda

	)

300 
	#XK_F30
 0xffdb

	)

301 
	#XK_R10
 0xffdb

	)

302 
	#XK_F31
 0xffdc

	)

303 
	#XK_R11
 0xffdc

	)

304 
	#XK_F32
 0xffdd

	)

305 
	#XK_R12
 0xffdd

	)

306 
	#XK_F33
 0xffde

	)

307 
	#XK_R13
 0xffde

	)

308 
	#XK_F34
 0xffdf

	)

309 
	#XK_R14
 0xffdf

	)

310 
	#XK_F35
 0xf„0

	)

311 
	#XK_R15
 0xf„0

	)

315 
	#XK_Shi·_L
 0xf„1

	)

316 
	#XK_Shi·_R
 0xf„2

	)

317 
	#XK_C⁄åﬁ_L
 0xf„3

	)

318 
	#XK_C⁄åﬁ_R
 0xf„4

	)

319 
	#XK_C≠s_Lock
 0xf„5

	)

320 
	#XK_Shi·_Lock
 0xf„6

	)

322 
	#XK_Mëa_L
 0xf„7

	)

323 
	#XK_Mëa_R
 0xf„8

	)

324 
	#XK_A…_L
 0xf„9

	)

325 
	#XK_A…_R
 0xf„®

	)

326 
	#XK_Su≥r_L
 0xf„b

	)

327 
	#XK_Su≥r_R
 0xf„¯

	)

328 
	#XK_Hy≥r_L
 0xf„d

	)

329 
	#XK_Hy≥r_R
 0xf„ê

	)

338 #ifde‡
XK_XKB_KEYS


339 
	#XK_ISO_Lock
 0x„01

	)

340 
	#XK_ISO_Levñ2_L©ch
 0x„02

	)

341 
	#XK_ISO_Levñ3_Shi·
 0x„03

	)

342 
	#XK_ISO_Levñ3_L©ch
 0x„04

	)

343 
	#XK_ISO_Levñ3_Lock
 0x„05

	)

344 
	#XK_ISO_Levñ5_Shi·
 0x„11

	)

345 
	#XK_ISO_Levñ5_L©ch
 0x„12

	)

346 
	#XK_ISO_Levñ5_Lock
 0x„13

	)

347 
	#XK_ISO_Group_Shi·
 0xff7ê

	)

348 
	#XK_ISO_Group_L©ch
 0x„06

	)

349 
	#XK_ISO_Group_Lock
 0x„07

	)

350 
	#XK_ISO_Next_Group
 0x„08

	)

351 
	#XK_ISO_Next_Group_Lock
 0x„09

	)

352 
	#XK_ISO_Pªv_Group
 0x„0a

	)

353 
	#XK_ISO_Pªv_Group_Lock
 0x„0b

	)

354 
	#XK_ISO_Fú°_Group
 0x„0c

	)

355 
	#XK_ISO_Fú°_Group_Lock
 0x„0d

	)

356 
	#XK_ISO_La°_Group
 0x„0e

	)

357 
	#XK_ISO_La°_Group_Lock
 0x„0f

	)

359 
	#XK_ISO_Le·_Tab
 0x„20

	)

360 
	#XK_ISO_Move_Löe_Up
 0x„21

	)

361 
	#XK_ISO_Move_Löe_Down
 0x„22

	)

362 
	#XK_ISO_P¨tül_Löe_Up
 0x„23

	)

363 
	#XK_ISO_P¨tül_Löe_Down
 0x„24

	)

364 
	#XK_ISO_P¨tül_S∑˚_Le·
 0x„25

	)

365 
	#XK_ISO_P¨tül_S∑˚_Right
 0x„26

	)

366 
	#XK_ISO_Së_M¨gö_Le·
 0x„27

	)

367 
	#XK_ISO_Së_M¨gö_Right
 0x„28

	)

368 
	#XK_ISO_Rñó£_M¨gö_Le·
 0x„29

	)

369 
	#XK_ISO_Rñó£_M¨gö_Right
 0x„2a

	)

370 
	#XK_ISO_Rñó£_BŸh_M¨gös
 0x„2b

	)

371 
	#XK_ISO_Fa°_Curs‹_Le·
 0x„2c

	)

372 
	#XK_ISO_Fa°_Curs‹_Right
 0x„2d

	)

373 
	#XK_ISO_Fa°_Curs‹_Up
 0x„2e

	)

374 
	#XK_ISO_Fa°_Curs‹_Down
 0x„2f

	)

375 
	#XK_ISO_C⁄töuous_Undîlöe
 0x„30

	)

376 
	#XK_ISO_Disc⁄töuous_Undîlöe
 0x„31

	)

377 
	#XK_ISO_Emphasize
 0x„32

	)

378 
	#XK_ISO_Cíãr_Obje˘
 0x„33

	)

379 
	#XK_ISO_E¡î
 0x„34

	)

381 
	#XK_dód_gøve
 0x„50

	)

382 
	#XK_dód_acuã
 0x„51

	)

383 
	#XK_dód_cúcumÊex
 0x„52

	)

384 
	#XK_dód_tûde
 0x„53

	)

385 
	#XK_dód_≥ri•omíi
 0x„53

	)

386 
	#XK_dód_ma¸⁄
 0x„54

	)

387 
	#XK_dód_bªve
 0x„55

	)

388 
	#XK_dód_abovedŸ
 0x„56

	)

389 
	#XK_dód_düîesis
 0x„57

	)

390 
	#XK_dód_abovîög
 0x„58

	)

391 
	#XK_dód_doubÀacuã
 0x„59

	)

392 
	#XK_dód_ˇr⁄
 0x„5a

	)

393 
	#XK_dód_˚dûœ
 0x„5b

	)

394 
	#XK_dód_og⁄ek
 0x„5c

	)

395 
	#XK_dód_iŸa
 0x„5d

	)

396 
	#XK_dód_voi˚d_sound
 0x„5e

	)

397 
	#XK_dód_£mivoi˚d_sound
 0x„5f

	)

398 
	#XK_dód_bñowdŸ
 0x„60

	)

399 
	#XK_dód_hook
 0x„61

	)

400 
	#XK_dód_h‹n
 0x„62

	)

401 
	#XK_dód_°roke
 0x„63

	)

402 
	#XK_dód_abovecomma
 0x„64

	)

403 
	#XK_dód_psûi
 0x„64

	)

404 
	#XK_dód_abovîevî£dcomma
 0x„65

	)

405 
	#XK_dód_dasü
 0x„65

	)

406 
	#XK_dód_doubÀgøve
 0x„66

	)

407 
	#XK_dód_bñowrög
 0x„67

	)

408 
	#XK_dód_bñowma¸⁄
 0x„68

	)

409 
	#XK_dód_bñowcúcumÊex
 0x„69

	)

410 
	#XK_dód_bñowtûde
 0x„6a

	)

411 
	#XK_dód_bñowbªve
 0x„6b

	)

412 
	#XK_dód_bñowdüîesis
 0x„6c

	)

413 
	#XK_dód_övîãdbªve
 0x„6d

	)

414 
	#XK_dód_bñowcomma
 0x„6e

	)

415 
	#XK_dód_cuºícy
 0x„6f

	)

418 
	#XK_dód_lowlöe
 0x„90

	)

419 
	#XK_dód_abovevîtiˇŒöe
 0x„91

	)

420 
	#XK_dód_bñowvîtiˇŒöe
 0x„92

	)

421 
	#XK_dód_l⁄gsﬁidusovîœy
 0x„93

	)

424 
	#XK_dód_a
 0x„80

	)

425 
	#XK_dód_A
 0x„81

	)

426 
	#XK_dód_e
 0x„82

	)

427 
	#XK_dód_E
 0x„83

	)

428 
	#XK_dód_i
 0x„84

	)

429 
	#XK_dód_I
 0x„85

	)

430 
	#XK_dód_o
 0x„86

	)

431 
	#XK_dód_O
 0x„87

	)

432 
	#XK_dód_u
 0x„88

	)

433 
	#XK_dód_U
 0x„89

	)

434 
	#XK_dód_smÆl_schwa
 0x„8a

	)

435 
	#XK_dód_ˇpôÆ_schwa
 0x„8b

	)

437 
	#XK_dód_gªek
 0x„8c

	)

439 
	#XK_Fú°_VútuÆ_S¸ìn
 0x„d0

	)

440 
	#XK_Pªv_VútuÆ_S¸ìn
 0x„d1

	)

441 
	#XK_Next_VútuÆ_S¸ìn
 0x„d2

	)

442 
	#XK_La°_VútuÆ_S¸ìn
 0x„d4

	)

443 
	#XK_Tîmö©e_Sîvî
 0x„d5

	)

445 
	#XK_Ac˚ssX_E«bÀ
 0x„70

	)

446 
	#XK_Ac˚ssX_Fìdback_E«bÀ
 0x„71

	)

447 
	#XK_RïótKeys_E«bÀ
 0x„72

	)

448 
	#XK_SlowKeys_E«bÀ
 0x„73

	)

449 
	#XK_Boun˚Keys_E«bÀ
 0x„74

	)

450 
	#XK_StickyKeys_E«bÀ
 0x„75

	)

451 
	#XK_Mou£Keys_E«bÀ
 0x„76

	)

452 
	#XK_Mou£Keys_Ac˚l_E«bÀ
 0x„77

	)

453 
	#XK_Ovîœy1_E«bÀ
 0x„78

	)

454 
	#XK_Ovîœy2_E«bÀ
 0x„79

	)

455 
	#XK_AudibÀBñl_E«bÀ
 0x„7a

	)

457 
	#XK_Poöãr_Le·
 0x„e0

	)

458 
	#XK_Poöãr_Right
 0x„e1

	)

459 
	#XK_Poöãr_Up
 0x„e2

	)

460 
	#XK_Poöãr_Down
 0x„e3

	)

461 
	#XK_Poöãr_UpLe·
 0x„e4

	)

462 
	#XK_Poöãr_UpRight
 0x„e5

	)

463 
	#XK_Poöãr_DownLe·
 0x„e6

	)

464 
	#XK_Poöãr_DownRight
 0x„e7

	)

465 
	#XK_Poöãr_Buâ⁄_DÊt
 0x„e8

	)

466 
	#XK_Poöãr_Buâ⁄1
 0x„e9

	)

467 
	#XK_Poöãr_Buâ⁄2
 0x„ó

	)

468 
	#XK_Poöãr_Buâ⁄3
 0x„eb

	)

469 
	#XK_Poöãr_Buâ⁄4
 0x„ec

	)

470 
	#XK_Poöãr_Buâ⁄5
 0x„ed

	)

471 
	#XK_Poöãr_DblClick_DÊt
 0x„ì

	)

472 
	#XK_Poöãr_DblClick1
 0x„ef

	)

473 
	#XK_Poöãr_DblClick2
 0x„f0

	)

474 
	#XK_Poöãr_DblClick3
 0x„f1

	)

475 
	#XK_Poöãr_DblClick4
 0x„f2

	)

476 
	#XK_Poöãr_DblClick5
 0x„f3

	)

477 
	#XK_Poöãr_Døg_DÊt
 0x„f4

	)

478 
	#XK_Poöãr_Døg1
 0x„f5

	)

479 
	#XK_Poöãr_Døg2
 0x„f6

	)

480 
	#XK_Poöãr_Døg3
 0x„f7

	)

481 
	#XK_Poöãr_Døg4
 0x„f8

	)

482 
	#XK_Poöãr_Døg5
 0x„fd

	)

484 
	#XK_Poöãr_E«bÀKeys
 0x„f9

	)

485 
	#XK_Poöãr_Ac˚Àøã
 0x„Á

	)

486 
	#XK_Poöãr_DÊtBäNext
 0x„fb

	)

487 
	#XK_Poöãr_DÊtBäPªv
 0x„fc

	)

491 
	#XK_ch
 0x„a0

	)

492 
	#XK_Ch
 0x„a1

	)

493 
	#XK_CH
 0x„a2

	)

494 
	#XK_c_h
 0x„a3

	)

495 
	#XK_C_h
 0x„a4

	)

496 
	#XK_C_H
 0x„a5

	)

505 #ifde‡
XK_3270


506 
	#XK_3270_Du∂iˇã
 0xfd01

	)

507 
	#XK_3270_FõldM¨k
 0xfd02

	)

508 
	#XK_3270_Right2
 0xfd03

	)

509 
	#XK_3270_Le·2
 0xfd04

	)

510 
	#XK_3270_BackTab
 0xfd05

	)

511 
	#XK_3270_Eø£EOF
 0xfd06

	)

512 
	#XK_3270_Eø£I≈ut
 0xfd07

	)

513 
	#XK_3270_Re£t
 0xfd08

	)

514 
	#XK_3270_Quô
 0xfd09

	)

515 
	#XK_3270_PA1
 0xfd0a

	)

516 
	#XK_3270_PA2
 0xfd0b

	)

517 
	#XK_3270_PA3
 0xfd0c

	)

518 
	#XK_3270_Te°
 0xfd0d

	)

519 
	#XK_3270_Aân
 0xfd0e

	)

520 
	#XK_3270_Curs‹Blök
 0xfd0f

	)

521 
	#XK_3270_A…Curs‹
 0xfd10

	)

522 
	#XK_3270_KeyClick
 0xfd11

	)

523 
	#XK_3270_Jump
 0xfd12

	)

524 
	#XK_3270_Idít
 0xfd13

	)

525 
	#XK_3270_RuÀ
 0xfd14

	)

526 
	#XK_3270_C›y
 0xfd15

	)

527 
	#XK_3270_Pœy
 0xfd16

	)

528 
	#XK_3270_Sëup
 0xfd17

	)

529 
	#XK_3270_Rec‹d
 0xfd18

	)

530 
	#XK_3270_Ch™geS¸ìn
 0xfd19

	)

531 
	#XK_3270_DñëeW‹d
 0xfd1a

	)

532 
	#XK_3270_ExSñe˘
 0xfd1b

	)

533 
	#XK_3270_Curs‹Sñe˘
 0xfd1c

	)

534 
	#XK_3270_PrötS¸ìn
 0xfd1d

	)

535 
	#XK_3270_E¡î
 0xfd1e

	)

543 #ifde‡
XK_LATIN1


544 
	#XK_•a˚
 0x0020

	)

545 
	#XK_ex˛am
 0x0021

	)

546 
	#XK_quŸedbl
 0x0022

	)

547 
	#XK_numbîsign
 0x0023

	)

548 
	#XK_dﬁœr
 0x0024

	)

549 
	#XK_≥r˚¡
 0x0025

	)

550 
	#XK_am≥rßnd
 0x0026

	)

551 
	#XK_≠o°r›he
 0x0027

	)

552 
	#XK_quŸîight
 0x0027

	)

553 
	#XK_∑ª∆e·
 0x0028

	)

554 
	#XK_∑ªƒight
 0x0029

	)

555 
	#XK_a°îisk
 0x002®

	)

556 
	#XK_∂us
 0x002b

	)

557 
	#XK_comma
 0x002¯

	)

558 
	#XK_möus
 0x002d

	)

559 
	#XK_≥riod
 0x002ê

	)

560 
	#XK_¶ash
 0x002‡

	)

561 
	#XK_0
 0x0030

	)

562 
	#XK_1
 0x0031

	)

563 
	#XK_2
 0x0032

	)

564 
	#XK_3
 0x0033

	)

565 
	#XK_4
 0x0034

	)

566 
	#XK_5
 0x0035

	)

567 
	#XK_6
 0x0036

	)

568 
	#XK_7
 0x0037

	)

569 
	#XK_8
 0x0038

	)

570 
	#XK_9
 0x0039

	)

571 
	#XK_cﬁ⁄
 0x003®

	)

572 
	#XK_£micﬁ⁄
 0x003b

	)

573 
	#XK_Àss
 0x003¯

	)

574 
	#XK_equÆ
 0x003d

	)

575 
	#XK_gª©î
 0x003ê

	)

576 
	#XK_que°i⁄
 0x003‡

	)

577 
	#XK_©
 0x0040

	)

578 
	#XK_A
 0x0041

	)

579 
	#XK_B
 0x0042

	)

580 
	#XK_C
 0x0043

	)

581 
	#XK_D
 0x0044

	)

582 
	#XK_E
 0x0045

	)

583 
	#XK_F
 0x0046

	)

584 
	#XK_G
 0x0047

	)

585 
	#XK_H
 0x0048

	)

586 
	#XK_I
 0x0049

	)

587 
	#XK_J
 0x004®

	)

588 
	#XK_K
 0x004b

	)

589 
	#XK_L
 0x004¯

	)

590 
	#XK_M
 0x004d

	)

591 
	#XK_N
 0x004ê

	)

592 
	#XK_O
 0x004‡

	)

593 
	#XK_P
 0x0050

	)

594 
	#XK_Q
 0x0051

	)

595 
	#XK_R
 0x0052

	)

596 
	#XK_S
 0x0053

	)

597 
	#XK_T
 0x0054

	)

598 
	#XK_U
 0x0055

	)

599 
	#XK_V
 0x0056

	)

600 
	#XK_W
 0x0057

	)

601 
	#XK_X
 0x0058

	)

602 
	#XK_Y
 0x0059

	)

603 
	#XK_Z
 0x005®

	)

604 
	#XK_bøckëÀ·
 0x005b

	)

605 
	#XK_back¶ash
 0x005¯

	)

606 
	#XK_bøckëright
 0x005d

	)

607 
	#XK_asciicúcum
 0x005ê

	)

608 
	#XK_undîsc‹e
 0x005‡

	)

609 
	#XK_gøve
 0x0060

	)

610 
	#XK_quŸñe·
 0x0060

	)

611 
	#XK_a
 0x0061

	)

612 
	#XK_b
 0x0062

	)

613 
	#XK_c
 0x0063

	)

614 
	#XK_d
 0x0064

	)

615 
	#XK_e
 0x0065

	)

616 
	#XK_f
 0x0066

	)

617 
	#XK_g
 0x0067

	)

618 
	#XK_h
 0x0068

	)

619 
	#XK_i
 0x0069

	)

620 
	#XK_j
 0x006®

	)

621 
	#XK_k
 0x006b

	)

622 
	#XK_l
 0x006¯

	)

623 
	#XK_m
 0x006d

	)

624 
	#XK_n
 0x006ê

	)

625 
	#XK_o
 0x006‡

	)

626 
	#XK_p
 0x0070

	)

627 
	#XK_q
 0x0071

	)

628 
	#XK_r
 0x0072

	)

629 
	#XK_s
 0x0073

	)

630 
	#XK_t
 0x0074

	)

631 
	#XK_u
 0x0075

	)

632 
	#XK_v
 0x0076

	)

633 
	#XK_w
 0x0077

	)

634 
	#XK_x
 0x0078

	)

635 
	#XK_y
 0x0079

	)

636 
	#XK_z
 0x007®

	)

637 
	#XK_bø˚À·
 0x007b

	)

638 
	#XK_b¨
 0x007¯

	)

639 
	#XK_bø˚right
 0x007d

	)

640 
	#XK_asciôûde
 0x007ê

	)

642 
	#XK_nobªak•a˚
 0x00a0

	)

643 
	#XK_ex˛amdown
 0x00a1

	)

644 
	#XK_˚¡
 0x00a2

	)

645 
	#XK_°îlög
 0x00a3

	)

646 
	#XK_cuºícy
 0x00a4

	)

647 
	#XK_yí
 0x00a5

	)

648 
	#XK_brokíb¨
 0x00a6

	)

649 
	#XK_£˘i⁄
 0x00a7

	)

650 
	#XK_düîesis
 0x00a8

	)

651 
	#XK_c›yright
 0x00a9

	)

652 
	#XK_‹d„mööe
 0x00Ø

	)

653 
	#XK_guûÀmŸÀ·
 0x00ab

	)

654 
	#XK_nŸsign
 0x00a¯

	)

655 
	#XK_hyphí
 0x00ad

	)

656 
	#XK_ªgi°îed
 0x00´

	)

657 
	#XK_ma¸⁄
 0x00a‡

	)

658 
	#XK_degªe
 0x00b0

	)

659 
	#XK_∂usmöus
 0x00b1

	)

660 
	#XK_twosu≥ri‹
 0x00b2

	)

661 
	#XK_thªesu≥ri‹
 0x00b3

	)

662 
	#XK_acuã
 0x00b4

	)

663 
	#XK_mu
 0x00b5

	)

664 
	#XK_∑øgøph
 0x00b6

	)

665 
	#XK_≥riod˚¡îed
 0x00b7

	)

666 
	#XK_˚dûœ
 0x00b8

	)

667 
	#XK_⁄esu≥ri‹
 0x00b9

	)

668 
	#XK_masculöe
 0x00b®

	)

669 
	#XK_guûÀmŸright
 0x00bb

	)

670 
	#XK_⁄equ¨ãr
 0x00b¯

	)

671 
	#XK_⁄ehÆf
 0x00bd

	)

672 
	#XK_thªequ¨ãrs
 0x00bê

	)

673 
	#XK_que°i⁄down
 0x00b‡

	)

674 
	#XK_Agøve
 0x00c0

	)

675 
	#XK_Aacuã
 0x00c1

	)

676 
	#XK_AcúcumÊex
 0x00c2

	)

677 
	#XK_Atûde
 0x00c3

	)

678 
	#XK_Adüîesis
 0x00c4

	)

679 
	#XK_Arög
 0x00c5

	)

680 
	#XK_AE
 0x00c6

	)

681 
	#XK_C˚dûœ
 0x00c7

	)

682 
	#XK_Egøve
 0x00c8

	)

683 
	#XK_Eacuã
 0x00c9

	)

684 
	#XK_EcúcumÊex
 0x00ˇ

	)

685 
	#XK_Edüîesis
 0x00cb

	)

686 
	#XK_Igøve
 0x00c¯

	)

687 
	#XK_Iacuã
 0x00cd

	)

688 
	#XK_IcúcumÊex
 0x00˚

	)

689 
	#XK_Idüîesis
 0x00c‡

	)

690 
	#XK_ETH
 0x00d0

	)

691 
	#XK_Eth
 0x00d0

	)

692 
	#XK_Ntûde
 0x00d1

	)

693 
	#XK_Ogøve
 0x00d2

	)

694 
	#XK_Oacuã
 0x00d3

	)

695 
	#XK_OcúcumÊex
 0x00d4

	)

696 
	#XK_Otûde
 0x00d5

	)

697 
	#XK_Odüîesis
 0x00d6

	)

698 
	#XK_mu…ùly
 0x00d7

	)

699 
	#XK_O¶ash
 0x00d8

	)

700 
	#XK_Ooblique
 0x00d8

	)

701 
	#XK_Ugøve
 0x00d9

	)

702 
	#XK_Uacuã
 0x00d®

	)

703 
	#XK_UcúcumÊex
 0x00db

	)

704 
	#XK_Udüîesis
 0x00d¯

	)

705 
	#XK_Yacuã
 0x00dd

	)

706 
	#XK_THORN
 0x00dê

	)

707 
	#XK_Th‹n
 0x00dê

	)

708 
	#XK_ssh¨p
 0x00d‡

	)

709 
	#XK_agøve
 0x00e0

	)

710 
	#XK_Øcuã
 0x00e1

	)

711 
	#XK_acúcumÊex
 0x00e2

	)

712 
	#XK_©ûde
 0x00e3

	)

713 
	#XK_adüîesis
 0x00e4

	)

714 
	#XK_¨ög
 0x00e5

	)

715 
	#XK_´
 0x00e6

	)

716 
	#XK_c˚dûœ
 0x00e7

	)

717 
	#XK_egøve
 0x00e8

	)

718 
	#XK_ócuã
 0x00e9

	)

719 
	#XK_ecúcumÊex
 0x00ó

	)

720 
	#XK_edüîesis
 0x00eb

	)

721 
	#XK_igøve
 0x00e¯

	)

722 
	#XK_ücuã
 0x00ed

	)

723 
	#XK_icúcumÊex
 0x00ì

	)

724 
	#XK_idüîesis
 0x00e‡

	)

725 
	#XK_ëh
 0x00f0

	)

726 
	#XK_¡ûde
 0x00f1

	)

727 
	#XK_ogøve
 0x00f2

	)

728 
	#XK_ﬂcuã
 0x00f3

	)

729 
	#XK_ocúcumÊex
 0x00f4

	)

730 
	#XK_Ÿûde
 0x00f5

	)

731 
	#XK_odüîesis
 0x00f6

	)

732 
	#XK_divisi⁄
 0x00f7

	)

733 
	#XK_o¶ash
 0x00f8

	)

734 
	#XK_ooblique
 0x00f8

	)

735 
	#XK_ugøve
 0x00f9

	)

736 
	#XK_uacuã
 0x00Á

	)

737 
	#XK_ucúcumÊex
 0x00fb

	)

738 
	#XK_udüîesis
 0x00f¯

	)

739 
	#XK_yacuã
 0x00fd

	)

740 
	#XK_th‹n
 0x00„

	)

741 
	#XK_ydüîesis
 0x00f‡

	)

749 #ifde‡
XK_LATIN2


750 
	#XK_Aog⁄ek
 0x01a1

	)

751 
	#XK_bªve
 0x01a2

	)

752 
	#XK_L°roke
 0x01a3

	)

753 
	#XK_Lˇr⁄
 0x01a5

	)

754 
	#XK_Sacuã
 0x01a6

	)

755 
	#XK_Sˇr⁄
 0x01a9

	)

756 
	#XK_S˚dûœ
 0x01Ø

	)

757 
	#XK_Tˇr⁄
 0x01ab

	)

758 
	#XK_Zacuã
 0x01a¯

	)

759 
	#XK_Zˇr⁄
 0x01´

	)

760 
	#XK_ZabovedŸ
 0x01a‡

	)

761 
	#XK_aog⁄ek
 0x01b1

	)

762 
	#XK_og⁄ek
 0x01b2

	)

763 
	#XK_l°roke
 0x01b3

	)

764 
	#XK_lˇr⁄
 0x01b5

	)

765 
	#XK_ßcuã
 0x01b6

	)

766 
	#XK_ˇr⁄
 0x01b7

	)

767 
	#XK_sˇr⁄
 0x01b9

	)

768 
	#XK_s˚dûœ
 0x01b®

	)

769 
	#XK_tˇr⁄
 0x01bb

	)

770 
	#XK_zacuã
 0x01b¯

	)

771 
	#XK_doubÀacuã
 0x01bd

	)

772 
	#XK_zˇr⁄
 0x01bê

	)

773 
	#XK_zabovedŸ
 0x01b‡

	)

774 
	#XK_Racuã
 0x01c0

	)

775 
	#XK_Abªve
 0x01c3

	)

776 
	#XK_Lacuã
 0x01c5

	)

777 
	#XK_Cacuã
 0x01c6

	)

778 
	#XK_Cˇr⁄
 0x01c8

	)

779 
	#XK_Eog⁄ek
 0x01ˇ

	)

780 
	#XK_Eˇr⁄
 0x01c¯

	)

781 
	#XK_Dˇr⁄
 0x01c‡

	)

782 
	#XK_D°roke
 0x01d0

	)

783 
	#XK_Nacuã
 0x01d1

	)

784 
	#XK_Nˇr⁄
 0x01d2

	)

785 
	#XK_OdoubÀacuã
 0x01d5

	)

786 
	#XK_Rˇr⁄
 0x01d8

	)

787 
	#XK_Urög
 0x01d9

	)

788 
	#XK_UdoubÀacuã
 0x01db

	)

789 
	#XK_T˚dûœ
 0x01dê

	)

790 
	#XK_øcuã
 0x01e0

	)

791 
	#XK_abªve
 0x01e3

	)

792 
	#XK_œcuã
 0x01e5

	)

793 
	#XK_ˇcuã
 0x01e6

	)

794 
	#XK_cˇr⁄
 0x01e8

	)

795 
	#XK_eog⁄ek
 0x01ó

	)

796 
	#XK_eˇr⁄
 0x01e¯

	)

797 
	#XK_dˇr⁄
 0x01e‡

	)

798 
	#XK_d°roke
 0x01f0

	)

799 
	#XK_«cuã
 0x01f1

	)

800 
	#XK_nˇr⁄
 0x01f2

	)

801 
	#XK_odoubÀacuã
 0x01f5

	)

802 
	#XK_rˇr⁄
 0x01f8

	)

803 
	#XK_urög
 0x01f9

	)

804 
	#XK_udoubÀacuã
 0x01fb

	)

805 
	#XK_t˚dûœ
 0x01„

	)

806 
	#XK_abovedŸ
 0x01f‡

	)

814 #ifde‡
XK_LATIN3


815 
	#XK_H°roke
 0x02a1

	)

816 
	#XK_HcúcumÊex
 0x02a6

	)

817 
	#XK_IabovedŸ
 0x02a9

	)

818 
	#XK_Gbªve
 0x02ab

	)

819 
	#XK_JcúcumÊex
 0x02a¯

	)

820 
	#XK_h°roke
 0x02b1

	)

821 
	#XK_hcúcumÊex
 0x02b6

	)

822 
	#XK_idŸÀss
 0x02b9

	)

823 
	#XK_gbªve
 0x02bb

	)

824 
	#XK_jcúcumÊex
 0x02b¯

	)

825 
	#XK_CabovedŸ
 0x02c5

	)

826 
	#XK_CcúcumÊex
 0x02c6

	)

827 
	#XK_GabovedŸ
 0x02d5

	)

828 
	#XK_GcúcumÊex
 0x02d8

	)

829 
	#XK_Ubªve
 0x02dd

	)

830 
	#XK_ScúcumÊex
 0x02dê

	)

831 
	#XK_ˇbovedŸ
 0x02e5

	)

832 
	#XK_ccúcumÊex
 0x02e6

	)

833 
	#XK_gabovedŸ
 0x02f5

	)

834 
	#XK_gcúcumÊex
 0x02f8

	)

835 
	#XK_ubªve
 0x02fd

	)

836 
	#XK_scúcumÊex
 0x02„

	)

845 #ifde‡
XK_LATIN4


846 
	#XK_kø
 0x03a2

	)

847 
	#XK_k≠∑
 0x03a2

	)

848 
	#XK_R˚dûœ
 0x03a3

	)

849 
	#XK_Itûde
 0x03a5

	)

850 
	#XK_L˚dûœ
 0x03a6

	)

851 
	#XK_Ema¸⁄
 0x03Ø

	)

852 
	#XK_G˚dûœ
 0x03ab

	)

853 
	#XK_T¶ash
 0x03a¯

	)

854 
	#XK_r˚dûœ
 0x03b3

	)

855 
	#XK_ôûde
 0x03b5

	)

856 
	#XK_l˚dûœ
 0x03b6

	)

857 
	#XK_ema¸⁄
 0x03b®

	)

858 
	#XK_g˚dûœ
 0x03bb

	)

859 
	#XK_t¶ash
 0x03b¯

	)

860 
	#XK_ENG
 0x03bd

	)

861 
	#XK_íg
 0x03b‡

	)

862 
	#XK_Ama¸⁄
 0x03c0

	)

863 
	#XK_Iog⁄ek
 0x03c7

	)

864 
	#XK_EabovedŸ
 0x03c¯

	)

865 
	#XK_Ima¸⁄
 0x03c‡

	)

866 
	#XK_N˚dûœ
 0x03d1

	)

867 
	#XK_Oma¸⁄
 0x03d2

	)

868 
	#XK_K˚dûœ
 0x03d3

	)

869 
	#XK_Uog⁄ek
 0x03d9

	)

870 
	#XK_Utûde
 0x03dd

	)

871 
	#XK_Uma¸⁄
 0x03dê

	)

872 
	#XK_ama¸⁄
 0x03e0

	)

873 
	#XK_iog⁄ek
 0x03e7

	)

874 
	#XK_óbovedŸ
 0x03e¯

	)

875 
	#XK_ima¸⁄
 0x03e‡

	)

876 
	#XK_n˚dûœ
 0x03f1

	)

877 
	#XK_oma¸⁄
 0x03f2

	)

878 
	#XK_k˚dûœ
 0x03f3

	)

879 
	#XK_uog⁄ek
 0x03f9

	)

880 
	#XK_utûde
 0x03fd

	)

881 
	#XK_uma¸⁄
 0x03„

	)

887 #ifde‡
XK_LATIN8


888 
	#XK_WcúcumÊex
 0x1000174

	)

889 
	#XK_wcúcumÊex
 0x1000175

	)

890 
	#XK_YcúcumÊex
 0x1000176

	)

891 
	#XK_ycúcumÊex
 0x1000177

	)

892 
	#XK_BabovedŸ
 0x1001e02

	)

893 
	#XK_babovedŸ
 0x1001e03

	)

894 
	#XK_DabovedŸ
 0x1001e0®

	)

895 
	#XK_dabovedŸ
 0x1001e0b

	)

896 
	#XK_FabovedŸ
 0x1001e1ê

	)

897 
	#XK_ÁbovedŸ
 0x1001e1‡

	)

898 
	#XK_MabovedŸ
 0x1001e40

	)

899 
	#XK_mabovedŸ
 0x1001e41

	)

900 
	#XK_PabovedŸ
 0x1001e56

	)

901 
	#XK_∑bovedŸ
 0x1001e57

	)

902 
	#XK_SabovedŸ
 0x1001e60

	)

903 
	#XK_ßbovedŸ
 0x1001e61

	)

904 
	#XK_TabovedŸ
 0x1001e6®

	)

905 
	#XK_èbovedŸ
 0x1001e6b

	)

906 
	#XK_Wgøve
 0x1001e80

	)

907 
	#XK_wgøve
 0x1001e81

	)

908 
	#XK_Wacuã
 0x1001e82

	)

909 
	#XK_wacuã
 0x1001e83

	)

910 
	#XK_Wdüîesis
 0x1001e84

	)

911 
	#XK_wdüîesis
 0x1001e85

	)

912 
	#XK_Ygøve
 0x1001ef2

	)

913 
	#XK_ygøve
 0x1001ef3

	)

921 #ifde‡
XK_LATIN9


922 
	#XK_OE
 0x13b¯

	)

923 
	#XK_€
 0x13bd

	)

924 
	#XK_Ydüîesis
 0x13bê

	)

932 #ifde‡
XK_KATAKANA


933 
	#XK_ovîlöe
 0x047ê

	)

934 
	#XK_k™a_fuŒ°›
 0x04a1

	)

935 
	#XK_k™a_›íögbøckë
 0x04a2

	)

936 
	#XK_k™a_˛osögbøckë
 0x04a3

	)

937 
	#XK_k™a_comma
 0x04a4

	)

938 
	#XK_k™a_c⁄jun˘ive
 0x04a5

	)

939 
	#XK_k™a_middÀdŸ
 0x04a5

	)

940 
	#XK_k™a_WO
 0x04a6

	)

941 
	#XK_k™a_a
 0x04a7

	)

942 
	#XK_k™a_i
 0x04a8

	)

943 
	#XK_k™a_u
 0x04a9

	)

944 
	#XK_k™a_e
 0x04Ø

	)

945 
	#XK_k™a_o
 0x04ab

	)

946 
	#XK_k™a_ya
 0x04a¯

	)

947 
	#XK_k™a_yu
 0x04ad

	)

948 
	#XK_k™a_yo
 0x04´

	)

949 
	#XK_k™a_tsu
 0x04a‡

	)

950 
	#XK_k™a_tu
 0x04a‡

	)

951 
	#XK_¥ﬁ⁄gedsound
 0x04b0

	)

952 
	#XK_k™a_A
 0x04b1

	)

953 
	#XK_k™a_I
 0x04b2

	)

954 
	#XK_k™a_U
 0x04b3

	)

955 
	#XK_k™a_E
 0x04b4

	)

956 
	#XK_k™a_O
 0x04b5

	)

957 
	#XK_k™a_KA
 0x04b6

	)

958 
	#XK_k™a_KI
 0x04b7

	)

959 
	#XK_k™a_KU
 0x04b8

	)

960 
	#XK_k™a_KE
 0x04b9

	)

961 
	#XK_k™a_KO
 0x04b®

	)

962 
	#XK_k™a_SA
 0x04bb

	)

963 
	#XK_k™a_SHI
 0x04b¯

	)

964 
	#XK_k™a_SU
 0x04bd

	)

965 
	#XK_k™a_SE
 0x04bê

	)

966 
	#XK_k™a_SO
 0x04b‡

	)

967 
	#XK_k™a_TA
 0x04c0

	)

968 
	#XK_k™a_CHI
 0x04c1

	)

969 
	#XK_k™a_TI
 0x04c1

	)

970 
	#XK_k™a_TSU
 0x04c2

	)

971 
	#XK_k™a_TU
 0x04c2

	)

972 
	#XK_k™a_TE
 0x04c3

	)

973 
	#XK_k™a_TO
 0x04c4

	)

974 
	#XK_k™a_NA
 0x04c5

	)

975 
	#XK_k™a_NI
 0x04c6

	)

976 
	#XK_k™a_NU
 0x04c7

	)

977 
	#XK_k™a_NE
 0x04c8

	)

978 
	#XK_k™a_NO
 0x04c9

	)

979 
	#XK_k™a_HA
 0x04ˇ

	)

980 
	#XK_k™a_HI
 0x04cb

	)

981 
	#XK_k™a_FU
 0x04c¯

	)

982 
	#XK_k™a_HU
 0x04c¯

	)

983 
	#XK_k™a_HE
 0x04cd

	)

984 
	#XK_k™a_HO
 0x04˚

	)

985 
	#XK_k™a_MA
 0x04c‡

	)

986 
	#XK_k™a_MI
 0x04d0

	)

987 
	#XK_k™a_MU
 0x04d1

	)

988 
	#XK_k™a_ME
 0x04d2

	)

989 
	#XK_k™a_MO
 0x04d3

	)

990 
	#XK_k™a_YA
 0x04d4

	)

991 
	#XK_k™a_YU
 0x04d5

	)

992 
	#XK_k™a_YO
 0x04d6

	)

993 
	#XK_k™a_RA
 0x04d7

	)

994 
	#XK_k™a_RI
 0x04d8

	)

995 
	#XK_k™a_RU
 0x04d9

	)

996 
	#XK_k™a_RE
 0x04d®

	)

997 
	#XK_k™a_RO
 0x04db

	)

998 
	#XK_k™a_WA
 0x04d¯

	)

999 
	#XK_k™a_N
 0x04dd

	)

1000 
	#XK_voi˚dsound
 0x04dê

	)

1001 
	#XK_£mivoi˚dsound
 0x04d‡

	)

1002 
	#XK_k™a_swôch
 0xff7ê

	)

1010 #ifde‡
XK_ARABIC


1011 
	#XK_F¨si_0
 0x10006f0

	)

1012 
	#XK_F¨si_1
 0x10006f1

	)

1013 
	#XK_F¨si_2
 0x10006f2

	)

1014 
	#XK_F¨si_3
 0x10006f3

	)

1015 
	#XK_F¨si_4
 0x10006f4

	)

1016 
	#XK_F¨si_5
 0x10006f5

	)

1017 
	#XK_F¨si_6
 0x10006f6

	)

1018 
	#XK_F¨si_7
 0x10006f7

	)

1019 
	#XK_F¨si_8
 0x10006f8

	)

1020 
	#XK_F¨si_9
 0x10006f9

	)

1021 
	#XK_Aøbic_≥r˚¡
 0x100066®

	)

1022 
	#XK_Aøbic_su≥rs¸ùt_Æef
 0x1000670

	)

1023 
	#XK_Aøbic_âeh
 0x1000679

	)

1024 
	#XK_Aøbic_≥h
 0x100067ê

	)

1025 
	#XK_Aøbic_tcheh
 0x1000686

	)

1026 
	#XK_Aøbic_ddÆ
 0x1000688

	)

1027 
	#XK_Aøbic_ºeh
 0x1000691

	)

1028 
	#XK_Aøbic_comma
 0x05a¯

	)

1029 
	#XK_Aøbic_fuŒ°›
 0x10006d4

	)

1030 
	#XK_Aøbic_0
 0x1000660

	)

1031 
	#XK_Aøbic_1
 0x1000661

	)

1032 
	#XK_Aøbic_2
 0x1000662

	)

1033 
	#XK_Aøbic_3
 0x1000663

	)

1034 
	#XK_Aøbic_4
 0x1000664

	)

1035 
	#XK_Aøbic_5
 0x1000665

	)

1036 
	#XK_Aøbic_6
 0x1000666

	)

1037 
	#XK_Aøbic_7
 0x1000667

	)

1038 
	#XK_Aøbic_8
 0x1000668

	)

1039 
	#XK_Aøbic_9
 0x1000669

	)

1040 
	#XK_Aøbic_£micﬁ⁄
 0x05bb

	)

1041 
	#XK_Aøbic_que°i⁄_m¨k
 0x05b‡

	)

1042 
	#XK_Aøbic_hamza
 0x05c1

	)

1043 
	#XK_Aøbic_madda⁄Æef
 0x05c2

	)

1044 
	#XK_Aøbic_hamza⁄Æef
 0x05c3

	)

1045 
	#XK_Aøbic_hamza⁄waw
 0x05c4

	)

1046 
	#XK_Aøbic_hamzaundîÆef
 0x05c5

	)

1047 
	#XK_Aøbic_hamza⁄yeh
 0x05c6

	)

1048 
	#XK_Aøbic_Æef
 0x05c7

	)

1049 
	#XK_Aøbic_beh
 0x05c8

	)

1050 
	#XK_Aøbic_ãhm¨buè
 0x05c9

	)

1051 
	#XK_Aøbic_ãh
 0x05ˇ

	)

1052 
	#XK_Aøbic_theh
 0x05cb

	)

1053 
	#XK_Aøbic_jìm
 0x05c¯

	)

1054 
	#XK_Aøbic_hah
 0x05cd

	)

1055 
	#XK_Aøbic_khah
 0x05˚

	)

1056 
	#XK_Aøbic_dÆ
 0x05c‡

	)

1057 
	#XK_Aøbic_thÆ
 0x05d0

	)

1058 
	#XK_Aøbic_ø
 0x05d1

	)

1059 
	#XK_Aøbic_zaö
 0x05d2

	)

1060 
	#XK_Aøbic_£í
 0x05d3

	)

1061 
	#XK_Aøbic_shìn
 0x05d4

	)

1062 
	#XK_Aøbic_ßd
 0x05d5

	)

1063 
	#XK_Aøbic_dad
 0x05d6

	)

1064 
	#XK_Aøbic_èh
 0x05d7

	)

1065 
	#XK_Aøbic_zah
 0x05d8

	)

1066 
	#XK_Aøbic_aö
 0x05d9

	)

1067 
	#XK_Aøbic_ghaö
 0x05d®

	)

1068 
	#XK_Aøbic_ètwìl
 0x05e0

	)

1069 
	#XK_Aøbic_„h
 0x05e1

	)

1070 
	#XK_Aøbic_qaf
 0x05e2

	)

1071 
	#XK_Aøbic_kaf
 0x05e3

	)

1072 
	#XK_Aøbic_œm
 0x05e4

	)

1073 
	#XK_Aøbic_mìm
 0x05e5

	)

1074 
	#XK_Aøbic_no⁄
 0x05e6

	)

1075 
	#XK_Aøbic_ha
 0x05e7

	)

1076 
	#XK_Aøbic_heh
 0x05e7

	)

1077 
	#XK_Aøbic_waw
 0x05e8

	)

1078 
	#XK_Aøbic_Æefmaksuø
 0x05e9

	)

1079 
	#XK_Aøbic_yeh
 0x05ó

	)

1080 
	#XK_Aøbic_Áth©™
 0x05eb

	)

1081 
	#XK_Aøbic_damm©™
 0x05e¯

	)

1082 
	#XK_Aøbic_ka§©™
 0x05ed

	)

1083 
	#XK_Aøbic_Átha
 0x05ì

	)

1084 
	#XK_Aøbic_damma
 0x05e‡

	)

1085 
	#XK_Aøbic_ka§a
 0x05f0

	)

1086 
	#XK_Aøbic_shadda
 0x05f1

	)

1087 
	#XK_Aøbic_sukun
 0x05f2

	)

1088 
	#XK_Aøbic_madda_above
 0x1000653

	)

1089 
	#XK_Aøbic_hamza_above
 0x1000654

	)

1090 
	#XK_Aøbic_hamza_bñow
 0x1000655

	)

1091 
	#XK_Aøbic_jeh
 0x1000698

	)

1092 
	#XK_Aøbic_veh
 0x10006a4

	)

1093 
	#XK_Aøbic_keheh
 0x10006a9

	)

1094 
	#XK_Aøbic_gaf
 0x10006a‡

	)

1095 
	#XK_Aøbic_no⁄_ghu¬a
 0x10006b®

	)

1096 
	#XK_Aøbic_heh_dﬂchashmì
 0x10006bê

	)

1097 
	#XK_F¨si_yeh
 0x10006c¯

	)

1098 
	#XK_Aøbic_Ársi_yeh
 0x10006c¯

	)

1099 
	#XK_Aøbic_yeh_b¨ì
 0x10006d2

	)

1100 
	#XK_Aøbic_heh_gﬂl
 0x10006c1

	)

1101 
	#XK_Aøbic_swôch
 0xff7ê

	)

1108 #ifde‡
XK_CYRILLIC


1109 
	#XK_Cyrûlic_GHE_b¨
 0x1000492

	)

1110 
	#XK_Cyrûlic_ghe_b¨
 0x1000493

	)

1111 
	#XK_Cyrûlic_ZHE_des˚ndî
 0x1000496

	)

1112 
	#XK_Cyrûlic_zhe_des˚ndî
 0x1000497

	)

1113 
	#XK_Cyrûlic_KA_des˚ndî
 0x100049®

	)

1114 
	#XK_Cyrûlic_ka_des˚ndî
 0x100049b

	)

1115 
	#XK_Cyrûlic_KA_vît°roke
 0x100049¯

	)

1116 
	#XK_Cyrûlic_ka_vît°roke
 0x100049d

	)

1117 
	#XK_Cyrûlic_EN_des˚ndî
 0x10004a2

	)

1118 
	#XK_Cyrûlic_í_des˚ndî
 0x10004a3

	)

1119 
	#XK_Cyrûlic_U_°øight
 0x10004´

	)

1120 
	#XK_Cyrûlic_u_°øight
 0x10004a‡

	)

1121 
	#XK_Cyrûlic_U_°øight_b¨
 0x10004b0

	)

1122 
	#XK_Cyrûlic_u_°øight_b¨
 0x10004b1

	)

1123 
	#XK_Cyrûlic_HA_des˚ndî
 0x10004b2

	)

1124 
	#XK_Cyrûlic_ha_des˚ndî
 0x10004b3

	)

1125 
	#XK_Cyrûlic_CHE_des˚ndî
 0x10004b6

	)

1126 
	#XK_Cyrûlic_che_des˚ndî
 0x10004b7

	)

1127 
	#XK_Cyrûlic_CHE_vît°roke
 0x10004b8

	)

1128 
	#XK_Cyrûlic_che_vît°roke
 0x10004b9

	)

1129 
	#XK_Cyrûlic_SHHA
 0x10004b®

	)

1130 
	#XK_Cyrûlic_shha
 0x10004bb

	)

1132 
	#XK_Cyrûlic_SCHWA
 0x10004d8

	)

1133 
	#XK_Cyrûlic_schwa
 0x10004d9

	)

1134 
	#XK_Cyrûlic_I_ma¸⁄
 0x10004e2

	)

1135 
	#XK_Cyrûlic_i_ma¸⁄
 0x10004e3

	)

1136 
	#XK_Cyrûlic_O_b¨
 0x10004e8

	)

1137 
	#XK_Cyrûlic_o_b¨
 0x10004e9

	)

1138 
	#XK_Cyrûlic_U_ma¸⁄
 0x10004ì

	)

1139 
	#XK_Cyrûlic_u_ma¸⁄
 0x10004e‡

	)

1141 
	#XK_Sîbün_dje
 0x06a1

	)

1142 
	#XK_Ma˚d⁄ü_gje
 0x06a2

	)

1143 
	#XK_Cyrûlic_io
 0x06a3

	)

1144 
	#XK_Ukøöün_õ
 0x06a4

	)

1145 
	#XK_Ukønün_je
 0x06a4

	)

1146 
	#XK_Ma˚d⁄ü_d£
 0x06a5

	)

1147 
	#XK_Ukøöün_i
 0x06a6

	)

1148 
	#XK_Ukønün_i
 0x06a6

	)

1149 
	#XK_Ukøöün_yi
 0x06a7

	)

1150 
	#XK_Ukønün_yi
 0x06a7

	)

1151 
	#XK_Cyrûlic_je
 0x06a8

	)

1152 
	#XK_Sîbün_je
 0x06a8

	)

1153 
	#XK_Cyrûlic_lje
 0x06a9

	)

1154 
	#XK_Sîbün_lje
 0x06a9

	)

1155 
	#XK_Cyrûlic_nje
 0x06Ø

	)

1156 
	#XK_Sîbün_nje
 0x06Ø

	)

1157 
	#XK_Sîbün_tshe
 0x06ab

	)

1158 
	#XK_Ma˚d⁄ü_kje
 0x06a¯

	)

1159 
	#XK_Ukøöün_ghe_wôh_u±u∫
 0x06ad

	)

1160 
	#XK_Byñ‹ussün_sh‹tu
 0x06´

	)

1161 
	#XK_Cyrûlic_dzhe
 0x06a‡

	)

1162 
	#XK_Sîbün_dze
 0x06a‡

	)

1163 
	#XK_numîosign
 0x06b0

	)

1164 
	#XK_Sîbün_DJE
 0x06b1

	)

1165 
	#XK_Ma˚d⁄ü_GJE
 0x06b2

	)

1166 
	#XK_Cyrûlic_IO
 0x06b3

	)

1167 
	#XK_Ukøöün_IE
 0x06b4

	)

1168 
	#XK_Ukønün_JE
 0x06b4

	)

1169 
	#XK_Ma˚d⁄ü_DSE
 0x06b5

	)

1170 
	#XK_Ukøöün_I
 0x06b6

	)

1171 
	#XK_Ukønün_I
 0x06b6

	)

1172 
	#XK_Ukøöün_YI
 0x06b7

	)

1173 
	#XK_Ukønün_YI
 0x06b7

	)

1174 
	#XK_Cyrûlic_JE
 0x06b8

	)

1175 
	#XK_Sîbün_JE
 0x06b8

	)

1176 
	#XK_Cyrûlic_LJE
 0x06b9

	)

1177 
	#XK_Sîbün_LJE
 0x06b9

	)

1178 
	#XK_Cyrûlic_NJE
 0x06b®

	)

1179 
	#XK_Sîbün_NJE
 0x06b®

	)

1180 
	#XK_Sîbün_TSHE
 0x06bb

	)

1181 
	#XK_Ma˚d⁄ü_KJE
 0x06b¯

	)

1182 
	#XK_Ukøöün_GHE_WITH_UPTURN
 0x06bd

	)

1183 
	#XK_Byñ‹ussün_SHORTU
 0x06bê

	)

1184 
	#XK_Cyrûlic_DZHE
 0x06b‡

	)

1185 
	#XK_Sîbün_DZE
 0x06b‡

	)

1186 
	#XK_Cyrûlic_yu
 0x06c0

	)

1187 
	#XK_Cyrûlic_a
 0x06c1

	)

1188 
	#XK_Cyrûlic_be
 0x06c2

	)

1189 
	#XK_Cyrûlic_t£
 0x06c3

	)

1190 
	#XK_Cyrûlic_de
 0x06c4

	)

1191 
	#XK_Cyrûlic_õ
 0x06c5

	)

1192 
	#XK_Cyrûlic_ef
 0x06c6

	)

1193 
	#XK_Cyrûlic_ghe
 0x06c7

	)

1194 
	#XK_Cyrûlic_ha
 0x06c8

	)

1195 
	#XK_Cyrûlic_i
 0x06c9

	)

1196 
	#XK_Cyrûlic_sh‹ti
 0x06ˇ

	)

1197 
	#XK_Cyrûlic_ka
 0x06cb

	)

1198 
	#XK_Cyrûlic_ñ
 0x06c¯

	)

1199 
	#XK_Cyrûlic_em
 0x06cd

	)

1200 
	#XK_Cyrûlic_í
 0x06˚

	)

1201 
	#XK_Cyrûlic_o
 0x06c‡

	)

1202 
	#XK_Cyrûlic_≥
 0x06d0

	)

1203 
	#XK_Cyrûlic_ya
 0x06d1

	)

1204 
	#XK_Cyrûlic_î
 0x06d2

	)

1205 
	#XK_Cyrûlic_es
 0x06d3

	)

1206 
	#XK_Cyrûlic_ã
 0x06d4

	)

1207 
	#XK_Cyrûlic_u
 0x06d5

	)

1208 
	#XK_Cyrûlic_zhe
 0x06d6

	)

1209 
	#XK_Cyrûlic_ve
 0x06d7

	)

1210 
	#XK_Cyrûlic_so·sign
 0x06d8

	)

1211 
	#XK_Cyrûlic_yîu
 0x06d9

	)

1212 
	#XK_Cyrûlic_ze
 0x06d®

	)

1213 
	#XK_Cyrûlic_sha
 0x06db

	)

1214 
	#XK_Cyrûlic_e
 0x06d¯

	)

1215 
	#XK_Cyrûlic_shcha
 0x06dd

	)

1216 
	#XK_Cyrûlic_che
 0x06dê

	)

1217 
	#XK_Cyrûlic_h¨dsign
 0x06d‡

	)

1218 
	#XK_Cyrûlic_YU
 0x06e0

	)

1219 
	#XK_Cyrûlic_A
 0x06e1

	)

1220 
	#XK_Cyrûlic_BE
 0x06e2

	)

1221 
	#XK_Cyrûlic_TSE
 0x06e3

	)

1222 
	#XK_Cyrûlic_DE
 0x06e4

	)

1223 
	#XK_Cyrûlic_IE
 0x06e5

	)

1224 
	#XK_Cyrûlic_EF
 0x06e6

	)

1225 
	#XK_Cyrûlic_GHE
 0x06e7

	)

1226 
	#XK_Cyrûlic_HA
 0x06e8

	)

1227 
	#XK_Cyrûlic_I
 0x06e9

	)

1228 
	#XK_Cyrûlic_SHORTI
 0x06ó

	)

1229 
	#XK_Cyrûlic_KA
 0x06eb

	)

1230 
	#XK_Cyrûlic_EL
 0x06e¯

	)

1231 
	#XK_Cyrûlic_EM
 0x06ed

	)

1232 
	#XK_Cyrûlic_EN
 0x06ì

	)

1233 
	#XK_Cyrûlic_O
 0x06e‡

	)

1234 
	#XK_Cyrûlic_PE
 0x06f0

	)

1235 
	#XK_Cyrûlic_YA
 0x06f1

	)

1236 
	#XK_Cyrûlic_ER
 0x06f2

	)

1237 
	#XK_Cyrûlic_ES
 0x06f3

	)

1238 
	#XK_Cyrûlic_TE
 0x06f4

	)

1239 
	#XK_Cyrûlic_U
 0x06f5

	)

1240 
	#XK_Cyrûlic_ZHE
 0x06f6

	)

1241 
	#XK_Cyrûlic_VE
 0x06f7

	)

1242 
	#XK_Cyrûlic_SOFTSIGN
 0x06f8

	)

1243 
	#XK_Cyrûlic_YERU
 0x06f9

	)

1244 
	#XK_Cyrûlic_ZE
 0x06Á

	)

1245 
	#XK_Cyrûlic_SHA
 0x06fb

	)

1246 
	#XK_Cyrûlic_E
 0x06f¯

	)

1247 
	#XK_Cyrûlic_SHCHA
 0x06fd

	)

1248 
	#XK_Cyrûlic_CHE
 0x06„

	)

1249 
	#XK_Cyrûlic_HARDSIGN
 0x06f‡

	)

1258 #ifde‡
XK_GREEK


1259 
	#XK_Gªek_ALPHAac˚¡
 0x07a1

	)

1260 
	#XK_Gªek_EPSILONac˚¡
 0x07a2

	)

1261 
	#XK_Gªek_ETAac˚¡
 0x07a3

	)

1262 
	#XK_Gªek_IOTAac˚¡
 0x07a4

	)

1263 
	#XK_Gªek_IOTAdõªsis
 0x07a5

	)

1264 
	#XK_Gªek_IOTAdüîesis
 0x07a5

	)

1265 
	#XK_Gªek_OMICRONac˚¡
 0x07a7

	)

1266 
	#XK_Gªek_UPSILONac˚¡
 0x07a8

	)

1267 
	#XK_Gªek_UPSILONdõªsis
 0x07a9

	)

1268 
	#XK_Gªek_OMEGAac˚¡
 0x07ab

	)

1269 
	#XK_Gªek_ac˚¡dõªsis
 0x07´

	)

1270 
	#XK_Gªek_h‹izb¨
 0x07a‡

	)

1271 
	#XK_Gªek_ÆphØc˚¡
 0x07b1

	)

1272 
	#XK_Gªek_ïsû⁄ac˚¡
 0x07b2

	)

1273 
	#XK_Gªek_ëØc˚¡
 0x07b3

	)

1274 
	#XK_Gªek_iŸØc˚¡
 0x07b4

	)

1275 
	#XK_Gªek_iŸadõªsis
 0x07b5

	)

1276 
	#XK_Gªek_iŸØc˚¡dõªsis
 0x07b6

	)

1277 
	#XK_Gªek_omi¸⁄ac˚¡
 0x07b7

	)

1278 
	#XK_Gªek_upsû⁄ac˚¡
 0x07b8

	)

1279 
	#XK_Gªek_upsû⁄dõªsis
 0x07b9

	)

1280 
	#XK_Gªek_upsû⁄ac˚¡dõªsis
 0x07b®

	)

1281 
	#XK_Gªek_omegØc˚¡
 0x07bb

	)

1282 
	#XK_Gªek_ALPHA
 0x07c1

	)

1283 
	#XK_Gªek_BETA
 0x07c2

	)

1284 
	#XK_Gªek_GAMMA
 0x07c3

	)

1285 
	#XK_Gªek_DELTA
 0x07c4

	)

1286 
	#XK_Gªek_EPSILON
 0x07c5

	)

1287 
	#XK_Gªek_ZETA
 0x07c6

	)

1288 
	#XK_Gªek_ETA
 0x07c7

	)

1289 
	#XK_Gªek_THETA
 0x07c8

	)

1290 
	#XK_Gªek_IOTA
 0x07c9

	)

1291 
	#XK_Gªek_KAPPA
 0x07ˇ

	)

1292 
	#XK_Gªek_LAMDA
 0x07cb

	)

1293 
	#XK_Gªek_LAMBDA
 0x07cb

	)

1294 
	#XK_Gªek_MU
 0x07c¯

	)

1295 
	#XK_Gªek_NU
 0x07cd

	)

1296 
	#XK_Gªek_XI
 0x07˚

	)

1297 
	#XK_Gªek_OMICRON
 0x07c‡

	)

1298 
	#XK_Gªek_PI
 0x07d0

	)

1299 
	#XK_Gªek_RHO
 0x07d1

	)

1300 
	#XK_Gªek_SIGMA
 0x07d2

	)

1301 
	#XK_Gªek_TAU
 0x07d4

	)

1302 
	#XK_Gªek_UPSILON
 0x07d5

	)

1303 
	#XK_Gªek_PHI
 0x07d6

	)

1304 
	#XK_Gªek_CHI
 0x07d7

	)

1305 
	#XK_Gªek_PSI
 0x07d8

	)

1306 
	#XK_Gªek_OMEGA
 0x07d9

	)

1307 
	#XK_Gªek_Æpha
 0x07e1

	)

1308 
	#XK_Gªek_bëa
 0x07e2

	)

1309 
	#XK_Gªek_gamma
 0x07e3

	)

1310 
	#XK_Gªek_dñè
 0x07e4

	)

1311 
	#XK_Gªek_ïsû⁄
 0x07e5

	)

1312 
	#XK_Gªek_zëa
 0x07e6

	)

1313 
	#XK_Gªek_ëa
 0x07e7

	)

1314 
	#XK_Gªek_thëa
 0x07e8

	)

1315 
	#XK_Gªek_iŸa
 0x07e9

	)

1316 
	#XK_Gªek_k≠∑
 0x07ó

	)

1317 
	#XK_Gªek_œmda
 0x07eb

	)

1318 
	#XK_Gªek_œmbda
 0x07eb

	)

1319 
	#XK_Gªek_mu
 0x07e¯

	)

1320 
	#XK_Gªek_nu
 0x07ed

	)

1321 
	#XK_Gªek_xi
 0x07ì

	)

1322 
	#XK_Gªek_omi¸⁄
 0x07e‡

	)

1323 
	#XK_Gªek_pi
 0x07f0

	)

1324 
	#XK_Gªek_rho
 0x07f1

	)

1325 
	#XK_Gªek_sigma
 0x07f2

	)

1326 
	#XK_Gªek_föÆsmÆlsigma
 0x07f3

	)

1327 
	#XK_Gªek_èu
 0x07f4

	)

1328 
	#XK_Gªek_upsû⁄
 0x07f5

	)

1329 
	#XK_Gªek_phi
 0x07f6

	)

1330 
	#XK_Gªek_chi
 0x07f7

	)

1331 
	#XK_Gªek_psi
 0x07f8

	)

1332 
	#XK_Gªek_omega
 0x07f9

	)

1333 
	#XK_Gªek_swôch
 0xff7ê

	)

1342 #ifde‡
XK_TECHNICAL


1343 
	#XK_À·ødiˇl
 0x08a1

	)

1344 
	#XK_t›À·ødiˇl
 0x08a2

	)

1345 
	#XK_h‹izc⁄√˘‹
 0x08a3

	)

1346 
	#XK_t›öãgøl
 0x08a4

	)

1347 
	#XK_bŸöãgøl
 0x08a5

	)

1348 
	#XK_vîtc⁄√˘‹
 0x08a6

	)

1349 
	#XK_t›À·sqbøckë
 0x08a7

	)

1350 
	#XK_bŸÀ·sqbøckë
 0x08a8

	)

1351 
	#XK_t›rightsqbøckë
 0x08a9

	)

1352 
	#XK_bŸrightsqbøckë
 0x08Ø

	)

1353 
	#XK_t›À·∑ªns
 0x08ab

	)

1354 
	#XK_bŸÀ·∑ªns
 0x08a¯

	)

1355 
	#XK_t›righç¨ís
 0x08ad

	)

1356 
	#XK_bŸrighç¨ís
 0x08´

	)

1357 
	#XK_À·middÀcuæybø˚
 0x08a‡

	)

1358 
	#XK_rightmiddÀcuæybø˚
 0x08b0

	)

1359 
	#XK_t›À·summ©i⁄
 0x08b1

	)

1360 
	#XK_bŸÀ·summ©i⁄
 0x08b2

	)

1361 
	#XK_t›vîtsumm©i⁄c⁄√˘‹
 0x08b3

	)

1362 
	#XK_bŸvîtsumm©i⁄c⁄√˘‹
 0x08b4

	)

1363 
	#XK_t›rightsumm©i⁄
 0x08b5

	)

1364 
	#XK_bŸrightsumm©i⁄
 0x08b6

	)

1365 
	#XK_rightmiddÀsumm©i⁄
 0x08b7

	)

1366 
	#XK_Às°h™equÆ
 0x08b¯

	)

1367 
	#XK_nŸequÆ
 0x08bd

	)

1368 
	#XK_gª©îth™equÆ
 0x08bê

	)

1369 
	#XK_öãgøl
 0x08b‡

	)

1370 
	#XK_thîef‹e
 0x08c0

	)

1371 
	#XK_v¨üti⁄
 0x08c1

	)

1372 
	#XK_öföôy
 0x08c2

	)

1373 
	#XK_«bœ
 0x08c5

	)

1374 
	#XK_≠¥oxim©e
 0x08c8

	)

1375 
	#XK_simû¨equÆ
 0x08c9

	)

1376 
	#XK_if⁄lyif
 0x08cd

	)

1377 
	#XK_im∂õs
 0x08˚

	)

1378 
	#XK_idítiˇl
 0x08c‡

	)

1379 
	#XK_ødiˇl
 0x08d6

	)

1380 
	#XK_ö˛udedö
 0x08d®

	)

1381 
	#XK_ö˛udes
 0x08db

	)

1382 
	#XK_öãr£˘i⁄
 0x08d¯

	)

1383 
	#XK_uni⁄
 0x08dd

	)

1384 
	#XK_logiˇœnd
 0x08dê

	)

1385 
	#XK_logiˇl‹
 0x08d‡

	)

1386 
	#XK_∑πüldîiv©ive
 0x08e‡

	)

1387 
	#XK_fun˘i⁄
 0x08f6

	)

1388 
	#XK_À·¨row
 0x08fb

	)

1389 
	#XK_u∑ºow
 0x08f¯

	)

1390 
	#XK_righèºow
 0x08fd

	)

1391 
	#XK_dow«ºow
 0x08„

	)

1400 #ifde‡
XK_SPECIAL


1401 
	#XK_bœnk
 0x09df

	)

1402 
	#XK_sﬁiddüm⁄d
 0x09e0

	)

1403 
	#XK_checkîbﬂrd
 0x09e1

	)

1404 
	#XK_ht
 0x09e2

	)

1405 
	#XK_ff
 0x09e3

	)

1406 
	#XK_¸
 0x09e4

	)

1407 
	#XK_lf
 0x09e5

	)

1408 
	#XK_∆
 0x09e8

	)

1409 
	#XK_vt
 0x09e9

	)

1410 
	#XK_lowrightc‹√r
 0x09ó

	)

1411 
	#XK_u¥ightc‹√r
 0x09eb

	)

1412 
	#XK_u∂e·c‹√r
 0x09e¯

	)

1413 
	#XK_lowÀ·c‹√r
 0x09ed

	)

1414 
	#XK_¸ossöglöes
 0x09ì

	)

1415 
	#XK_h‹izlöesˇn1
 0x09e‡

	)

1416 
	#XK_h‹izlöesˇn3
 0x09f0

	)

1417 
	#XK_h‹izlöesˇn5
 0x09f1

	)

1418 
	#XK_h‹izlöesˇn7
 0x09f2

	)

1419 
	#XK_h‹izlöesˇn9
 0x09f3

	)

1420 
	#XK_À·t
 0x09f4

	)

1421 
	#XK_righâ
 0x09f5

	)

1422 
	#XK_bŸt
 0x09f6

	)

1423 
	#XK_t›t
 0x09f7

	)

1424 
	#XK_vîtb¨
 0x09f8

	)

1434 #ifde‡
XK_PUBLISHING


1435 
	#XK_em•a˚
 0x0Ø1

	)

1436 
	#XK_í•a˚
 0x0Ø2

	)

1437 
	#XK_em3•a˚
 0x0Ø3

	)

1438 
	#XK_em4•a˚
 0x0Ø4

	)

1439 
	#XK_digô•a˚
 0x0Ø5

	)

1440 
	#XK_pun˘•a˚
 0x0Ø6

	)

1441 
	#XK_thö•a˚
 0x0Ø7

	)

1442 
	#XK_haú•a˚
 0x0Ø8

	)

1443 
	#XK_emdash
 0x0Ø9

	)

1444 
	#XK_ídash
 0x0Ø®

	)

1445 
	#XK_signifbœnk
 0x0Ø¯

	)

1446 
	#XK_ñlùsis
 0x0Øê

	)

1447 
	#XK_doubba£löedŸ
 0x0Ø‡

	)

1448 
	#XK_⁄ëhúd
 0x0ab0

	)

1449 
	#XK_twŸhúds
 0x0ab1

	)

1450 
	#XK_⁄efi·h
 0x0ab2

	)

1451 
	#XK_twofi·hs
 0x0ab3

	)

1452 
	#XK_thªefi·hs
 0x0ab4

	)

1453 
	#XK_fourfi·hs
 0x0ab5

	)

1454 
	#XK_⁄esixth
 0x0ab6

	)

1455 
	#XK_fivesixths
 0x0ab7

	)

1456 
	#XK_ˇªof
 0x0ab8

	)

1457 
	#XK_figdash
 0x0abb

	)

1458 
	#XK_À·™gÀbøckë
 0x0ab¯

	)

1459 
	#XK_decimÆpoöt
 0x0abd

	)

1460 
	#XK_righèngÀbøckë
 0x0abê

	)

1461 
	#XK_m¨kî
 0x0abf

	)

1462 
	#XK_⁄ìighth
 0x0ac3

	)

1463 
	#XK_thªìighths
 0x0ac4

	)

1464 
	#XK_fivìighths
 0x0ac5

	)

1465 
	#XK_£víeighths
 0x0ac6

	)

1466 
	#XK_åadem¨k
 0x0ac9

	)

1467 
	#XK_sig«tuªm¨k
 0x0aˇ

	)

1468 
	#XK_åadem¨köcú˛e
 0x0acb

	)

1469 
	#XK_À·›íåüngÀ
 0x0ac¯

	)

1470 
	#XK_right›íåüngÀ
 0x0acd

	)

1471 
	#XK_em›ícú˛e
 0x0a˚

	)

1472 
	#XK_em›íª˘™gÀ
 0x0ac‡

	)

1473 
	#XK_À·sögÀquŸem¨k
 0x0ad0

	)

1474 
	#XK_rightsögÀquŸem¨k
 0x0ad1

	)

1475 
	#XK_À·doubÀquŸem¨k
 0x0ad2

	)

1476 
	#XK_rightdoubÀquŸem¨k
 0x0ad3

	)

1477 
	#XK_¥es¸ùti⁄
 0x0ad4

	)

1478 
	#XK_≥rmûÀ
 0x0ad5

	)

1479 
	#XK_möuãs
 0x0ad6

	)

1480 
	#XK_£c⁄ds
 0x0ad7

	)

1481 
	#XK_œtö¸oss
 0x0ad9

	)

1482 
	#XK_hexagøm
 0x0ada

	)

1483 
	#XK_fûÀdª˘buŒë
 0x0adb

	)

1484 
	#XK_fûÀdÀ·åibuŒë
 0x0ad¯

	)

1485 
	#XK_fûÀdrighâribuŒë
 0x0add

	)

1486 
	#XK_emfûÀdcú˛e
 0x0adê

	)

1487 
	#XK_emfûÀdª˘
 0x0ad‡

	)

1488 
	#XK_í›ícúcbuŒë
 0x0´0

	)

1489 
	#XK_í›ísqu¨ebuŒë
 0x0´1

	)

1490 
	#XK_›íª˘buŒë
 0x0´2

	)

1491 
	#XK_›íåibuŒëup
 0x0´3

	)

1492 
	#XK_›íåibuŒëdown
 0x0´4

	)

1493 
	#XK_›í°¨
 0x0´5

	)

1494 
	#XK_ífûÀdcúcbuŒë
 0x0´6

	)

1495 
	#XK_ífûÀdsqbuŒë
 0x0´7

	)

1496 
	#XK_fûÀdåibuŒëup
 0x0´8

	)

1497 
	#XK_fûÀdåibuŒëdown
 0x0´9

	)

1498 
	#XK_À·poöãr
 0x0´®

	)

1499 
	#XK_righçoöãr
 0x0´b

	)

1500 
	#XK_˛ub
 0x0´¯

	)

1501 
	#XK_düm⁄d
 0x0´d

	)

1502 
	#XK_hóπ
 0x0´ê

	)

1503 
	#XK_mÆã£¸oss
 0x0af0

	)

1504 
	#XK_daggî
 0x0af1

	)

1505 
	#XK_doubÀdaggî
 0x0af2

	)

1506 
	#XK_checkm¨k
 0x0af3

	)

1507 
	#XK_bÆlŸ¸oss
 0x0af4

	)

1508 
	#XK_musiˇlsh¨p
 0x0af5

	)

1509 
	#XK_musiˇlÊ©
 0x0af6

	)

1510 
	#XK_mÆesymbﬁ
 0x0af7

	)

1511 
	#XK_„mÆesymbﬁ
 0x0af8

	)

1512 
	#XK_ãÀph⁄e
 0x0af9

	)

1513 
	#XK_ãÀph⁄îec‹dî
 0x0aÁ

	)

1514 
	#XK_ph⁄ogøphc›yright
 0x0afb

	)

1515 
	#XK_ˇªt
 0x0af¯

	)

1516 
	#XK_sögÀlowquŸem¨k
 0x0afd

	)

1517 
	#XK_doubÀlowquŸem¨k
 0x0a„

	)

1518 
	#XK_curs‹
 0x0aff

	)

1526 #ifde‡
XK_APL


1527 
	#XK_À·ˇªt
 0x0ba3

	)

1528 
	#XK_rightˇªt
 0x0ba6

	)

1529 
	#XK_downˇªt
 0x0ba8

	)

1530 
	#XK_upˇªt
 0x0ba9

	)

1531 
	#XK_ovîb¨
 0x0bc0

	)

1532 
	#XK_dow¡ack
 0x0bc2

	)

1533 
	#XK_upsh€
 0x0bc3

	)

1534 
	#XK_down°ûe
 0x0bc4

	)

1535 
	#XK_undîb¨
 0x0bc6

	)

1536 
	#XK_jŸ
 0x0bˇ

	)

1537 
	#XK_quad
 0x0bc¯

	)

1538 
	#XK_u±ack
 0x0b˚

	)

1539 
	#XK_cú˛e
 0x0bc‡

	)

1540 
	#XK_up°ûe
 0x0bd3

	)

1541 
	#XK_downsh€
 0x0bd6

	)

1542 
	#XK_rightsh€
 0x0bd8

	)

1543 
	#XK_À·sh€
 0x0bd®

	)

1544 
	#XK_À·èck
 0x0bd¯

	)

1545 
	#XK_righâack
 0x0bf¯

	)

1553 #ifde‡
XK_HEBREW


1554 
	#XK_hebªw_doubÀlowlöe
 0x0cd‡

	)

1555 
	#XK_hebªw_Æïh
 0x0˚0

	)

1556 
	#XK_hebªw_bë
 0x0˚1

	)

1557 
	#XK_hebªw_bëh
 0x0˚1

	)

1558 
	#XK_hebªw_gimñ
 0x0˚2

	)

1559 
	#XK_hebªw_gimmñ
 0x0˚2

	)

1560 
	#XK_hebªw_dÆë
 0x0˚3

	)

1561 
	#XK_hebªw_dÆëh
 0x0˚3

	)

1562 
	#XK_hebªw_he
 0x0˚4

	)

1563 
	#XK_hebªw_waw
 0x0˚5

	)

1564 
	#XK_hebªw_zaö
 0x0˚6

	)

1565 
	#XK_hebªw_zayö
 0x0˚6

	)

1566 
	#XK_hebªw_chë
 0x0˚7

	)

1567 
	#XK_hebªw_hë
 0x0˚7

	)

1568 
	#XK_hebªw_ãt
 0x0˚8

	)

1569 
	#XK_hebªw_ãth
 0x0˚8

	)

1570 
	#XK_hebªw_yod
 0x0˚9

	)

1571 
	#XK_hebªw_föÆk≠h
 0x0˚®

	)

1572 
	#XK_hebªw_k≠h
 0x0˚b

	)

1573 
	#XK_hebªw_œmed
 0x0˚¯

	)

1574 
	#XK_hebªw_föÆmem
 0x0˚d

	)

1575 
	#XK_hebªw_mem
 0x0˚ê

	)

1576 
	#XK_hebªw_föÆnun
 0x0˚‡

	)

1577 
	#XK_hebªw_nun
 0x0cf0

	)

1578 
	#XK_hebªw_ßmech
 0x0cf1

	)

1579 
	#XK_hebªw_ßmekh
 0x0cf1

	)

1580 
	#XK_hebªw_ayö
 0x0cf2

	)

1581 
	#XK_hebªw_föÆ≥
 0x0cf3

	)

1582 
	#XK_hebªw_≥
 0x0cf4

	)

1583 
	#XK_hebªw_föÆzade
 0x0cf5

	)

1584 
	#XK_hebªw_föÆzadi
 0x0cf5

	)

1585 
	#XK_hebªw_zade
 0x0cf6

	)

1586 
	#XK_hebªw_zadi
 0x0cf6

	)

1587 
	#XK_hebªw_q›h
 0x0cf7

	)

1588 
	#XK_hebªw_kuf
 0x0cf7

	)

1589 
	#XK_hebªw_ªsh
 0x0cf8

	)

1590 
	#XK_hebªw_shö
 0x0cf9

	)

1591 
	#XK_hebªw_èw
 0x0cÁ

	)

1592 
	#XK_hebªw_èf
 0x0cÁ

	)

1593 
	#XK_Hebªw_swôch
 0xff7ê

	)

1601 #ifde‡
XK_THAI


1602 
	#XK_Thai_kokai
 0x0da1

	)

1603 
	#XK_Thai_khokhai
 0x0da2

	)

1604 
	#XK_Thai_khokhu©
 0x0da3

	)

1605 
	#XK_Thai_khokhwai
 0x0da4

	)

1606 
	#XK_Thai_khokh⁄
 0x0da5

	)

1607 
	#XK_Thai_kh‹akh™g
 0x0da6

	)

1608 
	#XK_Thai_ng⁄gu
 0x0da7

	)

1609 
	#XK_Thai_choch™
 0x0da8

	)

1610 
	#XK_Thai_chochög
 0x0da9

	)

1611 
	#XK_Thai_choch™g
 0x0dØ

	)

1612 
	#XK_Thai_soso
 0x0dab

	)

1613 
	#XK_Thai_choch€
 0x0da¯

	)

1614 
	#XK_Thai_yoyög
 0x0dad

	)

1615 
	#XK_Thai_dochada
 0x0d´

	)

1616 
	#XK_Thai_t›©ak
 0x0da‡

	)

1617 
	#XK_Thai_thŸh™
 0x0db0

	)

1618 
	#XK_Thai_th⁄™gm⁄tho
 0x0db1

	)

1619 
	#XK_Thai_th›huthao
 0x0db2

	)

1620 
	#XK_Thai_n⁄í
 0x0db3

	)

1621 
	#XK_Thai_dodek
 0x0db4

	)

1622 
	#XK_Thai_tŸao
 0x0db5

	)

1623 
	#XK_Thai_thŸhung
 0x0db6

	)

1624 
	#XK_Thai_thŸhah™
 0x0db7

	)

1625 
	#XK_Thai_thŸh⁄g
 0x0db8

	)

1626 
	#XK_Thai_n⁄u
 0x0db9

	)

1627 
	#XK_Thai_bobaimai
 0x0db®

	)

1628 
	#XK_Thai_p›œ
 0x0dbb

	)

1629 
	#XK_Thai_ph›hung
 0x0db¯

	)

1630 
	#XK_Thai_foÁ
 0x0dbd

	)

1631 
	#XK_Thai_ph›h™
 0x0dbê

	)

1632 
	#XK_Thai_foÁn
 0x0db‡

	)

1633 
	#XK_Thai_phoßmphao
 0x0dc0

	)

1634 
	#XK_Thai_moma
 0x0dc1

	)

1635 
	#XK_Thai_yoyak
 0x0dc2

	)

1636 
	#XK_Thai_r‹ua
 0x0dc3

	)

1637 
	#XK_Thai_ru
 0x0dc4

	)

1638 
	#XK_Thai_lﬁög
 0x0dc5

	)

1639 
	#XK_Thai_lu
 0x0dc6

	)

1640 
	#XK_Thai_wow´n
 0x0dc7

	)

1641 
	#XK_Thai_soßœ
 0x0dc8

	)

1642 
	#XK_Thai_s‹usi
 0x0dc9

	)

1643 
	#XK_Thai_sosua
 0x0dˇ

	)

1644 
	#XK_Thai_hohù
 0x0dcb

	)

1645 
	#XK_Thai_lochuœ
 0x0dc¯

	)

1646 
	#XK_Thai_ﬂng
 0x0dcd

	)

1647 
	#XK_Thai_h⁄okhuk
 0x0d˚

	)

1648 
	#XK_Thai_∑iy™noi
 0x0dc‡

	)

1649 
	#XK_Thai_ßøa
 0x0dd0

	)

1650 
	#XK_Thai_maih™ak©
 0x0dd1

	)

1651 
	#XK_Thai_ßøØ
 0x0dd2

	)

1652 
	#XK_Thai_ßøam
 0x0dd3

	)

1653 
	#XK_Thai_ßøi
 0x0dd4

	)

1654 
	#XK_Thai_ßøii
 0x0dd5

	)

1655 
	#XK_Thai_ßøue
 0x0dd6

	)

1656 
	#XK_Thai_ßøuì
 0x0dd7

	)

1657 
	#XK_Thai_ßøu
 0x0dd8

	)

1658 
	#XK_Thai_ßøuu
 0x0dd9

	)

1659 
	#XK_Thai_phöthu
 0x0dd®

	)

1660 
	#XK_Thai_maih™ak©_maôho
 0x0dde

	)

1661 
	#XK_Thai_baht
 0x0dd‡

	)

1662 
	#XK_Thai_ßøe
 0x0de0

	)

1663 
	#XK_Thai_ßø´
 0x0de1

	)

1664 
	#XK_Thai_ßøo
 0x0de2

	)

1665 
	#XK_Thai_ßøaimaimu™
 0x0de3

	)

1666 
	#XK_Thai_ßøaimaimÆai
 0x0de4

	)

1667 
	#XK_Thai_œkkh™gyao
 0x0de5

	)

1668 
	#XK_Thai_maiyamok
 0x0de6

	)

1669 
	#XK_Thai_maôaikhu
 0x0de7

	)

1670 
	#XK_Thai_maõk
 0x0de8

	)

1671 
	#XK_Thai_maôho
 0x0de9

	)

1672 
	#XK_Thai_maôri
 0x0dó

	)

1673 
	#XK_Thai_maich©èwa
 0x0deb

	)

1674 
	#XK_Thai_th™thakh©
 0x0de¯

	)

1675 
	#XK_Thai_nikhahô
 0x0ded

	)

1676 
	#XK_Thai_Àksun
 0x0df0

	)

1677 
	#XK_Thai_Àknung
 0x0df1

	)

1678 
	#XK_Thai_Àks⁄g
 0x0df2

	)

1679 
	#XK_Thai_Àkßm
 0x0df3

	)

1680 
	#XK_Thai_Àksi
 0x0df4

	)

1681 
	#XK_Thai_Àkha
 0x0df5

	)

1682 
	#XK_Thai_Àkhok
 0x0df6

	)

1683 
	#XK_Thai_Àkchë
 0x0df7

	)

1684 
	#XK_Thai_Àk∑ë
 0x0df8

	)

1685 
	#XK_Thai_Àkkao
 0x0df9

	)

1693 #ifde‡
XK_KOREAN


1695 
	#XK_H™gul
 0xff31

	)

1696 
	#XK_H™gul_Sèπ
 0xff32

	)

1697 
	#XK_H™gul_End
 0xff33

	)

1698 
	#XK_H™gul_H™ja
 0xff34

	)

1699 
	#XK_H™gul_Jamo
 0xff35

	)

1700 
	#XK_H™gul_Romaja
 0xff36

	)

1701 
	#XK_H™gul_Codeöput
 0xff37

	)

1702 
	#XK_H™gul_Je⁄ja
 0xff38

	)

1703 
	#XK_H™gul_B™ja
 0xff39

	)

1704 
	#XK_H™gul_PªH™ja
 0xff3®

	)

1705 
	#XK_H™gul_Po°H™ja
 0xff3b

	)

1706 
	#XK_H™gul_SögÀC™did©e
 0xff3¯

	)

1707 
	#XK_H™gul_Mu…ùÀC™did©e
 0xff3d

	)

1708 
	#XK_H™gul_PªviousC™did©e
 0xff3ê

	)

1709 
	#XK_H™gul_S≥cül
 0xff3‡

	)

1710 
	#XK_H™gul_swôch
 0xff7ê

	)

1713 
	#XK_H™gul_Kiyeog
 0x0ó1

	)

1714 
	#XK_H™gul_SßngKiyeog
 0x0ó2

	)

1715 
	#XK_H™gul_KiyeogSios
 0x0ó3

	)

1716 
	#XK_H™gul_Nõun
 0x0ó4

	)

1717 
	#XK_H™gul_NõunJõuj
 0x0ó5

	)

1718 
	#XK_H™gul_NõunHõuh
 0x0ó6

	)

1719 
	#XK_H™gul_Dikeud
 0x0ó7

	)

1720 
	#XK_H™gul_SßngDikeud
 0x0ó8

	)

1721 
	#XK_H™gul_Rõul
 0x0ó9

	)

1722 
	#XK_H™gul_RõulKiyeog
 0x0óa

	)

1723 
	#XK_H™gul_RõulMõum
 0x0ób

	)

1724 
	#XK_H™gul_RõulPõub
 0x0óc

	)

1725 
	#XK_H™gul_RõulSios
 0x0ód

	)

1726 
	#XK_H™gul_RõulTõut
 0x0óe

	)

1727 
	#XK_H™gul_RõulPhõuf
 0x0óf

	)

1728 
	#XK_H™gul_RõulHõuh
 0x0eb0

	)

1729 
	#XK_H™gul_Mõum
 0x0eb1

	)

1730 
	#XK_H™gul_Põub
 0x0eb2

	)

1731 
	#XK_H™gul_SßngPõub
 0x0eb3

	)

1732 
	#XK_H™gul_PõubSios
 0x0eb4

	)

1733 
	#XK_H™gul_Sios
 0x0eb5

	)

1734 
	#XK_H™gul_SßngSios
 0x0eb6

	)

1735 
	#XK_H™gul_Ieung
 0x0eb7

	)

1736 
	#XK_H™gul_Jõuj
 0x0eb8

	)

1737 
	#XK_H™gul_SßngJõuj
 0x0eb9

	)

1738 
	#XK_H™gul_Cõuc
 0x0eba

	)

1739 
	#XK_H™gul_Khõuq
 0x0ebb

	)

1740 
	#XK_H™gul_Tõut
 0x0ebc

	)

1741 
	#XK_H™gul_Phõuf
 0x0ebd

	)

1742 
	#XK_H™gul_Hõuh
 0x0ebe

	)

1745 
	#XK_H™gul_A
 0x0ebf

	)

1746 
	#XK_H™gul_AE
 0x0ec0

	)

1747 
	#XK_H™gul_YA
 0x0ec1

	)

1748 
	#XK_H™gul_YAE
 0x0ec2

	)

1749 
	#XK_H™gul_EO
 0x0ec3

	)

1750 
	#XK_H™gul_E
 0x0ec4

	)

1751 
	#XK_H™gul_YEO
 0x0ec5

	)

1752 
	#XK_H™gul_YE
 0x0ec6

	)

1753 
	#XK_H™gul_O
 0x0ec7

	)

1754 
	#XK_H™gul_WA
 0x0ec8

	)

1755 
	#XK_H™gul_WAE
 0x0ec9

	)

1756 
	#XK_H™gul_OE
 0x0eˇ

	)

1757 
	#XK_H™gul_YO
 0x0ecb

	)

1758 
	#XK_H™gul_U
 0x0ecc

	)

1759 
	#XK_H™gul_WEO
 0x0ecd

	)

1760 
	#XK_H™gul_WE
 0x0e˚

	)

1761 
	#XK_H™gul_WI
 0x0ecf

	)

1762 
	#XK_H™gul_YU
 0x0ed0

	)

1763 
	#XK_H™gul_EU
 0x0ed1

	)

1764 
	#XK_H™gul_YI
 0x0ed2

	)

1765 
	#XK_H™gul_I
 0x0ed3

	)

1768 
	#XK_H™gul_J_Kiyeog
 0x0ed4

	)

1769 
	#XK_H™gul_J_SßngKiyeog
 0x0ed5

	)

1770 
	#XK_H™gul_J_KiyeogSios
 0x0ed6

	)

1771 
	#XK_H™gul_J_Nõun
 0x0ed7

	)

1772 
	#XK_H™gul_J_NõunJõuj
 0x0ed8

	)

1773 
	#XK_H™gul_J_NõunHõuh
 0x0ed9

	)

1774 
	#XK_H™gul_J_Dikeud
 0x0eda

	)

1775 
	#XK_H™gul_J_Rõul
 0x0edb

	)

1776 
	#XK_H™gul_J_RõulKiyeog
 0x0edc

	)

1777 
	#XK_H™gul_J_RõulMõum
 0x0edd

	)

1778 
	#XK_H™gul_J_RõulPõub
 0x0ede

	)

1779 
	#XK_H™gul_J_RõulSios
 0x0edf

	)

1780 
	#XK_H™gul_J_RõulTõut
 0x0ì0

	)

1781 
	#XK_H™gul_J_RõulPhõuf
 0x0ì1

	)

1782 
	#XK_H™gul_J_RõulHõuh
 0x0ì2

	)

1783 
	#XK_H™gul_J_Mõum
 0x0ì3

	)

1784 
	#XK_H™gul_J_Põub
 0x0ì4

	)

1785 
	#XK_H™gul_J_PõubSios
 0x0ì5

	)

1786 
	#XK_H™gul_J_Sios
 0x0ì6

	)

1787 
	#XK_H™gul_J_SßngSios
 0x0ì7

	)

1788 
	#XK_H™gul_J_Ieung
 0x0ì8

	)

1789 
	#XK_H™gul_J_Jõuj
 0x0ì9

	)

1790 
	#XK_H™gul_J_Cõuc
 0x0ìa

	)

1791 
	#XK_H™gul_J_Khõuq
 0x0ìb

	)

1792 
	#XK_H™gul_J_Tõut
 0x0ìc

	)

1793 
	#XK_H™gul_J_Phõuf
 0x0ìd

	)

1794 
	#XK_H™gul_J_Hõuh
 0x0ìe

	)

1797 
	#XK_H™gul_RõulYe‹öHõuh
 0x0ìf

	)

1798 
	#XK_H™gul_Sunkye⁄geumMõum
 0x0ef0

	)

1799 
	#XK_H™gul_Sunkye⁄geumPõub
 0x0ef1

	)

1800 
	#XK_H™gul_P™Sios
 0x0ef2

	)

1801 
	#XK_H™gul_KkogjiDÆröIeung
 0x0ef3

	)

1802 
	#XK_H™gul_Sunkye⁄geumPhõuf
 0x0ef4

	)

1803 
	#XK_H™gul_Ye‹öHõuh
 0x0ef5

	)

1806 
	#XK_H™gul_AøeA
 0x0ef6

	)

1807 
	#XK_H™gul_AøeAE
 0x0ef7

	)

1810 
	#XK_H™gul_J_P™Sios
 0x0ef8

	)

1811 
	#XK_H™gul_J_KkogjiDÆröIeung
 0x0ef9

	)

1812 
	#XK_H™gul_J_Ye‹öHõuh
 0x0eÁ

	)

1815 
	#XK_K‹ón_W⁄
 0x0ef‡

	)

1823 #ifde‡
XK_ARMENIAN


1824 
	#XK_Armíün_lig©uª_ew
 0x1000587

	)

1825 
	#XK_Armíün_fuŒ_°›
 0x1000589

	)

1826 
	#XK_Armíün_vîjakë
 0x1000589

	)

1827 
	#XK_Armíün_£∑øti⁄_m¨k
 0x100055d

	)

1828 
	#XK_Armíün_but
 0x100055d

	)

1829 
	#XK_Armíün_hyphí
 0x100058®

	)

1830 
	#XK_Armíün_yíèm«
 0x100058®

	)

1831 
	#XK_Armíün_ex˛am
 0x100055¯

	)

1832 
	#XK_Armíün_am™ak
 0x100055¯

	)

1833 
	#XK_Armíün_ac˚¡
 0x100055b

	)

1834 
	#XK_Armíün_shesht
 0x100055b

	)

1835 
	#XK_Armíün_que°i⁄
 0x100055ê

	)

1836 
	#XK_Armíün_∑ruyk
 0x100055ê

	)

1837 
	#XK_Armíün_AYB
 0x1000531

	)

1838 
	#XK_Armíün_ayb
 0x1000561

	)

1839 
	#XK_Armíün_BEN
 0x1000532

	)

1840 
	#XK_Armíün_bí
 0x1000562

	)

1841 
	#XK_Armíün_GIM
 0x1000533

	)

1842 
	#XK_Armíün_gim
 0x1000563

	)

1843 
	#XK_Armíün_DA
 0x1000534

	)

1844 
	#XK_Armíün_da
 0x1000564

	)

1845 
	#XK_Armíün_YECH
 0x1000535

	)

1846 
	#XK_Armíün_yech
 0x1000565

	)

1847 
	#XK_Armíün_ZA
 0x1000536

	)

1848 
	#XK_Armíün_za
 0x1000566

	)

1849 
	#XK_Armíün_E
 0x1000537

	)

1850 
	#XK_Armíün_e
 0x1000567

	)

1851 
	#XK_Armíün_AT
 0x1000538

	)

1852 
	#XK_Armíün_©
 0x1000568

	)

1853 
	#XK_Armíün_TO
 0x1000539

	)

1854 
	#XK_Armíün_to
 0x1000569

	)

1855 
	#XK_Armíün_ZHE
 0x100053®

	)

1856 
	#XK_Armíün_zhe
 0x100056®

	)

1857 
	#XK_Armíün_INI
 0x100053b

	)

1858 
	#XK_Armíün_öi
 0x100056b

	)

1859 
	#XK_Armíün_LYUN
 0x100053¯

	)

1860 
	#XK_Armíün_lyun
 0x100056¯

	)

1861 
	#XK_Armíün_KHE
 0x100053d

	)

1862 
	#XK_Armíün_khe
 0x100056d

	)

1863 
	#XK_Armíün_TSA
 0x100053ê

	)

1864 
	#XK_Armíün_tß
 0x100056ê

	)

1865 
	#XK_Armíün_KEN
 0x100053‡

	)

1866 
	#XK_Armíün_kí
 0x100056‡

	)

1867 
	#XK_Armíün_HO
 0x1000540

	)

1868 
	#XK_Armíün_ho
 0x1000570

	)

1869 
	#XK_Armíün_DZA
 0x1000541

	)

1870 
	#XK_Armíün_dza
 0x1000571

	)

1871 
	#XK_Armíün_GHAT
 0x1000542

	)

1872 
	#XK_Armíün_gh©
 0x1000572

	)

1873 
	#XK_Armíün_TCHE
 0x1000543

	)

1874 
	#XK_Armíün_tche
 0x1000573

	)

1875 
	#XK_Armíün_MEN
 0x1000544

	)

1876 
	#XK_Armíün_mí
 0x1000574

	)

1877 
	#XK_Armíün_HI
 0x1000545

	)

1878 
	#XK_Armíün_hi
 0x1000575

	)

1879 
	#XK_Armíün_NU
 0x1000546

	)

1880 
	#XK_Armíün_nu
 0x1000576

	)

1881 
	#XK_Armíün_SHA
 0x1000547

	)

1882 
	#XK_Armíün_sha
 0x1000577

	)

1883 
	#XK_Armíün_VO
 0x1000548

	)

1884 
	#XK_Armíün_vo
 0x1000578

	)

1885 
	#XK_Armíün_CHA
 0x1000549

	)

1886 
	#XK_Armíün_cha
 0x1000579

	)

1887 
	#XK_Armíün_PE
 0x100054®

	)

1888 
	#XK_Armíün_≥
 0x100057®

	)

1889 
	#XK_Armíün_JE
 0x100054b

	)

1890 
	#XK_Armíün_je
 0x100057b

	)

1891 
	#XK_Armíün_RA
 0x100054¯

	)

1892 
	#XK_Armíün_ø
 0x100057¯

	)

1893 
	#XK_Armíün_SE
 0x100054d

	)

1894 
	#XK_Armíün_£
 0x100057d

	)

1895 
	#XK_Armíün_VEV
 0x100054ê

	)

1896 
	#XK_Armíün_vev
 0x100057ê

	)

1897 
	#XK_Armíün_TYUN
 0x100054‡

	)

1898 
	#XK_Armíün_tyun
 0x100057‡

	)

1899 
	#XK_Armíün_RE
 0x1000550

	)

1900 
	#XK_Armíün_ª
 0x1000580

	)

1901 
	#XK_Armíün_TSO
 0x1000551

	)

1902 
	#XK_Armíün_tso
 0x1000581

	)

1903 
	#XK_Armíün_VYUN
 0x1000552

	)

1904 
	#XK_Armíün_vyun
 0x1000582

	)

1905 
	#XK_Armíün_PYUR
 0x1000553

	)

1906 
	#XK_Armíün_pyur
 0x1000583

	)

1907 
	#XK_Armíün_KE
 0x1000554

	)

1908 
	#XK_Armíün_ke
 0x1000584

	)

1909 
	#XK_Armíün_O
 0x1000555

	)

1910 
	#XK_Armíün_o
 0x1000585

	)

1911 
	#XK_Armíün_FE
 0x1000556

	)

1912 
	#XK_Armíün_„
 0x1000586

	)

1913 
	#XK_Armíün_≠o°r›he
 0x100055®

	)

1920 #ifde‡
XK_GEORGIAN


1921 
	#XK_Ge‹gün_™
 0x10010d0

	)

1922 
	#XK_Ge‹gün_b™
 0x10010d1

	)

1923 
	#XK_Ge‹gün_g™
 0x10010d2

	)

1924 
	#XK_Ge‹gün_d⁄
 0x10010d3

	)

1925 
	#XK_Ge‹gün_í
 0x10010d4

	)

1926 
	#XK_Ge‹gün_vö
 0x10010d5

	)

1927 
	#XK_Ge‹gün_zí
 0x10010d6

	)

1928 
	#XK_Ge‹gün_èn
 0x10010d7

	)

1929 
	#XK_Ge‹gün_ö
 0x10010d8

	)

1930 
	#XK_Ge‹gün_k™
 0x10010d9

	)

1931 
	#XK_Ge‹gün_œs
 0x10010d®

	)

1932 
	#XK_Ge‹gün_m™
 0x10010db

	)

1933 
	#XK_Ge‹gün_«r
 0x10010d¯

	)

1934 
	#XK_Ge‹gün_⁄
 0x10010dd

	)

1935 
	#XK_Ge‹gün_∑r
 0x10010dê

	)

1936 
	#XK_Ge‹gün_zh¨
 0x10010d‡

	)

1937 
	#XK_Ge‹gün_øe
 0x10010e0

	)

1938 
	#XK_Ge‹gün_ßn
 0x10010e1

	)

1939 
	#XK_Ge‹gün_èr
 0x10010e2

	)

1940 
	#XK_Ge‹gün_un
 0x10010e3

	)

1941 
	#XK_Ge‹gün_ph¨
 0x10010e4

	)

1942 
	#XK_Ge‹gün_kh¨
 0x10010e5

	)

1943 
	#XK_Ge‹gün_gh™
 0x10010e6

	)

1944 
	#XK_Ge‹gün_q¨
 0x10010e7

	)

1945 
	#XK_Ge‹gün_shö
 0x10010e8

	)

1946 
	#XK_Ge‹gün_chö
 0x10010e9

	)

1947 
	#XK_Ge‹gün_ˇn
 0x10010ó

	)

1948 
	#XK_Ge‹gün_jû
 0x10010eb

	)

1949 
	#XK_Ge‹gün_cû
 0x10010e¯

	)

1950 
	#XK_Ge‹gün_ch¨
 0x10010ed

	)

1951 
	#XK_Ge‹gün_x™
 0x10010ì

	)

1952 
	#XK_Ge‹gün_jh™
 0x10010e‡

	)

1953 
	#XK_Ge‹gün_h´
 0x10010f0

	)

1954 
	#XK_Ge‹gün_he
 0x10010f1

	)

1955 
	#XK_Ge‹gün_hõ
 0x10010f2

	)

1956 
	#XK_Ge‹gün_we
 0x10010f3

	)

1957 
	#XK_Ge‹gün_h¨
 0x10010f4

	)

1958 
	#XK_Ge‹gün_h€
 0x10010f5

	)

1959 
	#XK_Ge‹gün_fi
 0x10010f6

	)

1966 #ifde‡
XK_CAUCASUS


1968 
	#XK_XabovedŸ
 0x1001e8®

	)

1969 
	#XK_Ibªve
 0x100012¯

	)

1970 
	#XK_Z°roke
 0x10001b5

	)

1971 
	#XK_Gˇr⁄
 0x10001e6

	)

1972 
	#XK_Oˇr⁄
 0x10001d1

	)

1973 
	#XK_Ob¨ªd
 0x100019‡

	)

1974 
	#XK_xabovedŸ
 0x1001e8b

	)

1975 
	#XK_ibªve
 0x100012d

	)

1976 
	#XK_z°roke
 0x10001b6

	)

1977 
	#XK_gˇr⁄
 0x10001e7

	)

1978 
	#XK_oˇr⁄
 0x10001d2

	)

1979 
	#XK_ob¨ªd
 0x1000275

	)

1980 
	#XK_SCHWA
 0x100018‡

	)

1981 
	#XK_schwa
 0x1000259

	)

1982 
	#XK_EZH
 0x10001b7

	)

1983 
	#XK_ezh
 0x1000292

	)

1986 
	#XK_LbñowdŸ
 0x1001e36

	)

1987 
	#XK_lbñowdŸ
 0x1001e37

	)

1994 #ifde‡
XK_VIETNAMESE


1995 
	#XK_AbñowdŸ
 0x1001ó0

	)

1996 
	#XK_abñowdŸ
 0x1001ó1

	)

1997 
	#XK_Ahook
 0x1001ó2

	)

1998 
	#XK_ahook
 0x1001ó3

	)

1999 
	#XK_AcúcumÊexacuã
 0x1001ó4

	)

2000 
	#XK_acúcumÊexacuã
 0x1001ó5

	)

2001 
	#XK_AcúcumÊexgøve
 0x1001ó6

	)

2002 
	#XK_acúcumÊexgøve
 0x1001ó7

	)

2003 
	#XK_AcúcumÊexhook
 0x1001ó8

	)

2004 
	#XK_acúcumÊexhook
 0x1001ó9

	)

2005 
	#XK_AcúcumÊextûde
 0x1001ó®

	)

2006 
	#XK_acúcumÊextûde
 0x1001ób

	)

2007 
	#XK_AcúcumÊexbñowdŸ
 0x1001ó¯

	)

2008 
	#XK_acúcumÊexbñowdŸ
 0x1001ód

	)

2009 
	#XK_Abªvócuã
 0x1001óê

	)

2010 
	#XK_abªvócuã
 0x1001ó‡

	)

2011 
	#XK_Abªvegøve
 0x1001eb0

	)

2012 
	#XK_abªvegøve
 0x1001eb1

	)

2013 
	#XK_Abªvehook
 0x1001eb2

	)

2014 
	#XK_abªvehook
 0x1001eb3

	)

2015 
	#XK_Abªvëûde
 0x1001eb4

	)

2016 
	#XK_abªvëûde
 0x1001eb5

	)

2017 
	#XK_AbªvebñowdŸ
 0x1001eb6

	)

2018 
	#XK_abªvebñowdŸ
 0x1001eb7

	)

2019 
	#XK_EbñowdŸ
 0x1001eb8

	)

2020 
	#XK_ebñowdŸ
 0x1001eb9

	)

2021 
	#XK_Ehook
 0x1001eb®

	)

2022 
	#XK_ehook
 0x1001ebb

	)

2023 
	#XK_Etûde
 0x1001eb¯

	)

2024 
	#XK_ëûde
 0x1001ebd

	)

2025 
	#XK_EcúcumÊexacuã
 0x1001ebê

	)

2026 
	#XK_ecúcumÊexacuã
 0x1001eb‡

	)

2027 
	#XK_EcúcumÊexgøve
 0x1001ec0

	)

2028 
	#XK_ecúcumÊexgøve
 0x1001ec1

	)

2029 
	#XK_EcúcumÊexhook
 0x1001ec2

	)

2030 
	#XK_ecúcumÊexhook
 0x1001ec3

	)

2031 
	#XK_EcúcumÊextûde
 0x1001ec4

	)

2032 
	#XK_ecúcumÊextûde
 0x1001ec5

	)

2033 
	#XK_EcúcumÊexbñowdŸ
 0x1001ec6

	)

2034 
	#XK_ecúcumÊexbñowdŸ
 0x1001ec7

	)

2035 
	#XK_Ihook
 0x1001ec8

	)

2036 
	#XK_ihook
 0x1001ec9

	)

2037 
	#XK_IbñowdŸ
 0x1001eˇ

	)

2038 
	#XK_ibñowdŸ
 0x1001ecb

	)

2039 
	#XK_ObñowdŸ
 0x1001ec¯

	)

2040 
	#XK_obñowdŸ
 0x1001ecd

	)

2041 
	#XK_Ohook
 0x1001e˚

	)

2042 
	#XK_ohook
 0x1001ec‡

	)

2043 
	#XK_OcúcumÊexacuã
 0x1001ed0

	)

2044 
	#XK_ocúcumÊexacuã
 0x1001ed1

	)

2045 
	#XK_OcúcumÊexgøve
 0x1001ed2

	)

2046 
	#XK_ocúcumÊexgøve
 0x1001ed3

	)

2047 
	#XK_OcúcumÊexhook
 0x1001ed4

	)

2048 
	#XK_ocúcumÊexhook
 0x1001ed5

	)

2049 
	#XK_OcúcumÊextûde
 0x1001ed6

	)

2050 
	#XK_ocúcumÊextûde
 0x1001ed7

	)

2051 
	#XK_OcúcumÊexbñowdŸ
 0x1001ed8

	)

2052 
	#XK_ocúcumÊexbñowdŸ
 0x1001ed9

	)

2053 
	#XK_Oh‹«cuã
 0x1001ed®

	)

2054 
	#XK_oh‹«cuã
 0x1001edb

	)

2055 
	#XK_Oh‹ngøve
 0x1001ed¯

	)

2056 
	#XK_oh‹ngøve
 0x1001edd

	)

2057 
	#XK_Oh‹nhook
 0x1001edê

	)

2058 
	#XK_oh‹nhook
 0x1001ed‡

	)

2059 
	#XK_Oh‹¡ûde
 0x1001ì0

	)

2060 
	#XK_oh‹¡ûde
 0x1001ì1

	)

2061 
	#XK_Oh‹nbñowdŸ
 0x1001ì2

	)

2062 
	#XK_oh‹nbñowdŸ
 0x1001ì3

	)

2063 
	#XK_UbñowdŸ
 0x1001ì4

	)

2064 
	#XK_ubñowdŸ
 0x1001ì5

	)

2065 
	#XK_Uhook
 0x1001ì6

	)

2066 
	#XK_uhook
 0x1001ì7

	)

2067 
	#XK_Uh‹«cuã
 0x1001ì8

	)

2068 
	#XK_uh‹«cuã
 0x1001ì9

	)

2069 
	#XK_Uh‹ngøve
 0x1001ì®

	)

2070 
	#XK_uh‹ngøve
 0x1001ìb

	)

2071 
	#XK_Uh‹nhook
 0x1001ì¯

	)

2072 
	#XK_uh‹nhook
 0x1001ìd

	)

2073 
	#XK_Uh‹¡ûde
 0x1001ìê

	)

2074 
	#XK_uh‹¡ûde
 0x1001ì‡

	)

2075 
	#XK_Uh‹nbñowdŸ
 0x1001ef0

	)

2076 
	#XK_uh‹nbñowdŸ
 0x1001ef1

	)

2077 
	#XK_YbñowdŸ
 0x1001ef4

	)

2078 
	#XK_ybñowdŸ
 0x1001ef5

	)

2079 
	#XK_Yhook
 0x1001ef6

	)

2080 
	#XK_yhook
 0x1001ef7

	)

2081 
	#XK_Ytûde
 0x1001ef8

	)

2082 
	#XK_ytûde
 0x1001ef9

	)

2083 
	#XK_Oh‹n
 0x10001a0

	)

2084 
	#XK_oh‹n
 0x10001a1

	)

2085 
	#XK_Uh‹n
 0x10001a‡

	)

2086 
	#XK_uh‹n
 0x10001b0

	)

2090 #ifde‡
XK_CURRENCY


2091 
	#XK_EcuSign
 0x10020a0

	)

2092 
	#XK_Cﬁ⁄Sign
 0x10020a1

	)

2093 
	#XK_CruzeúoSign
 0x10020a2

	)

2094 
	#XK_FFøncSign
 0x10020a3

	)

2095 
	#XK_LúaSign
 0x10020a4

	)

2096 
	#XK_MûlSign
 0x10020a5

	)

2097 
	#XK_NaúaSign
 0x10020a6

	)

2098 
	#XK_Pe£èSign
 0x10020a7

	)

2099 
	#XK_Ru≥eSign
 0x10020a8

	)

2100 
	#XK_W⁄Sign
 0x10020a9

	)

2101 
	#XK_NewSheqñSign
 0x10020Ø

	)

2102 
	#XK_D⁄gSign
 0x10020ab

	)

2103 
	#XK_EuroSign
 0x20a¯

	)

2106 #ifde‡
XK_MATHEMATICAL


2108 
	#XK_zîosu≥ri‹
 0x1002070

	)

2109 
	#XK_foursu≥ri‹
 0x1002074

	)

2110 
	#XK_fivesu≥ri‹
 0x1002075

	)

2111 
	#XK_sixsu≥ri‹
 0x1002076

	)

2112 
	#XK_£vísu≥ri‹
 0x1002077

	)

2113 
	#XK_eightsu≥ri‹
 0x1002078

	)

2114 
	#XK_nöesu≥ri‹
 0x1002079

	)

2115 
	#XK_zîosubs¸ùt
 0x1002080

	)

2116 
	#XK_⁄esubs¸ùt
 0x1002081

	)

2117 
	#XK_twosubs¸ùt
 0x1002082

	)

2118 
	#XK_thªesubs¸ùt
 0x1002083

	)

2119 
	#XK_foursubs¸ùt
 0x1002084

	)

2120 
	#XK_fivesubs¸ùt
 0x1002085

	)

2121 
	#XK_sixsubs¸ùt
 0x1002086

	)

2122 
	#XK_£vísubs¸ùt
 0x1002087

	)

2123 
	#XK_eightsubs¸ùt
 0x1002088

	)

2124 
	#XK_nöesubs¸ùt
 0x1002089

	)

2125 
	#XK_∑πdif„ª¡ül
 0x1002202

	)

2126 
	#XK_em±y£t
 0x1002205

	)

2127 
	#XK_ñemítof
 0x1002208

	)

2128 
	#XK_nŸñemítof
 0x1002209

	)

2129 
	#XK_c⁄èößs
 0x100220B

	)

2130 
	#XK_squ¨îoŸ
 0x100221A

	)

2131 
	#XK_cubîoŸ
 0x100221B

	)

2132 
	#XK_fouπhroŸ
 0x100221C

	)

2133 
	#XK_döãgøl
 0x100222C

	)

2134 
	#XK_töãgøl
 0x100222D

	)

2135 
	#XK_beˇu£
 0x1002235

	)

2136 
	#XK_≠¥oxeq
 0x1002248

	)

2137 
	#XK_nŸ≠¥oxeq
 0x1002247

	)

2138 
	#XK_nŸidítiˇl
 0x1002262

	)

2139 
	#XK_°ri˘eq
 0x1002263

	)

2142 #ifde‡
XK_BRAILLE


2143 
	#XK_bøûÀ_dŸ_1
 0xfff1

	)

2144 
	#XK_bøûÀ_dŸ_2
 0xfff2

	)

2145 
	#XK_bøûÀ_dŸ_3
 0xfff3

	)

2146 
	#XK_bøûÀ_dŸ_4
 0xfff4

	)

2147 
	#XK_bøûÀ_dŸ_5
 0xfff5

	)

2148 
	#XK_bøûÀ_dŸ_6
 0xfff6

	)

2149 
	#XK_bøûÀ_dŸ_7
 0xfff7

	)

2150 
	#XK_bøûÀ_dŸ_8
 0xfff8

	)

2151 
	#XK_bøûÀ_dŸ_9
 0xfff9

	)

2152 
	#XK_bøûÀ_dŸ_10
 0xffÁ

	)

2153 
	#XK_bøûÀ_bœnk
 0x1002800

	)

2154 
	#XK_bøûÀ_dŸs_1
 0x1002801

	)

2155 
	#XK_bøûÀ_dŸs_2
 0x1002802

	)

2156 
	#XK_bøûÀ_dŸs_12
 0x1002803

	)

2157 
	#XK_bøûÀ_dŸs_3
 0x1002804

	)

2158 
	#XK_bøûÀ_dŸs_13
 0x1002805

	)

2159 
	#XK_bøûÀ_dŸs_23
 0x1002806

	)

2160 
	#XK_bøûÀ_dŸs_123
 0x1002807

	)

2161 
	#XK_bøûÀ_dŸs_4
 0x1002808

	)

2162 
	#XK_bøûÀ_dŸs_14
 0x1002809

	)

2163 
	#XK_bøûÀ_dŸs_24
 0x100280®

	)

2164 
	#XK_bøûÀ_dŸs_124
 0x100280b

	)

2165 
	#XK_bøûÀ_dŸs_34
 0x100280¯

	)

2166 
	#XK_bøûÀ_dŸs_134
 0x100280d

	)

2167 
	#XK_bøûÀ_dŸs_234
 0x100280ê

	)

2168 
	#XK_bøûÀ_dŸs_1234
 0x100280‡

	)

2169 
	#XK_bøûÀ_dŸs_5
 0x1002810

	)

2170 
	#XK_bøûÀ_dŸs_15
 0x1002811

	)

2171 
	#XK_bøûÀ_dŸs_25
 0x1002812

	)

2172 
	#XK_bøûÀ_dŸs_125
 0x1002813

	)

2173 
	#XK_bøûÀ_dŸs_35
 0x1002814

	)

2174 
	#XK_bøûÀ_dŸs_135
 0x1002815

	)

2175 
	#XK_bøûÀ_dŸs_235
 0x1002816

	)

2176 
	#XK_bøûÀ_dŸs_1235
 0x1002817

	)

2177 
	#XK_bøûÀ_dŸs_45
 0x1002818

	)

2178 
	#XK_bøûÀ_dŸs_145
 0x1002819

	)

2179 
	#XK_bøûÀ_dŸs_245
 0x100281®

	)

2180 
	#XK_bøûÀ_dŸs_1245
 0x100281b

	)

2181 
	#XK_bøûÀ_dŸs_345
 0x100281¯

	)

2182 
	#XK_bøûÀ_dŸs_1345
 0x100281d

	)

2183 
	#XK_bøûÀ_dŸs_2345
 0x100281ê

	)

2184 
	#XK_bøûÀ_dŸs_12345
 0x100281‡

	)

2185 
	#XK_bøûÀ_dŸs_6
 0x1002820

	)

2186 
	#XK_bøûÀ_dŸs_16
 0x1002821

	)

2187 
	#XK_bøûÀ_dŸs_26
 0x1002822

	)

2188 
	#XK_bøûÀ_dŸs_126
 0x1002823

	)

2189 
	#XK_bøûÀ_dŸs_36
 0x1002824

	)

2190 
	#XK_bøûÀ_dŸs_136
 0x1002825

	)

2191 
	#XK_bøûÀ_dŸs_236
 0x1002826

	)

2192 
	#XK_bøûÀ_dŸs_1236
 0x1002827

	)

2193 
	#XK_bøûÀ_dŸs_46
 0x1002828

	)

2194 
	#XK_bøûÀ_dŸs_146
 0x1002829

	)

2195 
	#XK_bøûÀ_dŸs_246
 0x100282®

	)

2196 
	#XK_bøûÀ_dŸs_1246
 0x100282b

	)

2197 
	#XK_bøûÀ_dŸs_346
 0x100282¯

	)

2198 
	#XK_bøûÀ_dŸs_1346
 0x100282d

	)

2199 
	#XK_bøûÀ_dŸs_2346
 0x100282ê

	)

2200 
	#XK_bøûÀ_dŸs_12346
 0x100282‡

	)

2201 
	#XK_bøûÀ_dŸs_56
 0x1002830

	)

2202 
	#XK_bøûÀ_dŸs_156
 0x1002831

	)

2203 
	#XK_bøûÀ_dŸs_256
 0x1002832

	)

2204 
	#XK_bøûÀ_dŸs_1256
 0x1002833

	)

2205 
	#XK_bøûÀ_dŸs_356
 0x1002834

	)

2206 
	#XK_bøûÀ_dŸs_1356
 0x1002835

	)

2207 
	#XK_bøûÀ_dŸs_2356
 0x1002836

	)

2208 
	#XK_bøûÀ_dŸs_12356
 0x1002837

	)

2209 
	#XK_bøûÀ_dŸs_456
 0x1002838

	)

2210 
	#XK_bøûÀ_dŸs_1456
 0x1002839

	)

2211 
	#XK_bøûÀ_dŸs_2456
 0x100283®

	)

2212 
	#XK_bøûÀ_dŸs_12456
 0x100283b

	)

2213 
	#XK_bøûÀ_dŸs_3456
 0x100283¯

	)

2214 
	#XK_bøûÀ_dŸs_13456
 0x100283d

	)

2215 
	#XK_bøûÀ_dŸs_23456
 0x100283ê

	)

2216 
	#XK_bøûÀ_dŸs_123456
 0x100283‡

	)

2217 
	#XK_bøûÀ_dŸs_7
 0x1002840

	)

2218 
	#XK_bøûÀ_dŸs_17
 0x1002841

	)

2219 
	#XK_bøûÀ_dŸs_27
 0x1002842

	)

2220 
	#XK_bøûÀ_dŸs_127
 0x1002843

	)

2221 
	#XK_bøûÀ_dŸs_37
 0x1002844

	)

2222 
	#XK_bøûÀ_dŸs_137
 0x1002845

	)

2223 
	#XK_bøûÀ_dŸs_237
 0x1002846

	)

2224 
	#XK_bøûÀ_dŸs_1237
 0x1002847

	)

2225 
	#XK_bøûÀ_dŸs_47
 0x1002848

	)

2226 
	#XK_bøûÀ_dŸs_147
 0x1002849

	)

2227 
	#XK_bøûÀ_dŸs_247
 0x100284®

	)

2228 
	#XK_bøûÀ_dŸs_1247
 0x100284b

	)

2229 
	#XK_bøûÀ_dŸs_347
 0x100284¯

	)

2230 
	#XK_bøûÀ_dŸs_1347
 0x100284d

	)

2231 
	#XK_bøûÀ_dŸs_2347
 0x100284ê

	)

2232 
	#XK_bøûÀ_dŸs_12347
 0x100284‡

	)

2233 
	#XK_bøûÀ_dŸs_57
 0x1002850

	)

2234 
	#XK_bøûÀ_dŸs_157
 0x1002851

	)

2235 
	#XK_bøûÀ_dŸs_257
 0x1002852

	)

2236 
	#XK_bøûÀ_dŸs_1257
 0x1002853

	)

2237 
	#XK_bøûÀ_dŸs_357
 0x1002854

	)

2238 
	#XK_bøûÀ_dŸs_1357
 0x1002855

	)

2239 
	#XK_bøûÀ_dŸs_2357
 0x1002856

	)

2240 
	#XK_bøûÀ_dŸs_12357
 0x1002857

	)

2241 
	#XK_bøûÀ_dŸs_457
 0x1002858

	)

2242 
	#XK_bøûÀ_dŸs_1457
 0x1002859

	)

2243 
	#XK_bøûÀ_dŸs_2457
 0x100285®

	)

2244 
	#XK_bøûÀ_dŸs_12457
 0x100285b

	)

2245 
	#XK_bøûÀ_dŸs_3457
 0x100285¯

	)

2246 
	#XK_bøûÀ_dŸs_13457
 0x100285d

	)

2247 
	#XK_bøûÀ_dŸs_23457
 0x100285ê

	)

2248 
	#XK_bøûÀ_dŸs_123457
 0x100285‡

	)

2249 
	#XK_bøûÀ_dŸs_67
 0x1002860

	)

2250 
	#XK_bøûÀ_dŸs_167
 0x1002861

	)

2251 
	#XK_bøûÀ_dŸs_267
 0x1002862

	)

2252 
	#XK_bøûÀ_dŸs_1267
 0x1002863

	)

2253 
	#XK_bøûÀ_dŸs_367
 0x1002864

	)

2254 
	#XK_bøûÀ_dŸs_1367
 0x1002865

	)

2255 
	#XK_bøûÀ_dŸs_2367
 0x1002866

	)

2256 
	#XK_bøûÀ_dŸs_12367
 0x1002867

	)

2257 
	#XK_bøûÀ_dŸs_467
 0x1002868

	)

2258 
	#XK_bøûÀ_dŸs_1467
 0x1002869

	)

2259 
	#XK_bøûÀ_dŸs_2467
 0x100286®

	)

2260 
	#XK_bøûÀ_dŸs_12467
 0x100286b

	)

2261 
	#XK_bøûÀ_dŸs_3467
 0x100286¯

	)

2262 
	#XK_bøûÀ_dŸs_13467
 0x100286d

	)

2263 
	#XK_bøûÀ_dŸs_23467
 0x100286ê

	)

2264 
	#XK_bøûÀ_dŸs_123467
 0x100286‡

	)

2265 
	#XK_bøûÀ_dŸs_567
 0x1002870

	)

2266 
	#XK_bøûÀ_dŸs_1567
 0x1002871

	)

2267 
	#XK_bøûÀ_dŸs_2567
 0x1002872

	)

2268 
	#XK_bøûÀ_dŸs_12567
 0x1002873

	)

2269 
	#XK_bøûÀ_dŸs_3567
 0x1002874

	)

2270 
	#XK_bøûÀ_dŸs_13567
 0x1002875

	)

2271 
	#XK_bøûÀ_dŸs_23567
 0x1002876

	)

2272 
	#XK_bøûÀ_dŸs_123567
 0x1002877

	)

2273 
	#XK_bøûÀ_dŸs_4567
 0x1002878

	)

2274 
	#XK_bøûÀ_dŸs_14567
 0x1002879

	)

2275 
	#XK_bøûÀ_dŸs_24567
 0x100287®

	)

2276 
	#XK_bøûÀ_dŸs_124567
 0x100287b

	)

2277 
	#XK_bøûÀ_dŸs_34567
 0x100287¯

	)

2278 
	#XK_bøûÀ_dŸs_134567
 0x100287d

	)

2279 
	#XK_bøûÀ_dŸs_234567
 0x100287ê

	)

2280 
	#XK_bøûÀ_dŸs_1234567
 0x100287‡

	)

2281 
	#XK_bøûÀ_dŸs_8
 0x1002880

	)

2282 
	#XK_bøûÀ_dŸs_18
 0x1002881

	)

2283 
	#XK_bøûÀ_dŸs_28
 0x1002882

	)

2284 
	#XK_bøûÀ_dŸs_128
 0x1002883

	)

2285 
	#XK_bøûÀ_dŸs_38
 0x1002884

	)

2286 
	#XK_bøûÀ_dŸs_138
 0x1002885

	)

2287 
	#XK_bøûÀ_dŸs_238
 0x1002886

	)

2288 
	#XK_bøûÀ_dŸs_1238
 0x1002887

	)

2289 
	#XK_bøûÀ_dŸs_48
 0x1002888

	)

2290 
	#XK_bøûÀ_dŸs_148
 0x1002889

	)

2291 
	#XK_bøûÀ_dŸs_248
 0x100288®

	)

2292 
	#XK_bøûÀ_dŸs_1248
 0x100288b

	)

2293 
	#XK_bøûÀ_dŸs_348
 0x100288¯

	)

2294 
	#XK_bøûÀ_dŸs_1348
 0x100288d

	)

2295 
	#XK_bøûÀ_dŸs_2348
 0x100288ê

	)

2296 
	#XK_bøûÀ_dŸs_12348
 0x100288‡

	)

2297 
	#XK_bøûÀ_dŸs_58
 0x1002890

	)

2298 
	#XK_bøûÀ_dŸs_158
 0x1002891

	)

2299 
	#XK_bøûÀ_dŸs_258
 0x1002892

	)

2300 
	#XK_bøûÀ_dŸs_1258
 0x1002893

	)

2301 
	#XK_bøûÀ_dŸs_358
 0x1002894

	)

2302 
	#XK_bøûÀ_dŸs_1358
 0x1002895

	)

2303 
	#XK_bøûÀ_dŸs_2358
 0x1002896

	)

2304 
	#XK_bøûÀ_dŸs_12358
 0x1002897

	)

2305 
	#XK_bøûÀ_dŸs_458
 0x1002898

	)

2306 
	#XK_bøûÀ_dŸs_1458
 0x1002899

	)

2307 
	#XK_bøûÀ_dŸs_2458
 0x100289®

	)

2308 
	#XK_bøûÀ_dŸs_12458
 0x100289b

	)

2309 
	#XK_bøûÀ_dŸs_3458
 0x100289¯

	)

2310 
	#XK_bøûÀ_dŸs_13458
 0x100289d

	)

2311 
	#XK_bøûÀ_dŸs_23458
 0x100289ê

	)

2312 
	#XK_bøûÀ_dŸs_123458
 0x100289‡

	)

2313 
	#XK_bøûÀ_dŸs_68
 0x10028a0

	)

2314 
	#XK_bøûÀ_dŸs_168
 0x10028a1

	)

2315 
	#XK_bøûÀ_dŸs_268
 0x10028a2

	)

2316 
	#XK_bøûÀ_dŸs_1268
 0x10028a3

	)

2317 
	#XK_bøûÀ_dŸs_368
 0x10028a4

	)

2318 
	#XK_bøûÀ_dŸs_1368
 0x10028a5

	)

2319 
	#XK_bøûÀ_dŸs_2368
 0x10028a6

	)

2320 
	#XK_bøûÀ_dŸs_12368
 0x10028a7

	)

2321 
	#XK_bøûÀ_dŸs_468
 0x10028a8

	)

2322 
	#XK_bøûÀ_dŸs_1468
 0x10028a9

	)

2323 
	#XK_bøûÀ_dŸs_2468
 0x10028Ø

	)

2324 
	#XK_bøûÀ_dŸs_12468
 0x10028ab

	)

2325 
	#XK_bøûÀ_dŸs_3468
 0x10028a¯

	)

2326 
	#XK_bøûÀ_dŸs_13468
 0x10028ad

	)

2327 
	#XK_bøûÀ_dŸs_23468
 0x10028´

	)

2328 
	#XK_bøûÀ_dŸs_123468
 0x10028a‡

	)

2329 
	#XK_bøûÀ_dŸs_568
 0x10028b0

	)

2330 
	#XK_bøûÀ_dŸs_1568
 0x10028b1

	)

2331 
	#XK_bøûÀ_dŸs_2568
 0x10028b2

	)

2332 
	#XK_bøûÀ_dŸs_12568
 0x10028b3

	)

2333 
	#XK_bøûÀ_dŸs_3568
 0x10028b4

	)

2334 
	#XK_bøûÀ_dŸs_13568
 0x10028b5

	)

2335 
	#XK_bøûÀ_dŸs_23568
 0x10028b6

	)

2336 
	#XK_bøûÀ_dŸs_123568
 0x10028b7

	)

2337 
	#XK_bøûÀ_dŸs_4568
 0x10028b8

	)

2338 
	#XK_bøûÀ_dŸs_14568
 0x10028b9

	)

2339 
	#XK_bøûÀ_dŸs_24568
 0x10028b®

	)

2340 
	#XK_bøûÀ_dŸs_124568
 0x10028bb

	)

2341 
	#XK_bøûÀ_dŸs_34568
 0x10028b¯

	)

2342 
	#XK_bøûÀ_dŸs_134568
 0x10028bd

	)

2343 
	#XK_bøûÀ_dŸs_234568
 0x10028bê

	)

2344 
	#XK_bøûÀ_dŸs_1234568
 0x10028b‡

	)

2345 
	#XK_bøûÀ_dŸs_78
 0x10028c0

	)

2346 
	#XK_bøûÀ_dŸs_178
 0x10028c1

	)

2347 
	#XK_bøûÀ_dŸs_278
 0x10028c2

	)

2348 
	#XK_bøûÀ_dŸs_1278
 0x10028c3

	)

2349 
	#XK_bøûÀ_dŸs_378
 0x10028c4

	)

2350 
	#XK_bøûÀ_dŸs_1378
 0x10028c5

	)

2351 
	#XK_bøûÀ_dŸs_2378
 0x10028c6

	)

2352 
	#XK_bøûÀ_dŸs_12378
 0x10028c7

	)

2353 
	#XK_bøûÀ_dŸs_478
 0x10028c8

	)

2354 
	#XK_bøûÀ_dŸs_1478
 0x10028c9

	)

2355 
	#XK_bøûÀ_dŸs_2478
 0x10028ˇ

	)

2356 
	#XK_bøûÀ_dŸs_12478
 0x10028cb

	)

2357 
	#XK_bøûÀ_dŸs_3478
 0x10028c¯

	)

2358 
	#XK_bøûÀ_dŸs_13478
 0x10028cd

	)

2359 
	#XK_bøûÀ_dŸs_23478
 0x10028˚

	)

2360 
	#XK_bøûÀ_dŸs_123478
 0x10028c‡

	)

2361 
	#XK_bøûÀ_dŸs_578
 0x10028d0

	)

2362 
	#XK_bøûÀ_dŸs_1578
 0x10028d1

	)

2363 
	#XK_bøûÀ_dŸs_2578
 0x10028d2

	)

2364 
	#XK_bøûÀ_dŸs_12578
 0x10028d3

	)

2365 
	#XK_bøûÀ_dŸs_3578
 0x10028d4

	)

2366 
	#XK_bøûÀ_dŸs_13578
 0x10028d5

	)

2367 
	#XK_bøûÀ_dŸs_23578
 0x10028d6

	)

2368 
	#XK_bøûÀ_dŸs_123578
 0x10028d7

	)

2369 
	#XK_bøûÀ_dŸs_4578
 0x10028d8

	)

2370 
	#XK_bøûÀ_dŸs_14578
 0x10028d9

	)

2371 
	#XK_bøûÀ_dŸs_24578
 0x10028d®

	)

2372 
	#XK_bøûÀ_dŸs_124578
 0x10028db

	)

2373 
	#XK_bøûÀ_dŸs_34578
 0x10028d¯

	)

2374 
	#XK_bøûÀ_dŸs_134578
 0x10028dd

	)

2375 
	#XK_bøûÀ_dŸs_234578
 0x10028dê

	)

2376 
	#XK_bøûÀ_dŸs_1234578
 0x10028d‡

	)

2377 
	#XK_bøûÀ_dŸs_678
 0x10028e0

	)

2378 
	#XK_bøûÀ_dŸs_1678
 0x10028e1

	)

2379 
	#XK_bøûÀ_dŸs_2678
 0x10028e2

	)

2380 
	#XK_bøûÀ_dŸs_12678
 0x10028e3

	)

2381 
	#XK_bøûÀ_dŸs_3678
 0x10028e4

	)

2382 
	#XK_bøûÀ_dŸs_13678
 0x10028e5

	)

2383 
	#XK_bøûÀ_dŸs_23678
 0x10028e6

	)

2384 
	#XK_bøûÀ_dŸs_123678
 0x10028e7

	)

2385 
	#XK_bøûÀ_dŸs_4678
 0x10028e8

	)

2386 
	#XK_bøûÀ_dŸs_14678
 0x10028e9

	)

2387 
	#XK_bøûÀ_dŸs_24678
 0x10028ó

	)

2388 
	#XK_bøûÀ_dŸs_124678
 0x10028eb

	)

2389 
	#XK_bøûÀ_dŸs_34678
 0x10028e¯

	)

2390 
	#XK_bøûÀ_dŸs_134678
 0x10028ed

	)

2391 
	#XK_bøûÀ_dŸs_234678
 0x10028ì

	)

2392 
	#XK_bøûÀ_dŸs_1234678
 0x10028e‡

	)

2393 
	#XK_bøûÀ_dŸs_5678
 0x10028f0

	)

2394 
	#XK_bøûÀ_dŸs_15678
 0x10028f1

	)

2395 
	#XK_bøûÀ_dŸs_25678
 0x10028f2

	)

2396 
	#XK_bøûÀ_dŸs_125678
 0x10028f3

	)

2397 
	#XK_bøûÀ_dŸs_35678
 0x10028f4

	)

2398 
	#XK_bøûÀ_dŸs_135678
 0x10028f5

	)

2399 
	#XK_bøûÀ_dŸs_235678
 0x10028f6

	)

2400 
	#XK_bøûÀ_dŸs_1235678
 0x10028f7

	)

2401 
	#XK_bøûÀ_dŸs_45678
 0x10028f8

	)

2402 
	#XK_bøûÀ_dŸs_145678
 0x10028f9

	)

2403 
	#XK_bøûÀ_dŸs_245678
 0x10028Á

	)

2404 
	#XK_bøûÀ_dŸs_1245678
 0x10028fb

	)

2405 
	#XK_bøûÀ_dŸs_345678
 0x10028f¯

	)

2406 
	#XK_bøûÀ_dŸs_1345678
 0x10028fd

	)

2407 
	#XK_bøûÀ_dŸs_2345678
 0x10028„

	)

2408 
	#XK_bøûÀ_dŸs_12345678
 0x10028f‡

	)

2416 #ifde‡
XK_SINHALA


2417 
	#XK_Söh_ng
 0x1000d82

	)

2418 
	#XK_Söh_h2
 0x1000d83

	)

2419 
	#XK_Söh_a
 0x1000d85

	)

2420 
	#XK_Söh_Ø
 0x1000d86

	)

2421 
	#XK_Söh_´
 0x1000d87

	)

2422 
	#XK_Söh_´e
 0x1000d88

	)

2423 
	#XK_Söh_i
 0x1000d89

	)

2424 
	#XK_Söh_ii
 0x1000d8®

	)

2425 
	#XK_Söh_u
 0x1000d8b

	)

2426 
	#XK_Söh_uu
 0x1000d8¯

	)

2427 
	#XK_Söh_ri
 0x1000d8d

	)

2428 
	#XK_Söh_rii
 0x1000d8ê

	)

2429 
	#XK_Söh_lu
 0x1000d8‡

	)

2430 
	#XK_Söh_luu
 0x1000d90

	)

2431 
	#XK_Söh_e
 0x1000d91

	)

2432 
	#XK_Söh_ì
 0x1000d92

	)

2433 
	#XK_Söh_ai
 0x1000d93

	)

2434 
	#XK_Söh_o
 0x1000d94

	)

2435 
	#XK_Söh_oo
 0x1000d95

	)

2436 
	#XK_Söh_au
 0x1000d96

	)

2437 
	#XK_Söh_ka
 0x1000d9®

	)

2438 
	#XK_Söh_kha
 0x1000d9b

	)

2439 
	#XK_Söh_ga
 0x1000d9¯

	)

2440 
	#XK_Söh_gha
 0x1000d9d

	)

2441 
	#XK_Söh_ng2
 0x1000d9ê

	)

2442 
	#XK_Söh_nga
 0x1000d9‡

	)

2443 
	#XK_Söh_ˇ
 0x1000da0

	)

2444 
	#XK_Söh_cha
 0x1000da1

	)

2445 
	#XK_Söh_ja
 0x1000da2

	)

2446 
	#XK_Söh_jha
 0x1000da3

	)

2447 
	#XK_Söh_nya
 0x1000da4

	)

2448 
	#XK_Söh_jnya
 0x1000da5

	)

2449 
	#XK_Söh_nja
 0x1000da6

	)

2450 
	#XK_Söh_âa
 0x1000da7

	)

2451 
	#XK_Söh_âha
 0x1000da8

	)

2452 
	#XK_Söh_dda
 0x1000da9

	)

2453 
	#XK_Söh_ddha
 0x1000dØ

	)

2454 
	#XK_Söh_¬a
 0x1000dab

	)

2455 
	#XK_Söh_ndda
 0x1000da¯

	)

2456 
	#XK_Söh_tha
 0x1000dad

	)

2457 
	#XK_Söh_thha
 0x1000d´

	)

2458 
	#XK_Söh_dha
 0x1000da‡

	)

2459 
	#XK_Söh_dhha
 0x1000db0

	)

2460 
	#XK_Söh_«
 0x1000db1

	)

2461 
	#XK_Söh_ndha
 0x1000db3

	)

2462 
	#XK_Söh_∑
 0x1000db4

	)

2463 
	#XK_Söh_pha
 0x1000db5

	)

2464 
	#XK_Söh_ba
 0x1000db6

	)

2465 
	#XK_Söh_bha
 0x1000db7

	)

2466 
	#XK_Söh_ma
 0x1000db8

	)

2467 
	#XK_Söh_mba
 0x1000db9

	)

2468 
	#XK_Söh_ya
 0x1000db®

	)

2469 
	#XK_Söh_ø
 0x1000dbb

	)

2470 
	#XK_Söh_œ
 0x1000dbd

	)

2471 
	#XK_Söh_va
 0x1000dc0

	)

2472 
	#XK_Söh_sha
 0x1000dc1

	)

2473 
	#XK_Söh_ssha
 0x1000dc2

	)

2474 
	#XK_Söh_ß
 0x1000dc3

	)

2475 
	#XK_Söh_ha
 0x1000dc4

	)

2476 
	#XK_Söh_Œa
 0x1000dc5

	)

2477 
	#XK_Söh_Á
 0x1000dc6

	)

2478 
	#XK_Söh_Æ
 0x1000dˇ

	)

2479 
	#XK_Söh_Ø2
 0x1000dc‡

	)

2480 
	#XK_Söh_´2
 0x1000dd0

	)

2481 
	#XK_Söh_´e2
 0x1000dd1

	)

2482 
	#XK_Söh_i2
 0x1000dd2

	)

2483 
	#XK_Söh_ii2
 0x1000dd3

	)

2484 
	#XK_Söh_u2
 0x1000dd4

	)

2485 
	#XK_Söh_uu2
 0x1000dd6

	)

2486 
	#XK_Söh_ru2
 0x1000dd8

	)

2487 
	#XK_Söh_e2
 0x1000dd9

	)

2488 
	#XK_Söh_ì2
 0x1000dd®

	)

2489 
	#XK_Söh_ai2
 0x1000ddb

	)

2490 
	#XK_Söh_o2
 0x1000dd¯

	)

2491 
	#XK_Söh_oo2
 0x1000ddd

	)

2492 
	#XK_Söh_au2
 0x1000ddê

	)

2493 
	#XK_Söh_lu2
 0x1000dd‡

	)

2494 
	#XK_Söh_ruu2
 0x1000df2

	)

2495 
	#XK_Söh_luu2
 0x1000df3

	)

2496 
	#XK_Söh_kunddÆiya
 0x1000df4

	)

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #i‚de‡
_BITS_ERRNO_H


20 
	#_BITS_ERRNO_H
 1

	)

22 #i‡!
deföed
 
_ERRNO_H


26 
	~<löux/î∫o.h
>

29 #i‚de‡
ENOTSUP


30 
	#ENOTSUP
 
EOPNOTSUPP


	)

33 #i‚de‡
ECANCELED


34 
	#ECANCELED
 125

	)

37 #i‚de‡
EOWNERDEAD


38 
	#EOWNERDEAD
 130

	)

41 #i‚de‡
ENOTRECOVERABLE


42 
	#ENOTRECOVERABLE
 131

	)

45 #i‚de‡
ERFKILL


46 
	#ERFKILL
 132

	)

49 #i‚de‡
EHWPOISON


50 
	#EHWPOISON
 133

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/floatn.h

19 #i‚de‡
_BITS_FLOATN_H


20 
	#_BITS_FLOATN_H


	)

22 
	~<„©uªs.h
>

29 #i‡(
deföed
 
__x86_64__
 \

30 ? 
__GNUC_PREREQ
 (4, 3) \

31 : (
deföed
 
__GNU__
 ? 
	$__GNUC_PREREQ
 (4, 5Ë: 
	$__GNUC_PREREQ
 (4, 4)))

32 
	#__HAVE_FLOAT128
 1

	)

34 
	#__HAVE_FLOAT128
 0

	)

39 #i‡
__HAVE_FLOAT128


40 
	#__HAVE_DISTINCT_FLOAT128
 1

	)

42 
	#__HAVE_DISTINCT_FLOAT128
 0

	)

48 
	#__HAVE_FLOAT64X
 1

	)

54 
	#__HAVE_FLOAT64X_LONG_DOUBLE
 1

	)

56 #i‚de‡
__ASSEMBLER__


60 #i‡
__HAVE_FLOAT128


61 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


63 
	#__f128
(
x
Ëx##
q


	)

65 
	#__f128
(
x
Ëx##
f128


	)

70 #i‡
__HAVE_FLOAT128


71 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


74 
_Com∂ex
 
	t__cÊﬂt128
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__TC__
)));

75 
	#__CFLOAT128
 
__cÊﬂt128


	)

77 
	#__CFLOAT128
 
_Com∂ex
 
_Flﬂt128


	)

82 #i‡
__HAVE_FLOAT128


85 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


86 
__Êﬂt128
 
	t_Flﬂt128
;

90 #i‡!
	`__GNUC_PREREQ
 (7, 0)

91 
	#__buûtö_huge_vÆf128
(Ë((
_Flﬂt128
Ë
	`__buûtö_huge_vÆ
 ())

	)

99 #i‡!
	`__GNUC_PREREQ
 (7, 0)

100 
	#__buûtö_c›ysignf128
 
__buûtö_c›ysignq


	)

101 
	#__buûtö_Ábsf128
 
__buûtö_Ábsq


	)

102 
	#__buûtö_öff128
(Ë((
_Flﬂt128
Ë
	`__buûtö_öf
 ())

	)

103 
	#__buûtö_«nf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«n
 (x))

	)

104 
	#__buûtö_«nsf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«ns
 (x))

	)

111 #i‡!
	`__GNUC_PREREQ
 (6, 0)

112 
	#__buûtö_signbôf128
 
__signbôf128


	)

119 
	~<bôs/Êﬂä-comm⁄.h
>

	@/usr/include/bits/flt-eval-method.h

19 #i‚de‡
_MATH_H


23 #ifde‡
__FLT_EVAL_METHOD__


24 #i‡
__FLT_EVAL_METHOD__
 == -1

25 
	#__GLIBC_FLT_EVAL_METHOD
 2

	)

27 
	#__GLIBC_FLT_EVAL_METHOD
 
__FLT_EVAL_METHOD__


	)

29 #ñi‡
deföed
 
__x86_64__


30 
	#__GLIBC_FLT_EVAL_METHOD
 0

	)

32 
	#__GLIBC_FLT_EVAL_METHOD
 2

	)

	@/usr/include/bits/fp-fast.h

19 #i‚de‡
_MATH_H


23 #ifde‡
__USE_ISOC99


27 #ifde‡
__FP_FAST_FMA


28 
	#FP_FAST_FMA
 1

	)

31 #ifde‡
__FP_FAST_FMAF


32 
	#FP_FAST_FMAF
 1

	)

35 #ifde‡
__FP_FAST_FMAL


36 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/fp-logb.h

19 #i‚de‡
_MATH_H


23 
	#__FP_LOGB0_IS_MIN
 1

	)

24 
	#__FP_LOGBNAN_IS_MIN
 1

	)

	@/usr/include/bits/getopt_posix.h

20 #i‚de‡
_GETOPT_POSIX_H


21 
	#_GETOPT_POSIX_H
 1

	)

23 #i‡!
deföed
 
_UNISTD_H
 && !deföed 
_STDIO_H


27 
	~<bôs/gë›t_c‹e.h
>

29 
	g__BEGIN_DECLS


31 #i‡
deföed
 
__USE_POSIX2
 && !deföed 
__USE_POSIX_IMPLICITLY
 \

32 && !
deföed
 
	g__USE_GNU
 && !deföed 
	g_GETOPT_H


37 #ifde‡
__REDIRECT


38 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

39 c⁄° *
__sh‹t›ts
),

40 
__posix_gë›t
);

42 
	$__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

43 c⁄° *
__sh‹t›ts
)

44 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

45 
	#gë›t
 
__posix_gë›t


	)

49 
__END_DECLS


	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/iscanonical.h

19 #i‚de‡
_MATH_H


23 
	$__isˇn⁄iˇŒ
 (
__x
)

24 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

25 
	#__isˇn⁄iˇlf
(
x
Ë((Ë(
	`__ty≥of
 (x)Ë(x), 1)

	)

26 
	#__isˇn⁄iˇl
(
x
Ë((Ë(
	`__ty≥of
 (x)Ë(x), 1)

	)

27 #i‡
__HAVE_DISTINCT_FLOAT128


28 
	#__isˇn⁄iˇlf128
(
x
Ë((Ë(
	`__ty≥of
 (x)Ë(x), 1)

	)

37 #i‚de‡
__˝lu•lus


38 
	#isˇn⁄iˇl
(
x
Ë
	`__MATH_TG
 ((x), 
__isˇn⁄iˇl
, (x))

	)

47 
ölöe
 
	`isˇn⁄iˇl
 (
__vÆ
Ë{  
	`__isˇn⁄iˇlf
 (__val); }

48 
ölöe
 
	`isˇn⁄iˇl
 (
__vÆ
Ë{  
	`__isˇn⁄iˇl
 (__val); }

49 
ölöe
 
	`isˇn⁄iˇl
 (
__vÆ
Ë{  
	`__isˇn⁄iˇŒ
 (__val); }

50 #i‡
__HAVE_DISTINCT_FLOAT128


51 
ölöe
 
	`isˇn⁄iˇl
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__isˇn⁄iˇlf128
 (__val); }

53 
	}
}

	@/usr/include/bits/libc-header-start.h

27 #i‚de‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


31 #unde‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


33 
	~<„©uªs.h
>

37 #unde‡
__GLIBC_USE_LIB_EXT2


38 #i‡(
deföed
 
__USE_GNU
 \

39 || (
deföed
 
	g__STDC_WANT_LIB_EXT2__
 && __STDC_WANT_LIB_EXT2__ > 0))

40 
	#__GLIBC_USE_LIB_EXT2
 1

	)

42 
	#__GLIBC_USE_LIB_EXT2
 0

	)

47 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT


48 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_BFP_EXT__


49 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 1

	)

51 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 0

	)

56 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT


57 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_FUNCS_EXT__


58 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 1

	)

60 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 0

	)

65 #unde‡
__GLIBC_USE_IEC_60559_TYPES_EXT


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_TYPES_EXT__


67 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 1

	)

69 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 0

	)

	@/usr/include/bits/locale.h

19 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


23 #i‚de‡
_BITS_LOCALE_H


24 
	#_BITS_LOCALE_H
 1

	)

26 
	#__LC_CTYPE
 0

	)

27 
	#__LC_NUMERIC
 1

	)

28 
	#__LC_TIME
 2

	)

29 
	#__LC_COLLATE
 3

	)

30 
	#__LC_MONETARY
 4

	)

31 
	#__LC_MESSAGES
 5

	)

32 
	#__LC_ALL
 6

	)

33 
	#__LC_PAPER
 7

	)

34 
	#__LC_NAME
 8

	)

35 
	#__LC_ADDRESS
 9

	)

36 
	#__LC_TELEPHONE
 10

	)

37 
	#__LC_MEASUREMENT
 11

	)

38 
	#__LC_IDENTIFICATION
 12

	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


23 
	#__REDIRFROM
(...Ë
	`__REDIRFROM_X
(
__VA_ARGS__
)

	)

25 
	#__REDIRTO
(...Ë
	`__REDIRTO_X
(
__VA_ARGS__
)

	)

27 
	#__MATH_REDIRCALL_X
(
‰om
, 
¨gs
, 
to
) \

28 
_MdoubÀ_
 
	`__REDIRECT_NTH
 (
‰om
, 
¨gs
, 
to
)

	)

29 
	#__MATH_REDIRCALL
(
fun˘i⁄
, 
ªíå™t
, 
¨gs
) \

30 
__MATH_REDIRCALL_X
 \

31 (
	`__REDIRFROM
 (
fun˘i⁄
, 
ªíå™t
), 
¨gs
, \

32 
	`__REDIRTO
 (
fun˘i⁄
, 
ªíå™t
))

	)

33 
	#__MATH_REDIRCALL_2
(
‰om
, 
ªíå™t
, 
¨gs
, 
to
) \

34 
__MATH_REDIRCALL_X
 \

35 (
	`__REDIRFROM
 (
‰om
, 
ªíå™t
), 
¨gs
, \

36 
	`__REDIRTO
 (
to
, 
ªíå™t
))

	)

38 
	#__MATH_REDIRCALL_INTERNAL
(
fun˘i⁄
, 
ªíå™t
, 
¨gs
) \

39 
__MATH_REDIRCALL_X
 \

40 (
	`__REDIRFROM
 (
	`__CONCAT
 (
__
, 
fun˘i⁄
), \

41 
	`__CONCAT
 (
ªíå™t
, 
_föôe
)), \

42 
¨gs
, 
	`__REDIRTO
 (
fun˘i⁄
, 
_r
))

	)

46 
__MATH_REDIRCALL
 (
acos
, , (
_MdoubÀ_
));

48 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


50 
__MATH_REDIRCALL
 (
acosh
, , (
_MdoubÀ_
));

54 
__MATH_REDIRCALL
 (
asö
, , (
_MdoubÀ_
));

57 
__MATH_REDIRCALL
 (
©™2
, , (
_MdoubÀ_
, _Mdouble_));

59 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


61 
__MATH_REDIRCALL
 (
©™h
, , (
_MdoubÀ_
));

65 
__MATH_REDIRCALL
 (
cosh
, , (
_MdoubÀ_
));

68 
__MATH_REDIRCALL
 (
exp
, , (
_MdoubÀ_
));

70 #i‡
__GLIBC_USE
 (
IEC_60559_FUNCS_EXT
)

72 
__MATH_REDIRCALL
 (
exp10
, , (
_MdoubÀ_
));

75 #ifde‡
__USE_ISOC99


77 
__MATH_REDIRCALL
 (
exp2
, , (
_MdoubÀ_
));

81 
__MATH_REDIRCALL
 (
fmod
, , (
_MdoubÀ_
, _Mdouble_));

83 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


85 
__MATH_REDIRCALL
 (
hypŸ
, , (
_MdoubÀ_
, _Mdouble_));

88 #i‡(
__MATH_DECLARING_DOUBLE
 && (
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
)) \

89 || (!
	g__MATH_DECLARING_DOUBLE
 && 
deföed
 
	g__USE_MISC
)

91 
__MATH_REDIRCALL
 (
j0
, , (
_MdoubÀ_
));

94 
__MATH_REDIRCALL
 (
y0
, , (
_MdoubÀ_
));

97 
__MATH_REDIRCALL
 (
j1
, , (
_MdoubÀ_
));

100 
__MATH_REDIRCALL
 (
y1
, , (
_MdoubÀ_
));

103 
__MATH_REDIRCALL
 (
jn
, , (, 
_MdoubÀ_
));

106 
__MATH_REDIRCALL
 (
yn
, , (, 
_MdoubÀ_
));

109 #ifde‡
__USE_MISC


111 
__MATH_REDIRCALL
 (
lgamma
, 
_r
, (
_MdoubÀ_
, *));

117 
__MATH_REDIRCALL_INTERNAL
 (
lgamma
, 
_r
, (
_MdoubÀ_
, *));

119 #i‡((
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

120 && 
deföed
 
	g__exã∫_Æways_ölöe
)

122 
__exã∫_Æways_ölöe
 
_MdoubÀ_


123 
__NTH
 (
	$__REDIRFROM
 (
lgamma
, ) (
_MdoubÀ_
 
__d
))

125 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


126  
	`__REDIRTO
 (
lgamma
, 
_r
Ë(
__d
, &
signgam
);

128 
__loˇl_signgam
 = 0;

129  
	`__REDIRTO
 (
lgamma
, 
_r
Ë(
__d
, &
__loˇl_signgam
);

131 
	}
}

134 #i‡((
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)) \

135 && 
deföed
 
	g__exã∫_Æways_ölöe
Ë&& !
__MATH_DECLARING_FLOATN


137 
__exã∫_Æways_ölöe
 
_MdoubÀ_


138 
__NTH
 (
	$__REDIRFROM
 (
gamma
, ) (
_MdoubÀ_
 
__d
))

140  
	`__REDIRTO
 (
lgamma
, 
_r
Ë(
__d
, &
signgam
);

141 
	}
}

145 
__MATH_REDIRCALL
 (
log
, , (
_MdoubÀ_
));

148 
__MATH_REDIRCALL
 (
log10
, , (
_MdoubÀ_
));

150 #ifde‡
__USE_ISOC99


152 
__MATH_REDIRCALL
 (
log2
, , (
_MdoubÀ_
));

156 
__MATH_REDIRCALL
 (
pow
, , (
_MdoubÀ_
, _Mdouble_));

158 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


160 
__MATH_REDIRCALL
 (
ªmaödî
, , (
_MdoubÀ_
, _Mdouble_));

163 #i‡((
__MATH_DECLARING_DOUBLE
 \

164 && (
deföed
 
	g__USE_MISC
 \

165 || (
deföed
 
	g__USE_XOPEN_EXTENDED
 && !deföed 
	g__USE_XOPEN2K8
))) \

166 || (!
deföed
 
	g__MATH_DECLARE_LDOUBLE
 && deföed 
	g__USE_MISC
)) \

167 && !
__MATH_DECLARING_FLOATN


169 
__MATH_REDIRCALL
 (
sˇlb
, , (
_MdoubÀ_
, _Mdouble_));

173 
__MATH_REDIRCALL
 (
söh
, , (
_MdoubÀ_
));

176 
__MATH_REDIRCALL
 (
sqπ
, , (
_MdoubÀ_
));

178 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


180 
_MdoubÀ_


181 
	$__REDIRFROM
 (
__gamma
, 
_r_föôe
Ë(
_MdoubÀ_
, *);

183 
__exã∫_Æways_ölöe
 
_MdoubÀ_


184 
	`__NTH
 (
	$__REDIRFROM
 (
tgamma
, ) (
_MdoubÀ_
 
__d
))

186 
__loˇl_signgam
 = 0;

187 
_MdoubÀ_
 
__ªs
 = 
	`__REDIRTO
 (
gamma
, 
_r
Ë(
__d
, &
__loˇl_signgam
);

188  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

189 
	}
}

192 #unde‡
__REDIRFROM


193 #unde‡
__REDIRTO


194 #unde‡
__MATH_REDIRCALL


195 #unde‡
__MATH_REDIRCALL_2


196 #unde‡
__MATH_REDIRCALL_INTERNAL


197 #unde‡
__MATH_REDIRCALL_X


	@/usr/include/bits/math-vector.h

19 #i‚de‡
_MATH_H


25 
	~<bôs/libm-simd-de˛-°ubs.h
>

27 #i‡
deföed
 
__x86_64__
 && deföed 
__FAST_MATH__


28 #i‡
deföed
 
_OPENMP
 && _OPENMP >= 201307

30 
	#__DECL_SIMD_x86_64
 
	`_Pøgma
 ("om∞de˛¨êsimdÇŸöbønch")

	)

31 #ñi‡
__GNUC_PREREQ
 (6,0)

33 
	#__DECL_SIMD_x86_64
 
	`__©åibuã__
 ((
	`__simd__
 ("nŸöbønch")))

	)

36 #ifde‡
__DECL_SIMD_x86_64


37 #unde‡
__DECL_SIMD_cos


38 
	#__DECL_SIMD_cos
 
__DECL_SIMD_x86_64


	)

39 #unde‡
__DECL_SIMD_cosf


40 
	#__DECL_SIMD_cosf
 
__DECL_SIMD_x86_64


	)

41 #unde‡
__DECL_SIMD_sö


42 
	#__DECL_SIMD_sö
 
__DECL_SIMD_x86_64


	)

43 #unde‡
__DECL_SIMD_söf


44 
	#__DECL_SIMD_söf
 
__DECL_SIMD_x86_64


	)

45 #unde‡
__DECL_SIMD_söcos


46 
	#__DECL_SIMD_söcos
 
__DECL_SIMD_x86_64


	)

47 #unde‡
__DECL_SIMD_söcosf


48 
	#__DECL_SIMD_söcosf
 
__DECL_SIMD_x86_64


	)

49 #unde‡
__DECL_SIMD_log


50 
	#__DECL_SIMD_log
 
__DECL_SIMD_x86_64


	)

51 #unde‡
__DECL_SIMD_logf


52 
	#__DECL_SIMD_logf
 
__DECL_SIMD_x86_64


	)

53 #unde‡
__DECL_SIMD_exp


54 
	#__DECL_SIMD_exp
 
__DECL_SIMD_x86_64


	)

55 #unde‡
__DECL_SIMD_expf


56 
	#__DECL_SIMD_expf
 
__DECL_SIMD_x86_64


	)

57 #unde‡
__DECL_SIMD_pow


58 
	#__DECL_SIMD_pow
 
__DECL_SIMD_x86_64


	)

59 #unde‡
__DECL_SIMD_powf


60 
	#__DECL_SIMD_powf
 
__DECL_SIMD_x86_64


	)

	@/usr/include/bits/mathcalls-helper-functions.h

21 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

22 
__©åibuã__
 ((
__c⁄°__
));

25 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

26 
__©åibuã__
 ((
__c⁄°__
));

30 
__MATHDECL_1
 (, 
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

33 
__MATHDECL_1
 (, 
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

36 
__MATHDECL_1
 (, 
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

39 
__MATHDECL_1
 (, 
__i£qsig
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

42 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

43 
__©åibuã__
 ((
__c⁄°__
));

	@/usr/include/bits/mathcalls-narrow.h

19 #i‚de‡
_MATH_H


24 
__MATHCALL_NARROW
 (
__MATHCALL_NAME
 (
add
), 
__MATHCALL_REDIR_NAME
 (add), 2);

27 
__MATHCALL_NARROW
 (
__MATHCALL_NAME
 (
div
), 
__MATHCALL_REDIR_NAME
 (div), 2);

30 
__MATHCALL_NARROW
 (
__MATHCALL_NAME
 (
mul
), 
__MATHCALL_REDIR_NAME
 (mul), 2);

33 
__MATHCALL_NARROW
 (
__MATHCALL_NAME
 (
sub
), 
__MATHCALL_REDIR_NAME
 (sub), 2);

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


53 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

55 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

62 
__MATHCALL_VEC
 (
cos
,, (
_MdoubÀ_
 
__x
));

64 
__MATHCALL_VEC
 (
sö
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

71 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 #ifde‡
__USE_GNU


79 
__MATHDECL_VEC
 (,
söcos
,,

80 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

83 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


85 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

87 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

89 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

95 
__MATHCALL_VEC
 (
exp
,, (
_MdoubÀ_
 
__x
));

98 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

101 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

104 
__MATHCALL_VEC
 (
log
,, (
_MdoubÀ_
 
__x
));

107 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

110 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

112 #i‡
__GLIBC_USE
 (
IEC_60559_FUNCS_EXT
)

114 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

117 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


119 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

125 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

128 #ifde‡
__USE_ISOC99


130 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

133 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

140 
__MATHCALL_VEC
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

143 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

145 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


147 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

150 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


152 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

159 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

162 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

165 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

168 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

170 #ifde‡
__USE_MISC


171 #i‡((!
deföed
 
__˝lu•lus
 \

172 || 
	g__˝lu•lus
 < 201103L \

173 || 
	g__MATH_DECLARING_DOUBLE
 == 0)) \

174 && !
__MATH_DECLARING_FLOATN


177 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

180 #i‡!
__MATH_DECLARING_FLOATN


182 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

185 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

189 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

194 #ifde‡
__USE_ISOC99


196 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

199 #ifde‡
__USE_ISOC99


201 
__MATHCALL
 (
«n
,, (c⁄° *
__ègb
));

205 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

206 #i‡((!
deföed
 
__˝lu•lus
 \

207 || 
	g__˝lu•lus
 < 201103L \

208 || 
	g__MATH_DECLARING_DOUBLE
 == 0)) \

209 && !
__MATH_DECLARING_FLOATN


211 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

215 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && 
__MATH_DECLARING_DOUBLE
)

217 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

218 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

219 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

220 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

221 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

222 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

226 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


228 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

229 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

230 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

233 #ifde‡
__USE_ISOC99


235 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

238 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

239 #i‡!
__MATH_DECLARING_FLOATN


241 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

245 #ifde‡
__USE_MISC


249 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

253 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


256 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

259 
__MATHCALL
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

260 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT
 && !
__MATH_DECLARING_FLOATN


261 
__MATHCALL
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
));

264 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
Ë|| 
__MATH_DECLARING_FLOATN


266 
__MATHCALL
 (
√xtdown
,, (
_MdoubÀ_
 
__x
));

268 
__MATHCALL
 (
√xtup
,, (
_MdoubÀ_
 
__x
));

272 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

274 #ifde‡
__USE_ISOC99


276 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

280 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

283 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
Ë|| 
__MATH_DECLARING_FLOATN


285 
__MATHDECL
 (, 
Œogb
,, (
_MdoubÀ_
 
__x
));

288 #ifde‡
__USE_ISOC99


290 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

294 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

298 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

302 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

307 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

314 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

315 
__exãnsi⁄__


316 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

320 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

321 
__exãnsi⁄__


322 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

326 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

329 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

332 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

335 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

338 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
Ë|| 
__MATH_DECLARING_FLOATN


340 
__MATHCALLX
 (
roundeví
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

344 
__MATHDECL
 (
__ötmax_t
, 
‰omÂ
,, (
_MdoubÀ_
 
__x
, 
__round
,

345 
__width
));

349 
__MATHDECL
 (
__uötmax_t
, 
u‰omÂ
,, (
_MdoubÀ_
 
__x
, 
__round
,

350 
__width
));

355 
__MATHDECL
 (
__ötmax_t
, 
‰omÂx
,, (
_MdoubÀ_
 
__x
, 
__round
,

356 
__width
));

361 
__MATHDECL
 (
__uötmax_t
, 
u‰omÂx
,, (
_MdoubÀ_
 
__x
, 
__round
,

362 
__width
));

365 
__MATHCALLX
 (
fmaxmag
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

368 
__MATHCALLX
 (
fmömag
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

371 
__MATHDECL_1
 (, 
tŸÆ‹dî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
))

372 
__©åibuã__
 ((
__c⁄°__
));

375 
__MATHDECL_1
 (, 
tŸÆ‹dîmag
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
))

376 
__©åibuã__
 ((
__c⁄°__
));

379 
__MATHDECL_1
 (, 
ˇn⁄iˇlize
,, (
_MdoubÀ_
 *
__cx
, c⁄° _MdoubÀ_ *
__x
));

382 
__MATHCALL
 (
gë∑ylﬂd
,, (c⁄° 
_MdoubÀ_
 *
__x
));

385 
__MATHDECL_1
 (, 
£çaylﬂd
,, (
_MdoubÀ_
 *
__x
, _MdoubÀ_ 
__∑ylﬂd
));

388 
__MATHDECL_1
 (, 
£çaylﬂdsig
,, (
_MdoubÀ_
 *
__x
, _MdoubÀ_ 
__∑ylﬂd
));

391 #i‡(
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

392 && 
	g__MATH_DECLARING_DOUBLE
 \

393 && !
deföed
 
	g__USE_XOPEN2K8
)) \

394 && !
__MATH_DECLARING_FLOATN


396 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

32 #i‡!
deföed
 
__SSE2_MATH__
 && !deföed 
__x86_64__


33 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

34 && 
deföed
 
	g__OPTIMIZE__
)

38 #unde‡
m©h_îrh™dlög


47 #ifde‡
__USE_ISOC99


48 
	#__ölöe_m©h›
(
func
, 
›
) \

49 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

50 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

51 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

52 
	#__ölöe_m©h›NP
(
func
, 
›
) \

53 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

54 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

55 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

57 
	#__ölöe_m©h›
(
func
, 
›
) \

58 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

59 
	#__ölöe_m©h›NP
(
func
, 
›
) \

60 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

63 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

64 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

65 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

66 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

69 #ifde‡
__USE_ISOC99


70 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

71 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

72 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

73 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

74 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

75 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

76 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

77 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

79 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

80 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

81 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

82 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

85 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

86 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

87 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

89 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

90 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

92 
Êﬂt_ty≥
 
__ªsu…
; \

93 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

94  
__ªsu…
; \

95 }

	)

98 #ifde‡
__USE_ISOC99


99 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

100 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

101 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

102 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

103 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

104 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

105 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

106 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

107 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

108 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

109 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

110 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

111 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

112 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

113 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

114 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

115 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

116 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

117 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

118 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

119 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

120 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

121 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

122 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

124 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

125 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

126 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

127 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

128 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

129 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

130 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

131 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

132 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

133 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

134 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

135 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

138 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

139 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

140 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

142 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

143 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

145 
code
; \

146 }

	)

149 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

150 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

151 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

153 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

154 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

156 
code
; \

157 }

	)

159 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

160 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

161 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

163 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

164 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

165 
Êﬂt_ty≥
 
¨g3
)) \

167 
code
; \

168 }

	)

172 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


176 #ifde‡
__FAST_MATH__


180 #i‡
__GNUC_PREREQ
 (3, 5)

181 
	#__expm1_code
 \

182 
__ãmp
; \

183 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

184  
__ãmp
 ? __ãm∞: 
__x


	)

186 
	#__expm1_code
 \

187 
__vÆue
; \

188 
__exp⁄ít
; \

189 
__ãmp
; \

190 
__asm
 
__vﬁ©ûe__
 \

199 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

200 
__asm
 
__vﬁ©ûe__
 \

202 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

203 
__ãmp
 -= 1.0; \

204 
__ãmp
 +
__vÆue
; \

205  
__ãmp
 ? __ãm∞: 
__x


	)

207 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

209 #i‡
	`__GNUC_PREREQ
 (3, 4)

210 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

212 
	#__exp_code
 \

213 
__vÆue
; \

214 
__exp⁄ít
; \

215 
__asm
 
__vﬁ©ûe__
 \

223 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

224 
__vÆue
 += 1.0; \

225 
__asm
 
__vﬁ©ûe__
 \

227 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

228  
__vÆue


	)

229 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

230 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

235 #ifde‡
__FAST_MATH__


236 #i‡!
	`__GNUC_PREREQ
 (3,3)

237 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

238 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

239 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

241 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

245 #i‡
	`__GNUC_PREREQ
 (2, 8)

246 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

247 #ifde‡
__USE_ISOC99


248 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

249 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

251 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

253 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

254 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

257 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

258 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

259 { 
__xld
: 
__x
 
	}
}; \

260 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

261 
	g__n
.
	g__xi
[1] = 0x80000000; \

262 
	g__n
.
	g__xi
[0] = 0; \

263  
	g__n
.
	g__xld
)

266 #ifde‡
__FAST_MATH__


268 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

269 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

270  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

272 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

273 
__ex
 = 
	`__ex∂
 (
__x
); \

274  0.5 * (
__ex
 + 1.0 / __ex))

276 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

277 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

278  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

283 #ifde‡
__USE_ISOC99


285 #ifde‡
__FAST_MATH__


286 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

289 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

290 
__y
 = 
	`__Áb¶
 (
__x
); \

291  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

292 * 
	$__sgn1l
 (
__x
)))

294 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

295  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

297 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

298 
__y
 = 
	`__Áb¶
 (
__x
); \

299  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

302 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

303  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

310 #ifde‡
__FAST_MATH__


311 #unde‡
__expm1_code


312 #unde‡
__exp_code


319 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


320 
	`__ölöe_m©hcode2_
 (, 
__õì754_©™2l
, 
__y
, 
__x
,

321 
__vÆue
;

322 
__asm
 
	`__vﬁ©ûe__
 ("fpatan\n\t"

323 : "Ò" (
__vÆue
)

324 : "0" (
__x
), "u" (
__y
) : "st(1)");

325  
__vÆue
;)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

27 
	~<bôs/w‹dsize.h
>

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 #ifde‡
__USE_XOPEN2K


139 
	#_POSIX_TZNAME_MAX
 6

	)

141 
	#_POSIX_TZNAME_MAX
 3

	)

144 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


146 
	#_POSIX_QLIMIT
 1

	)

150 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

153 
	#_POSIX_UIO_MAXIOV
 16

	)

157 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

161 
	~<bôs/loˇl_lim.h
>

164 #i‚def 
SSIZE_MAX


168 #i‡
__WORDSIZE
 =64 || 
__WORDSIZE32_SIZE_ULONG


169 
	#SSIZE_MAX
 
LONG_MAX


	)

171 
	#SSIZE_MAX
 
INT_MAX


	)

179 #i‚def 
NGROUPS_MAX


180 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

19 #i‚de‡
_BITS_PTHREADTYPES_COMMON_H


20 
	#_BITS_PTHREADTYPES_COMMON_H
 1

	)

23 
	~<bôs/thªad-sh¨ed-ty≥s.h
>

27 
	t±hªad_t
;

34 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

35 
	m__Æign
;

36 } 
	t±hªad_muãx©å_t
;

43 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

44 
	m__Æign
;

45 } 
	t±hªad_c⁄d©å_t
;

49 
	t±hªad_key_t
;

53 
	t__ONCE_ALIGNMENT
 
	t±hªad_⁄˚_t
;

56 
	u±hªad_©å_t


58 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

59 
	m__Æign
;

61 #i‚de‡
__have_±hªad_©å_t


62 
±hªad_©å_t
 
	t±hªad_©å_t
;

63 
	#__have_±hªad_©å_t
 1

	)

69 
__±hªad_muãx_s
 
	m__d©a
;

70 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

71 
	m__Æign
;

72 } 
	t±hªad_muãx_t
;

77 
__±hªad_c⁄d_s
 
	m__d©a
;

78 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

79 
__exãnsi⁄__
 
	m__Æign
;

80 } 
	t±hªad_c⁄d_t
;

83 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 
__±hªad_rwlock_¨ch_t
 
	m__d©a
;

89 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

90 
	m__Æign
;

91 } 
	t±hªad_rwlock_t
;

95 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

96 
	m__Æign
;

97 } 
	t±hªad_rwlock©å_t
;

101 #ifde‡
__USE_XOPEN2K


103 vﬁ©ûê
	t±hªad_•ölock_t
;

110 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

111 
	m__Æign
;

112 } 
	t±hªad_b¨rõr_t
;

116 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

117 
	m__Æign
;

118 } 
	t±hªad_b¨rõøâr_t
;

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_BITS_SIGACTION_H


20 
	#_BITS_SIGACTION_H
 1

	)

22 #i‚de‡
_SIGNAL_H


27 
	ssiga˘i⁄


30 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


34 
__sigh™dÀr_t
 
	mß_h™dÀr
;

36 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

38 
	m__siga˘i⁄_h™dÀr
;

39 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

40 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

42 
__sigh™dÀr_t
 
	mß_h™dÀr
;

46 
__sig£t_t
 
	mß_mask
;

49 
	mß_Êags
;

52 (*
	mß_ª°‹î
) ();

56 
	#SA_NOCLDSTOP
 1

	)

57 
	#SA_NOCLDWAIT
 2

	)

58 
	#SA_SIGINFO
 4

	)

60 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


61 
	#SA_ONSTACK
 0x08000000

	)

63 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


64 
	#SA_RESTART
 0x10000000

	)

65 
	#SA_NODEFER
 0x40000000

	)

67 
	#SA_RESETHAND
 0x80000000

	)

69 #ifde‡
__USE_MISC


70 
	#SA_INTERRUPT
 0x20000000

	)

73 
	#SA_NOMASK
 
SA_NODEFER


	)

74 
	#SA_ONESHOT
 
SA_RESETHAND


	)

75 
	#SA_STACK
 
SA_ONSTACK


	)

79 
	#SIG_BLOCK
 0

	)

80 
	#SIG_UNBLOCK
 1

	)

81 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	~<bôs/ty≥s.h
>

27 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

28 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

29 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

31 
	s_Âx_sw_byãs


33 
__uöt32_t
 
	mmagic1
;

34 
__uöt32_t
 
	mexãnded_size
;

35 
__uöt64_t
 
	mx°©e_bv
;

36 
__uöt32_t
 
	mx°©e_size
;

37 
__uöt32_t
 
	m__glibc_ª£rved1
[7];

40 
	s_Âªg


42 
	msignifiˇnd
[4];

43 
	mexp⁄ít
;

46 
	s_Âxªg


48 
	msignifiˇnd
[4];

49 
	mexp⁄ít
;

50 
	m__glibc_ª£rved1
[3];

53 
	s_xmmªg


55 
__uöt32_t
 
	mñemít
[4];

60 #i‚de‡
__x86_64__


62 
	s_Â°©e


65 
__uöt32_t
 
	mcw
;

66 
__uöt32_t
 
	msw
;

67 
__uöt32_t
 
	mèg
;

68 
__uöt32_t
 
	mùoff
;

69 
__uöt32_t
 
	mcs£l
;

70 
__uöt32_t
 
	md©aoff
;

71 
__uöt32_t
 
	md©a£l
;

72 
_Âªg
 
	m_°
[8];

73 
	m°©us
;

74 
	mmagic
;

77 
__uöt32_t
 
	m_fx§_ív
[6];

78 
__uöt32_t
 
	mmxc§
;

79 
__uöt32_t
 
	m__glibc_ª£rved1
;

80 
_Âxªg
 
	m_fx§_°
[8];

81 
_xmmªg
 
	m_xmm
[8];

82 
__uöt32_t
 
	m__glibc_ª£rved2
[56];

85 #i‚de‡
sigc⁄ãxt_°ru˘


90 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

93 
	#X86_FXSR_MAGIC
 0x0000

	)

95 
	ssigc⁄ãxt


97 
	mgs
, 
	m__gsh
;

98 
	mfs
, 
	m__fsh
;

99 
	mes
, 
	m__esh
;

100 
	mds
, 
	m__dsh
;

101 
	medi
;

102 
	mesi
;

103 
	mebp
;

104 
	me•
;

105 
	mebx
;

106 
	medx
;

107 
	mecx
;

108 
	móx
;

109 
	må≠no
;

110 
	mîr
;

111 
	meù
;

112 
	mcs
, 
	m__csh
;

113 
	meÊags
;

114 
	me•_©_sig«l
;

115 
	mss
, 
	m__ssh
;

116 
_Â°©e
 * 
	mÂ°©e
;

117 
	mﬁdmask
;

118 
	m¸2
;

123 
	s_Â°©e


126 
__uöt16_t
 
	mcwd
;

127 
__uöt16_t
 
	mswd
;

128 
__uöt16_t
 
	m·w
;

129 
__uöt16_t
 
	mf›
;

130 
__uöt64_t
 
	mrù
;

131 
__uöt64_t
 
	mrdp
;

132 
__uöt32_t
 
	mmxc§
;

133 
__uöt32_t
 
	mmx¸_mask
;

134 
_Âxªg
 
	m_°
[8];

135 
_xmmªg
 
	m_xmm
[16];

136 
__uöt32_t
 
	m__glibc_ª£rved1
[24];

139 
	ssigc⁄ãxt


141 
__uöt64_t
 
	mr8
;

142 
__uöt64_t
 
	mr9
;

143 
__uöt64_t
 
	mr10
;

144 
__uöt64_t
 
	mr11
;

145 
__uöt64_t
 
	mr12
;

146 
__uöt64_t
 
	mr13
;

147 
__uöt64_t
 
	mr14
;

148 
__uöt64_t
 
	mr15
;

149 
__uöt64_t
 
	mrdi
;

150 
__uöt64_t
 
	mrsi
;

151 
__uöt64_t
 
	mrbp
;

152 
__uöt64_t
 
	mrbx
;

153 
__uöt64_t
 
	mrdx
;

154 
__uöt64_t
 
	møx
;

155 
__uöt64_t
 
	mrcx
;

156 
__uöt64_t
 
	mr•
;

157 
__uöt64_t
 
	mrù
;

158 
__uöt64_t
 
	meÊags
;

159 
	mcs
;

160 
	mgs
;

161 
	mfs
;

162 
	m__∑d0
;

163 
__uöt64_t
 
	mîr
;

164 
__uöt64_t
 
	må≠no
;

165 
__uöt64_t
 
	mﬁdmask
;

166 
__uöt64_t
 
	m¸2
;

167 
__exãnsi⁄__
 union

169 
_Â°©e
 * 
	mÂ°©e
;

170 
__uöt64_t
 
	m__Â°©e_w‹d
;

172 
__uöt64_t
 
	m__ª£rved1
 [8];

177 
	s_xßve_hdr


179 
__uöt64_t
 
	mx°©e_bv
;

180 
__uöt64_t
 
	m__glibc_ª£rved1
[2];

181 
__uöt64_t
 
	m__glibc_ª£rved2
[5];

184 
	s_ymmh_°©e


186 
__uöt32_t
 
	mymmh_•a˚
[64];

189 
	s_x°©e


191 
_Â°©e
 
	mÂ°©e
;

192 
_xßve_hdr
 
	mx°©e_hdr
;

193 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/sigevent-consts.h

19 #i‚de‡
_BITS_SIGEVENT_CONSTS_H


20 
	#_BITS_SIGEVENT_CONSTS_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_AIO_H


29 
	mSIGEV_SIGNAL
 = 0,

30 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

31 
	mSIGEV_NONE
,

32 
	#SIGEV_NONE
 
SIGEV_NONE


	)

33 
	mSIGEV_THREAD
,

34 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

36 
	mSIGEV_THREAD_ID
 = 4

38 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/siginfo-consts.h

19 #i‚de‡
_BITS_SIGINFO_CONSTS_H


20 
	#_BITS_SIGINFO_CONSTS_H
 1

	)

22 #i‚de‡
_SIGNAL_H


28 
	~<bôs/sigöfo-¨ch.h
>

29 #i‚de‡
__SI_ASYNCIO_AFTER_SIGIO


30 
	#__SI_ASYNCIO_AFTER_SIGIO
 1

	)

37 
	mSI_ASYNCNL
 = -60,

38 
	mSI_TKILL
 = -6,

39 
	mSI_SIGIO
,

40 #i‡
__SI_ASYNCIO_AFTER_SIGIO


41 
	mSI_ASYNCIO
,

42 
	mSI_MESGQ
,

43 
	mSI_TIMER
,

45 
	mSI_MESGQ
,

46 
	mSI_TIMER
,

47 
	mSI_ASYNCIO
,

49 
	mSI_QUEUE
,

50 
	mSI_USER
,

51 
	mSI_KERNEL
 = 0x80

53 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

54 
	#SI_TKILL
 
SI_TKILL


	)

55 
	#SI_SIGIO
 
SI_SIGIO


	)

56 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

57 
	#SI_MESGQ
 
SI_MESGQ


	)

58 
	#SI_TIMER
 
SI_TIMER


	)

59 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

60 
	#SI_QUEUE
 
SI_QUEUE


	)

61 
	#SI_USER
 
SI_USER


	)

62 
	#SI_KERNEL
 
SI_KERNEL


	)

66 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


70 
	mILL_ILLOPC
 = 1,

71 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

72 
	mILL_ILLOPN
,

73 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

74 
	mILL_ILLADR
,

75 
	#ILL_ILLADR
 
ILL_ILLADR


	)

76 
	mILL_ILLTRP
,

77 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

78 
	mILL_PRVOPC
,

79 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

80 
	mILL_PRVREG
,

81 
	#ILL_PRVREG
 
ILL_PRVREG


	)

82 
	mILL_COPROC
,

83 
	#ILL_COPROC
 
ILL_COPROC


	)

84 
	mILL_BADSTK


85 
	#ILL_BADSTK
 
ILL_BADSTK


	)

91 
	mFPE_INTDIV
 = 1,

92 
	#FPE_INTDIV
 
FPE_INTDIV


	)

93 
	mFPE_INTOVF
,

94 
	#FPE_INTOVF
 
FPE_INTOVF


	)

95 
	mFPE_FLTDIV
,

96 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

97 
	mFPE_FLTOVF
,

98 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

99 
	mFPE_FLTUND
,

100 
	#FPE_FLTUND
 
FPE_FLTUND


	)

101 
	mFPE_FLTRES
,

102 
	#FPE_FLTRES
 
FPE_FLTRES


	)

103 
	mFPE_FLTINV
,

104 
	#FPE_FLTINV
 
FPE_FLTINV


	)

105 
	mFPE_FLTSUB


106 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

112 
	mSEGV_MAPERR
 = 1,

113 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

114 
	mSEGV_ACCERR
,

115 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

116 
	mSEGV_BNDERR
,

117 
	#SEGV_BNDERR
 
SEGV_BNDERR


	)

118 
	mSEGV_PKUERR


119 
	#SEGV_PKUERR
 
SEGV_PKUERR


	)

125 
	mBUS_ADRALN
 = 1,

126 
	#BUS_ADRALN
 
BUS_ADRALN


	)

127 
	mBUS_ADRERR
,

128 
	#BUS_ADRERR
 
BUS_ADRERR


	)

129 
	mBUS_OBJERR
,

130 
	#BUS_OBJERR
 
BUS_OBJERR


	)

131 
	mBUS_MCEERR_AR
,

132 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

133 
	mBUS_MCEERR_AO


134 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

138 #ifde‡
__USE_XOPEN_EXTENDED


142 
	mTRAP_BRKPT
 = 1,

143 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

144 
	mTRAP_TRACE


145 
	#TRAP_TRACE
 
TRAP_TRACE


	)

149 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


153 
	mCLD_EXITED
 = 1,

154 
	#CLD_EXITED
 
CLD_EXITED


	)

155 
	mCLD_KILLED
,

156 
	#CLD_KILLED
 
CLD_KILLED


	)

157 
	mCLD_DUMPED
,

158 
	#CLD_DUMPED
 
CLD_DUMPED


	)

159 
	mCLD_TRAPPED
,

160 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

161 
	mCLD_STOPPED
,

162 
	#CLD_STOPPED
 
CLD_STOPPED


	)

163 
	mCLD_CONTINUED


164 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

170 
	mPOLL_IN
 = 1,

171 
	#POLL_IN
 
POLL_IN


	)

172 
	mPOLL_OUT
,

173 
	#POLL_OUT
 
POLL_OUT


	)

174 
	mPOLL_MSG
,

175 
	#POLL_MSG
 
POLL_MSG


	)

176 
	mPOLL_ERR
,

177 
	#POLL_ERR
 
POLL_ERR


	)

178 
	mPOLL_PRI
,

179 
	#POLL_PRI
 
POLL_PRI


	)

180 
	mPOLL_HUP


181 
	#POLL_HUP
 
POLL_HUP


	)

187 #ifde‡
__USE_GNU


188 
	~<bôs/sigöfo-c⁄°s-¨ch.h
>

	@/usr/include/bits/signum.h

19 #i‚de‡
_BITS_SIGNUM_H


20 
	#_BITS_SIGNUM_H
 1

	)

22 #i‚de‡
_SIGNAL_H


26 
	~<bôs/signum-gíîic.h
>

31 
	#SIGSTKFLT
 16

	)

32 
	#SIGPWR
 30

	)

34 #unde‡
SIGBUS


35 
	#SIGBUS
 7

	)

36 #unde‡
SIGUSR1


37 
	#SIGUSR1
 10

	)

38 #unde‡
SIGUSR2


39 
	#SIGUSR2
 12

	)

40 #unde‡
SIGCHLD


41 
	#SIGCHLD
 17

	)

42 #unde‡
SIGCONT


43 
	#SIGCONT
 18

	)

44 #unde‡
SIGSTOP


45 
	#SIGSTOP
 19

	)

46 #unde‡
SIGTSTP


47 
	#SIGTSTP
 20

	)

48 #unde‡
SIGURG


49 
	#SIGURG
 23

	)

50 #unde‡
SIGPOLL


51 
	#SIGPOLL
 29

	)

52 #unde‡
SIGSYS


53 
	#SIGSYS
 31

	)

55 #unde‡
__SIGRTMAX


56 
	#__SIGRTMAX
 64

	)

	@/usr/include/bits/sigstack.h

19 #i‚de‡
_BITS_SIGSTACK_H


20 
	#_BITS_SIGSTACK_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


27 
	#MINSIGSTKSZ
 2048

	)

30 
	#SIGSTKSZ
 8192

	)

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/ty≥s/__sig£t_t.h
>

31 
	$±hªad_sigmask
 (
__how
,

32 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/ss_flags.h

19 #i‚de‡
_BITS_SS_FLAGS_H


20 
	#_BITS_SS_FLAGS_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


29 
	mSS_ONSTACK
 = 1,

30 
	#SS_ONSTACK
 
SS_ONSTACK


	)

31 
	mSS_DISABLE


32 
	#SS_DISABLE
 
SS_DISABLE


	)

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdint-intn.h

19 #i‚de‡
_BITS_STDINT_INTN_H


20 
	#_BITS_STDINT_INTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__öt8_t
 
	töt8_t
;

25 
__öt16_t
 
	töt16_t
;

26 
__öt32_t
 
	töt32_t
;

27 
__öt64_t
 
	töt64_t
;

	@/usr/include/bits/stdint-uintn.h

19 #i‚de‡
_BITS_STDINT_UINTN_H


20 
	#_BITS_STDINT_UINTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__uöt8_t
 
	tuöt8_t
;

25 
__uöt16_t
 
	tuöt16_t
;

26 
__uöt32_t
 
	tuöt32_t
;

27 
__uöt64_t
 
	tuöt64_t
;

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

24 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

25 
	$__LDBL_REDIR_DECL
 (
•rötf
)

26 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

27 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

28 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

29 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

30 && !
deföed
 
__REDIRECT
 \

31 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

32 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

33 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

36 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


42 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

43 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

46 #ifdef 
__USE_ISOC99


47 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

48 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

49 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

50 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

53 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

54 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

55 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

59 #ifde‡
__USE_XOPEN2K8


60 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

61 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

64 #ifde‡
__USE_GNU


65 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

66 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

67 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

68 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

72 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


73 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

74 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

75 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


76 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

77 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

79 #i‡
__USE_FORTIFY_LEVEL
 > 1

80 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

82 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

84 #ifde‡
__USE_XOPEN2K8


85 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_BITS_STDIO_H


20 
	#_BITS_STDIO_H
 1

	)

22 #i‚de‡
_STDIO_H


26 #i‚de‡
__exã∫_ölöe


27 
	#__STDIO_INLINE
 
ölöe


	)

29 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

33 #ifde‡
__USE_EXTERN_INLINES


36 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

38 
__STDIO_INLINE
 

39 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

41  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

42 
	}
}

46 
__STDIO_INLINE
 

47 
	$gëch¨
 ()

49  
	`gëc
 (
°dö
);

50 
	}
}

53 #ifde‡
__USE_MISC


55 
__STDIO_INLINE
 

56 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

58  
	`__gëc_u∆ocked_body
 (
__Â
);

59 
	}
}

63 #ifde‡
__USE_POSIX


65 
__STDIO_INLINE
 

66 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

68  
	`__gëc_u∆ocked_body
 (
__Â
);

69 
	}
}

72 
__STDIO_INLINE
 

73 
	$gëch¨_u∆ocked
 ()

75  
	`__gëc_u∆ocked_body
 (
°dö
);

76 
	}
}

81 
__STDIO_INLINE
 

82 
	$putch¨
 (
__c
)

84  
	`putc
 (
__c
, 
°dout
);

85 
	}
}

88 #ifde‡
__USE_MISC


90 
__STDIO_INLINE
 

91 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

93  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

94 
	}
}

98 #ifde‡
__USE_POSIX


100 
__STDIO_INLINE
 

101 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

103  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

104 
	}
}

107 
__STDIO_INLINE
 

108 
	$putch¨_u∆ocked
 (
__c
)

110  
	`__putc_u∆ocked_body
 (
__c
, 
°dout
);

111 
	}
}

115 #ifdef 
__USE_GNU


117 
__STDIO_INLINE
 
__ssize_t


118 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

120  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

121 
	}
}

125 #ifde‡
__USE_MISC


127 
__STDIO_INLINE
 

128 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

130  
	`__„of_u∆ocked_body
 (
__°ªam
);

131 
	}
}

134 
__STDIO_INLINE
 

135 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

137  
	`__„º‹_u∆ocked_body
 (
__°ªam
);

138 
	}
}

144 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

145 && !
deföed
 
	g__˝lu•lus


147 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

148 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

149 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

150 && (
size_t
Ë(
size
) != 0) \

151 ? ({ *
__±r
 = (*Ë(
±r
); \

152 
FILE
 *
__°ªam
 = (
°ªam
); \

153 
size_t
 
__˙t
; \

154 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

155 
__˙t
 > 0; --__cnt) \

157 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
); \

158 i‡(
__c
 =
EOF
) \

160 *
__±r
++ = 
__c
; \

162 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

163 / (
size_t
Ë(
size
); }) \

164 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

165 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

167 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

168 (Ë(
n
), (
size_t
) 0) \

169 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

171 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

172 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

173 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

174 && (
size_t
Ë(
size
) != 0) \

175 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

176 
FILE
 *
__°ªam
 = (
°ªam
); \

177 
size_t
 
__˙t
; \

178 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

179 
__˙t
 > 0; --__cnt) \

180 i‡(
	`putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

182 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

183 / (
size_t
Ë(
size
); }) \

184 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

185 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

187 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

188 (Ë(
n
), (
size_t
) 0) \

189 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

193 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_BITS_STDIO2_H


20 
	#_BITS_STDIO2_H
 1

	)

22 #i‚de‡
_STDIO_H


26 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

28 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

29 c⁄° *
__ª°ri˘
 
__f‹m©
,

30 
__gnuc_va_li°
 
__≠
Ë
__THROW
;

32 #ifde‡
__va_¨g_∑ck


33 
__f‹tify_fun˘i⁄
 

34 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

36  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

37 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

38 
	}
}

39 #ñi‡!
deföed
 
__˝lu•lus


40 
	#•rötf
(
°r
, ...) \

41 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

42 
__VA_ARGS__
)

	)

45 
__f‹tify_fun˘i⁄
 

46 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

47 
__gnuc_va_li°
 
__≠
))

49  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

50 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

51 
	}
}

53 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


55 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 ...Ë
__THROW
;

58 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

59 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

60 
__gnuc_va_li°
 
__≠
Ë
__THROW
;

62 #ifde‡
__va_¨g_∑ck


63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

65 c⁄° *
__ª°ri˘
 
__fmt
, ...))

67  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

68 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

69 
	}
}

70 #ñi‡!
deföed
 
__˝lu•lus


71 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

72 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

73 
__VA_ARGS__
)

	)

76 
__f‹tify_fun˘i⁄
 

77 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

78 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

80  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

81 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

82 
	}
}

86 #i‡
__USE_FORTIFY_LEVEL
 > 1

88 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

90 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

91 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

92 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__≠
);

93 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

94 
__gnuc_va_li°
 
__≠
);

96 #ifde‡
__va_¨g_∑ck


97 
__f‹tify_fun˘i⁄
 

98 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

100  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

101 
	`__va_¨g_∑ck
 ());

102 
	}
}

104 
__f‹tify_fun˘i⁄
 

105 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

107  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

108 
	}
}

109 #ñi‡!
deföed
 
__˝lu•lus


110 
	#¥ötf
(...) \

111 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

112 
	#Ârötf
(
°ªam
, ...) \

113 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

116 
__f‹tify_fun˘i⁄
 

117 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

119 #ifde‡
__USE_EXTERN_INLINES


120  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

124 
	}
}

126 
__f‹tify_fun˘i⁄
 

127 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

128 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

130  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

131 
	}
}

133 #ifde‡
__USE_XOPEN2K8


134 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

135 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

136 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

137 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

138 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

140 #ifde‡
__va_¨g_∑ck


141 
__f‹tify_fun˘i⁄
 

142 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

144  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

145 
	`__va_¨g_∑ck
 ());

146 
	}
}

147 #ñi‡!
deföed
 
__˝lu•lus


148 
	#d¥ötf
(
fd
, ...) \

149 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

152 
__f‹tify_fun˘i⁄
 

153 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

155  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

156 
	}
}

159 #ifde‡
__USE_GNU


161 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, ...)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

164 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

165 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

166 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

167 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

168 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

170 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

171 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

172 
__Êag
,

173 c⁄° *
__ª°ri˘
 
__f‹m©
,

174 
__gnuc_va_li°
 
__¨gs
)

175 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

177 #ifde‡
__va_¨g_∑ck


178 
__f‹tify_fun˘i⁄
 

179 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

181  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

185 
__f‹tify_fun˘i⁄
 

186 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

189  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

190 
	`__va_¨g_∑ck
 ());

191 
	}
}

193 
__f‹tify_fun˘i⁄
 

194 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

195 c⁄° *
__ª°ri˘
 
__fmt
, ...))

197  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

198 
	`__va_¨g_∑ck
 ());

199 
	}
}

200 #ñi‡!
deföed
 
__˝lu•lus


201 
	#a•rötf
(
±r
, ...) \

202 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

203 
	#__a•rötf
(
±r
, ...) \

204 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

205 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

206 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

209 
__f‹tify_fun˘i⁄
 

210 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

211 
__gnuc_va_li°
 
__≠
))

213  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

214 
	}
}

216 
__f‹tify_fun˘i⁄
 

217 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

218 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

220  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

221 
__≠
);

222 
	}
}

228 #i‡
__GLIBC_USE
 (
DEPRECATED_GETS
)

229 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

230 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

231 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

234 
__f‹tify_fun˘i⁄
 
__wur
 *

235 
	$gës
 (*
__°r
)

237 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

238  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

239  
	`__gës_w¨n
 (
__°r
);

240 
	}
}

243 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

244 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

245 *
	`__REDIRECT
 (
__fgës_Æüs
,

246 (*
__ª°ri˘
 
__s
, 
__n
,

247 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

248 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

249 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

250 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

251 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

254 
__f‹tify_fun˘i⁄
 
__wur
 *

255 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

257 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

259 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

260  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

262 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

263  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

265  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

266 
	}
}

268 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

269 
size_t
 
__size
, size_à
__n
,

270 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

271 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

272 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

273 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

274 
‰ód
Ë
__wur
;

275 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

276 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

277 
size_t
 
__size
, size_à
__n
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
),

279 
__‰ód_chk
)

280 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

283 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


284 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
)

287 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

289 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

290 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

291 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

292  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

294 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

295  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

297  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

298 
	}
}

300 #ifde‡
__USE_GNU


301 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

302 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

304 (*
__ª°ri˘
 
__s
, 
__n
,

305 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

306 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

307 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

308 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

309 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

312 
__f‹tify_fun˘i⁄
 
__wur
 *

313 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

315 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

317 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

318  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

320 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

321  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

323  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

324 
	}
}

327 #ifde‡
__USE_MISC


328 #unde‡
‰ód_u∆ocked


329 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

330 
size_t
 
__size
, size_à
__n
,

331 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

332 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

333 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

334 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

335 
‰ód_u∆ocked
Ë
__wur
;

336 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

337 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

338 
size_t
 
__size
, size_à
__n
,

339 
FILE
 *
__ª°ri˘
 
__°ªam
),

340 
__‰ód_u∆ocked_chk
)

341 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

344 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


345 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

346 
FILE
 *
__ª°ri˘
 
__°ªam
)

348 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

350 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

351 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

352 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

353  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

354 
__°ªam
);

356 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

357  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

358 
__°ªam
);

361 #ifde‡
__USE_EXTERN_INLINES


362 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

363 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

364 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

365 && 
__size
 * 
__n
 <= 8)

367 
size_t
 
__˙t
 = 
__size
 * 
__n
;

368 *
__˝å
 = (*Ë
__±r
;

369 i‡(
__˙t
 == 0)

372 ; 
__˙t
 > 0; --__cnt)

374 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
);

375 i‡(
__c
 =
EOF
)

377 *
__˝å
++ = 
__c
;

379  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

382  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

383 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‚de‡
_BITS_STDIO_LIM_H


19 
	#_BITS_STDIO_LIM_H
 1

	)

21 #i‚de‡
_STDIO_H


25 
	#L_tm≤am
 20

	)

26 
	#TMP_MAX
 238328

	)

27 
	#FILENAME_MAX
 4096

	)

29 #ifde‡
__USE_POSIX


30 
	#L_˘îmid
 9

	)

31 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


32 
	#L_cu£rid
 9

	)

36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__exã∫_ölöe
 

25 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

27  
	`°πod
 (
__≈å
, (**Ë
NULL
);

28 
	}
}

	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 #ifde‡
__USE_GNU


28 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

31 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

32 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
°r‰omd
)

35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string_fortified.h

18 #i‚de‡
_BITS_STRING_FORTIFIED_H


19 
	#_BITS_STRING_FORTIFIED_H
 1

	)

21 #i‚de‡
_STRING_H


25 #i‡!
__GNUC_PREREQ
 (5,0)

26 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

30 
__f‹tify_fun˘i⁄
 *

31 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

32 
size_t
 
__Àn
))

34  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

35 
	}
}

37 
__f‹tify_fun˘i⁄
 *

38 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

40  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

41 
	}
}

43 #ifde‡
__USE_GNU


44 
__f‹tify_fun˘i⁄
 *

45 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

46 
size_t
 
__Àn
))

48  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

49 
	}
}

58 
__f‹tify_fun˘i⁄
 *

59 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

63 #i‡!
	`__GNUC_PREREQ
 (5,0)

64 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

65 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

67 
	`__w¨n_mem£t_zîo_Àn
 ();

68  
__de°
;

71  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

72 
	}
}

74 #ifde‡
__USE_MISC


75 
	~<bôs/°rögs_f‹tifõd.h
>

77 
	$__ex∂icô_bzîo_chk
 (*
__de°
, 
size_t
 
__Àn
, size_à
__de°Àn
)

78 
__THROW
 
	`__n⁄nuŒ
 ((1));

80 
__f‹tify_fun˘i⁄
 

81 
	`__NTH
 (
	$ex∂icô_bzîo
 (*
__de°
, 
size_t
 
__Àn
))

83 
	`__ex∂icô_bzîo_chk
 (
__de°
, 
__Àn
, 
	`__bos0
 (__dest));

84 
	}
}

87 
__f‹tify_fun˘i⁄
 *

88 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

90  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

91 
	}
}

93 #ifde‡
__USE_GNU


94 
__f‹tify_fun˘i⁄
 *

95 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

97  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

98 
	}
}

102 
__f‹tify_fun˘i⁄
 *

103 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

104 
size_t
 
__Àn
))

106  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

107 
	}
}

110 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

111 
size_t
 
__de°Àn
Ë
__THROW
;

112 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

113 
size_t
 
__n
), 
°≤˝y
);

115 
__f‹tify_fun˘i⁄
 *

116 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

118 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

119 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

120  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

121  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

122 
	}
}

125 
__f‹tify_fun˘i⁄
 *

126 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

128  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

129 
	}
}

132 
__f‹tify_fun˘i⁄
 *

133 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

134 
size_t
 
__Àn
))

136  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

137 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/termios.h

19 #i‚de‡
_TERMIOS_H


23 
	tcc_t
;

24 
	t•ìd_t
;

25 
	ttcÊag_t
;

27 
	#NCCS
 32

	)

28 
	sãrmios


30 
tcÊag_t
 
	mc_iÊag
;

31 
tcÊag_t
 
	mc_oÊag
;

32 
tcÊag_t
 
	mc_cÊag
;

33 
tcÊag_t
 
	mc_lÊag
;

34 
cc_t
 
	mc_löe
;

35 
cc_t
 
	mc_cc
[
NCCS
];

36 
•ìd_t
 
	mc_i•ìd
;

37 
•ìd_t
 
	mc_o•ìd
;

38 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

39 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

43 
	#VINTR
 0

	)

44 
	#VQUIT
 1

	)

45 
	#VERASE
 2

	)

46 
	#VKILL
 3

	)

47 
	#VEOF
 4

	)

48 
	#VTIME
 5

	)

49 
	#VMIN
 6

	)

50 
	#VSWTC
 7

	)

51 
	#VSTART
 8

	)

52 
	#VSTOP
 9

	)

53 
	#VSUSP
 10

	)

54 
	#VEOL
 11

	)

55 
	#VREPRINT
 12

	)

56 
	#VDISCARD
 13

	)

57 
	#VWERASE
 14

	)

58 
	#VLNEXT
 15

	)

59 
	#VEOL2
 16

	)

62 
	#IGNBRK
 0000001

	)

63 
	#BRKINT
 0000002

	)

64 
	#IGNPAR
 0000004

	)

65 
	#PARMRK
 0000010

	)

66 
	#INPCK
 0000020

	)

67 
	#ISTRIP
 0000040

	)

68 
	#INLCR
 0000100

	)

69 
	#IGNCR
 0000200

	)

70 
	#ICRNL
 0000400

	)

71 
	#IUCLC
 0001000

	)

72 
	#IXON
 0002000

	)

73 
	#IXANY
 0004000

	)

74 
	#IXOFF
 0010000

	)

75 
	#IMAXBEL
 0020000

	)

76 
	#IUTF8
 0040000

	)

79 
	#OPOST
 0000001

	)

80 
	#OLCUC
 0000002

	)

81 
	#ONLCR
 0000004

	)

82 
	#OCRNL
 0000010

	)

83 
	#ONOCR
 0000020

	)

84 
	#ONLRET
 0000040

	)

85 
	#OFILL
 0000100

	)

86 
	#OFDEL
 0000200

	)

87 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


88 
	#NLDLY
 0000400

	)

89 
	#NL0
 0000000

	)

90 
	#NL1
 0000400

	)

91 
	#CRDLY
 0003000

	)

92 
	#CR0
 0000000

	)

93 
	#CR1
 0001000

	)

94 
	#CR2
 0002000

	)

95 
	#CR3
 0003000

	)

96 
	#TABDLY
 0014000

	)

97 
	#TAB0
 0000000

	)

98 
	#TAB1
 0004000

	)

99 
	#TAB2
 0010000

	)

100 
	#TAB3
 0014000

	)

101 
	#BSDLY
 0020000

	)

102 
	#BS0
 0000000

	)

103 
	#BS1
 0020000

	)

104 
	#FFDLY
 0100000

	)

105 
	#FF0
 0000000

	)

106 
	#FF1
 0100000

	)

109 
	#VTDLY
 0040000

	)

110 
	#VT0
 0000000

	)

111 
	#VT1
 0040000

	)

113 #ifde‡
__USE_MISC


114 
	#XTABS
 0014000

	)

118 #ifde‡
__USE_MISC


119 
	#CBAUD
 0010017

	)

121 
	#B0
 0000000

	)

122 
	#B50
 0000001

	)

123 
	#B75
 0000002

	)

124 
	#B110
 0000003

	)

125 
	#B134
 0000004

	)

126 
	#B150
 0000005

	)

127 
	#B200
 0000006

	)

128 
	#B300
 0000007

	)

129 
	#B600
 0000010

	)

130 
	#B1200
 0000011

	)

131 
	#B1800
 0000012

	)

132 
	#B2400
 0000013

	)

133 
	#B4800
 0000014

	)

134 
	#B9600
 0000015

	)

135 
	#B19200
 0000016

	)

136 
	#B38400
 0000017

	)

137 #ifde‡
__USE_MISC


138 
	#EXTA
 
B19200


	)

139 
	#EXTB
 
B38400


	)

141 
	#CSIZE
 0000060

	)

142 
	#CS5
 0000000

	)

143 
	#CS6
 0000020

	)

144 
	#CS7
 0000040

	)

145 
	#CS8
 0000060

	)

146 
	#CSTOPB
 0000100

	)

147 
	#CREAD
 0000200

	)

148 
	#PARENB
 0000400

	)

149 
	#PARODD
 0001000

	)

150 
	#HUPCL
 0002000

	)

151 
	#CLOCAL
 0004000

	)

152 #ifde‡
__USE_MISC


153 
	#CBAUDEX
 0010000

	)

155 
	#B57600
 0010001

	)

156 
	#B115200
 0010002

	)

157 
	#B230400
 0010003

	)

158 
	#B460800
 0010004

	)

159 
	#B500000
 0010005

	)

160 
	#B576000
 0010006

	)

161 
	#B921600
 0010007

	)

162 
	#B1000000
 0010010

	)

163 
	#B1152000
 0010011

	)

164 
	#B1500000
 0010012

	)

165 
	#B2000000
 0010013

	)

166 
	#B2500000
 0010014

	)

167 
	#B3000000
 0010015

	)

168 
	#B3500000
 0010016

	)

169 
	#B4000000
 0010017

	)

170 
	#__MAX_BAUD
 
B4000000


	)

171 #ifde‡
__USE_MISC


172 
	#CIBAUD
 002003600000

	)

173 
	#CMSPAR
 010000000000

	)

174 
	#CRTSCTS
 020000000000

	)

178 
	#ISIG
 0000001

	)

179 
	#ICANON
 0000002

	)

180 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

181 
	#XCASE
 0000004

	)

183 
	#ECHO
 0000010

	)

184 
	#ECHOE
 0000020

	)

185 
	#ECHOK
 0000040

	)

186 
	#ECHONL
 0000100

	)

187 
	#NOFLSH
 0000200

	)

188 
	#TOSTOP
 0000400

	)

189 #ifde‡
__USE_MISC


190 
	#ECHOCTL
 0001000

	)

191 
	#ECHOPRT
 0002000

	)

192 
	#ECHOKE
 0004000

	)

193 
	#FLUSHO
 0010000

	)

194 
	#PENDIN
 0040000

	)

196 
	#IEXTEN
 0100000

	)

197 #ifde‡
__USE_MISC


198 
	#EXTPROC
 0200000

	)

202 
	#TCOOFF
 0

	)

203 
	#TCOON
 1

	)

204 
	#TCIOFF
 2

	)

205 
	#TCION
 3

	)

208 
	#TCIFLUSH
 0

	)

209 
	#TCOFLUSH
 1

	)

210 
	#TCIOFLUSH
 2

	)

213 
	#TCSANOW
 0

	)

214 
	#TCSADRAIN
 1

	)

215 
	#TCSAFLUSH
 2

	)

218 
	#_IOT_ãrmios
 \

219 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

23 #i‚de‡
_BITS_TIME_H


24 
	#_BITS_TIME_H
 1

	)

26 
	~<bôs/ty≥s.h
>

34 
	#CLOCKS_PER_SEC
 ((
__˛ock_t
Ë1000000)

	)

36 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

37 && !
deföed
 
__USE_XOPEN2K


40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

60 
	#CLOCK_BOOTTIME
 7

	)

62 
	#CLOCK_REALTIME_ALARM
 8

	)

64 
	#CLOCK_BOOTTIME_ALARM
 9

	)

66 
	#CLOCK_TAI
 11

	)

69 
	#TIMER_ABSTIME
 1

	)

72 #ifde‡
__USE_GNU


73 
	~<bôs/timex.h
>

75 
__BEGIN_DECLS


78 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

80 
__END_DECLS


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 
__öt8_t
 
	t__öt_Àa°8_t
;

52 
__uöt8_t
 
	t__uöt_Àa°8_t
;

53 
__öt16_t
 
	t__öt_Àa°16_t
;

54 
__uöt16_t
 
	t__uöt_Àa°16_t
;

55 
__öt32_t
 
	t__öt_Àa°32_t
;

56 
__uöt32_t
 
	t__uöt_Àa°32_t
;

57 
__öt64_t
 
	t__öt_Àa°64_t
;

58 
__uöt64_t
 
	t__uöt_Àa°64_t
;

61 #i‡
__WORDSIZE
 == 64

62 
	t__quad_t
;

63 
	t__u_quad_t
;

65 
__exãnsi⁄__
 
	t__quad_t
;

66 
__exãnsi⁄__
 
	t__u_quad_t
;

70 #i‡
__WORDSIZE
 == 64

71 
	t__ötmax_t
;

72 
	t__uötmax_t
;

74 
__exãnsi⁄__
 
	t__ötmax_t
;

75 
__exãnsi⁄__
 
	t__uötmax_t
;

108 
	#__S16_TYPE
 

	)

109 
	#__U16_TYPE
 

	)

110 
	#__S32_TYPE
 

	)

111 
	#__U32_TYPE
 

	)

112 
	#__SLONGWORD_TYPE
 

	)

113 
	#__ULONGWORD_TYPE
 

	)

114 #i‡
__WORDSIZE
 == 32

115 
	#__SQUAD_TYPE
 
__quad_t


	)

116 
	#__UQUAD_TYPE
 
__u_quad_t


	)

117 
	#__SWORD_TYPE
 

	)

118 
	#__UWORD_TYPE
 

	)

119 
	#__SLONG32_TYPE
 

	)

120 
	#__ULONG32_TYPE
 

	)

121 
	#__S64_TYPE
 
__quad_t


	)

122 
	#__U64_TYPE
 
__u_quad_t


	)

125 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

126 #ñi‡
__WORDSIZE
 == 64

127 
	t__SQUAD_TYPE
 

	)

128 
	t__UQUAD_TYPE
 

	)

129 
	t__SWORD_TYPE
 

	)

130 
	t__UWORD_TYPE
 

	)

131 
	t__SLONG32_TYPE
 

	)

132 
	t__ULONG32_TYPE
 

	)

133 
	t__S64_TYPE
 

	)

134 
	t__U64_TYPE
 

	)

136 
	t__STD_TYPE
 

	)

140 
	~<bôs/ty≥sizes.h
>

143 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

144 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

145 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

146 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

147 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

148 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

149 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

150 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

151 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

152 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

153 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

154 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

155 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

156 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

157 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

158 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

159 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

160 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

162 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

163 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

166 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

169 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

172 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

177 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

178 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

181 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

182 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

185 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

186 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

189 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

191 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

194 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

196 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

200 
__off64_t
 
	t__loff_t
;

201 *
	t__ˇddr_t
;

204 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

207 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

212 
	t__sig_©omic_t
;

214 #unde‡
__STD_TYPE


	@/usr/include/bits/types/FILE.h

1 #i‚de‡
__FILE_deföed


2 
	#__FILE_deföed
 1

	)

4 
	g_IO_FILE
;

7 
_IO_FILE
 
	tFILE
;

	@/usr/include/bits/types/__FILE.h

1 #i‚de‡
____FILE_deföed


2 
	#____FILE_deföed
 1

	)

4 
	g_IO_FILE
;

5 
_IO_FILE
 
	t__FILE
;

	@/usr/include/bits/types/__fpos64_t.h

1 #i‚de‡
_____Âos64_t_deföed


2 
	#_____Âos64_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos64_t


12 
__off64_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos64_t
;

	@/usr/include/bits/types/__fpos_t.h

1 #i‚de‡
_____Âos_t_deföed


2 
	#_____Âos_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos_t


12 
__off_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos_t
;

	@/usr/include/bits/types/clock_t.h

1 #i‚de‡
__˛ock_t_deföed


2 
	#__˛ock_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ock_t
 
	t˛ock_t
;

	@/usr/include/bits/types/clockid_t.h

1 #i‚de‡
__˛ockid_t_deföed


2 
	#__˛ockid_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ockid_t
 
	t˛ockid_t
;

	@/usr/include/bits/types/cookie_io_functions_t.h

18 #i‚de‡
__cookõ_io_fun˘i⁄s_t_deföed


19 
	#__cookõ_io_fun˘i⁄s_t_deföed
 1

	)

21 
	~<bôs/ty≥s.h
>

27 
__ssize_t
 
	tcookõ_ªad_fun˘i⁄_t
 (*
	t__cookõ
, *
	t__buf
,

28 
	tsize_t
 
	t__nbyãs
);

36 
__ssize_t
 
	tcookõ_wrôe_fun˘i⁄_t
 (*
	t__cookõ
, c⁄° *
	t__buf
,

37 
	tsize_t
 
	t__nbyãs
);

45 
	tcookõ_£ek_fun˘i⁄_t
 (*
	t__cookõ
, 
	t__off64_t
 *
	t__pos
, 
	t__w
);

48 
	tcookõ_˛o£_fun˘i⁄_t
 (*
	t__cookõ
);

55 
	s_IO_cookõ_io_fun˘i⁄s_t


57 
cookõ_ªad_fun˘i⁄_t
 *
	mªad
;

58 
cookõ_wrôe_fun˘i⁄_t
 *
	mwrôe
;

59 
cookõ_£ek_fun˘i⁄_t
 *
	m£ek
;

60 
cookõ_˛o£_fun˘i⁄_t
 *
	m˛o£
;

61 } 
	tcookõ_io_fun˘i⁄s_t
;

	@/usr/include/bits/types/error_t.h

19 #i‚de‡
__îr‹_t_deföed


20 
	#__îr‹_t_deföed
 1

	)

22 
	tîr‹_t
;

	@/usr/include/bits/types/locale_t.h

19 #i‚de‡
_BITS_TYPES_LOCALE_T_H


20 
	#_BITS_TYPES_LOCALE_T_H
 1

	)

22 
	~<bôs/ty≥s/__loˇÀ_t.h
>

24 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/types/mbstate_t.h

1 #i‚de‡
__mb°©e_t_deföed


2 
	#__mb°©e_t_deföed
 1

	)

4 
	~<bôs/ty≥s/__mb°©e_t.h
>

6 
__mb°©e_t
 
	tmb°©e_t
;

	@/usr/include/bits/types/sig_atomic_t.h

1 #i‚de‡
__sig_©omic_t_deföed


2 
	#__sig_©omic_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
__sig_©omic_t
 
	tsig_©omic_t
;

	@/usr/include/bits/types/sigevent_t.h

1 #i‚de‡
__sigevít_t_deföed


2 
	#__sigevít_t_deföed
 1

	)

4 
	~<bôs/w‹dsize.h
>

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ty≥s/__sigvÆ_t.h
>

8 
	#__SIGEV_MAX_SIZE
 64

	)

9 #i‡
__WORDSIZE
 == 64

10 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

12 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

16 #i‚de‡
__have_±hªad_©å_t


17 
±hªad_©å_t
 
	t±hªad_©å_t
;

18 
	#__have_±hªad_©å_t
 1

	)

22 
	ssigevít


24 
__sigvÆ_t
 
	msigev_vÆue
;

25 
	msigev_signo
;

26 
	msigev_nŸify
;

30 
	m_∑d
[
__SIGEV_PAD_SIZE
];

34 
__pid_t
 
	m_tid
;

38 (*
	m_fun˘i⁄
Ë(
	m__sigvÆ_t
);

39 
±hªad_©å_t
 *
	m_©åibuã
;

40 } 
	m_sigev_thªad
;

41 } 
	m_sigev_un
;

42 } 
	tsigevít_t
;

45 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

46 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

	@/usr/include/bits/types/siginfo_t.h

1 #i‚de‡
__sigöfo_t_deföed


2 
	#__sigöfo_t_deföed
 1

	)

4 
	~<bôs/w‹dsize.h
>

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ty≥s/__sigvÆ_t.h
>

8 
	#__SI_MAX_SIZE
 128

	)

9 #i‡
__WORDSIZE
 == 64

10 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

12 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

16 
	~<bôs/sigöfo-¨ch.h
>

17 #i‚de‡
__SI_ALIGNMENT


18 
	#__SI_ALIGNMENT


	)

20 #i‚de‡
__SI_BAND_TYPE


21 
	#__SI_BAND_TYPE
 

	)

23 #i‚de‡
__SI_CLOCK_T


24 
	#__SI_CLOCK_T
 
__˛ock_t


	)

26 #i‚de‡
__SI_ERRNO_THEN_CODE


27 
	#__SI_ERRNO_THEN_CODE
 1

	)

29 #i‚de‡
__SI_HAVE_SIGSYS


30 
	#__SI_HAVE_SIGSYS
 1

	)

32 #i‚de‡
__SI_SIGFAULT_ADDL


33 
	#__SI_SIGFAULT_ADDL


	)

38 
	msi_signo
;

39 #i‡
__SI_ERRNO_THEN_CODE


40 
	msi_î∫o
;

42 
	msi_code
;

44 
	msi_code
;

45 
	msi_î∫o
;

47 #i‡
__WORDSIZE
 == 64

48 
	m__∑d0
;

53 
	m_∑d
[
__SI_PAD_SIZE
];

58 
__pid_t
 
	msi_pid
;

59 
__uid_t
 
	msi_uid
;

60 } 
	m_kûl
;

65 
	msi_tid
;

66 
	msi_ovîrun
;

67 
__sigvÆ_t
 
	msi_sigvÆ
;

68 } 
	m_timî
;

73 
__pid_t
 
	msi_pid
;

74 
__uid_t
 
	msi_uid
;

75 
__sigvÆ_t
 
	msi_sigvÆ
;

76 } 
	m_π
;

81 
__pid_t
 
	msi_pid
;

82 
__uid_t
 
	msi_uid
;

83 
	msi_°©us
;

84 
__SI_CLOCK_T
 
	msi_utime
;

85 
__SI_CLOCK_T
 
	msi_°ime
;

86 } 
	m_sigchld
;

91 *
	msi_addr
;

92 
__SI_SIGFAULT_ADDL


93 
	msi_addr_lsb
;

99 *
	m_lowî
;

100 *
	m_uµî
;

101 } 
	m_addr_bnd
;

103 
__uöt32_t
 
	m_pkey
;

104 } 
	m_bounds
;

105 } 
	m_sigÁu…
;

110 
	msi_b™d
;

111 
	msi_fd
;

112 } 
	m_sigpﬁl
;

115 #i‡
__SI_HAVE_SIGSYS


118 *
	m_ˇŒ_addr
;

119 
	m_sysˇŒ
;

120 
	m_¨ch
;

121 } 
	m_sigsys
;

123 } 
	m_sifõlds
;

124 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

128 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

129 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

130 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

131 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

132 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

133 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

134 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

135 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

136 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

137 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

138 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

139 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

140 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_addr_bnd
.
_lowî


	)

141 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_addr_bnd
.
_uµî


	)

142 
	#si_pkey
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_pkey


	)

143 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

144 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

145 #i‡
__SI_HAVE_SIGSYS


146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

	@/usr/include/bits/types/sigset_t.h

1 #i‚de‡
__sig£t_t_deföed


2 
	#__sig£t_t_deföed
 1

	)

4 
	~<bôs/ty≥s/__sig£t_t.h
>

7 
__sig£t_t
 
	tsig£t_t
;

	@/usr/include/bits/types/sigval_t.h

1 #i‚de‡
__sigvÆ_t_deföed


2 
	#__sigvÆ_t_deföed


	)

4 
	~<bôs/ty≥s/__sigvÆ_t.h
>

12 #i‚de‡
__USE_POSIX199309


16 
__sigvÆ_t
 
	tsigvÆ_t
;

	@/usr/include/bits/types/stack_t.h

19 #i‚de‡
__°ack_t_deföed


20 
	#__°ack_t_deföed
 1

	)

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

28 *
	mss_•
;

29 
	mss_Êags
;

30 
size_t
 
	mss_size
;

31 } 
	t°ack_t
;

	@/usr/include/bits/types/struct_FILE.h

18 #i‚de‡
__°ru˘_FILE_deföed


19 
	#__°ru˘_FILE_deföed
 1

	)

25 #i‡
deföed
 
_IO_USE_OLD_IO_FILE
 && !deföed 
_LIBC


29 #i‡
deföed
 
_IO_lock_t_deföed
 && !deföed 
_LIBC


33 
	~<bôs/ty≥s.h
>

35 
	g_IO_FILE
;

36 
	g_IO_m¨kî
;

37 
	g_IO_codecvt
;

38 
	g_IO_wide_d©a
;

42 #i‚de‡
_IO_lock_t_deföed


43 
	t_IO_lock_t
;

49 
	s_IO_FILE


51 
	m_Êags
;

54 *
	m_IO_ªad_±r
;

55 *
	m_IO_ªad_íd
;

56 *
	m_IO_ªad_ba£
;

57 *
	m_IO_wrôe_ba£
;

58 *
	m_IO_wrôe_±r
;

59 *
	m_IO_wrôe_íd
;

60 *
	m_IO_buf_ba£
;

61 *
	m_IO_buf_íd
;

64 *
	m_IO_ßve_ba£
;

65 *
	m_IO_backup_ba£
;

66 *
	m_IO_ßve_íd
;

68 
_IO_m¨kî
 *
	m_m¨kîs
;

70 
_IO_FILE
 *
	m_chaö
;

72 
	m_fûío
;

73 
	m_Êags2
;

74 
__off_t
 
	m_ﬁd_off£t
;

77 
	m_cur_cﬁumn
;

78 sig√d 
	m_vèbÀ_off£t
;

79 
	m_sh‹tbuf
[1];

81 
_IO_lock_t
 *
	m_lock
;

82 #ifde‡
_IO_USE_OLD_IO_FILE


85 
	s_IO_FILE_com∂ëe


87 
_IO_FILE
 
	m_fûe
;

89 
__off64_t
 
	m_off£t
;

91 
_IO_codecvt
 *
	m_codecvt
;

92 
_IO_wide_d©a
 *
	m_wide_d©a
;

93 
_IO_FILE
 *
	m_‰ìªs_li°
;

94 *
	m_‰ìªs_buf
;

95 
size_t
 
	m__∑d5
;

96 
	m_mode
;

98 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

102 
	#__gëc_u∆ocked_body
(
_Â
) \

103 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
) \

104 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

106 
	#__putc_u∆ocked_body
(
_ch
, 
_Â
) \

107 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
) \

108 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

109 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

111 
	#_IO_EOF_SEEN
 0x0010

	)

112 
	#__„of_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

114 
	#_IO_ERR_SEEN
 0x0020

	)

115 
	#__„º‹_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

117 
	#_IO_USER_LOCK
 0x8000

	)

	@/usr/include/bits/types/struct_itimerspec.h

1 #i‚de‡
__ôimî•ec_deföed


2 
	#__ôimî•ec_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

8 
	sôimî•ec


10 
time•ec
 
	mô_öãrvÆ
;

11 
time•ec
 
	mô_vÆue
;

	@/usr/include/bits/types/struct_rusage.h

19 #i‚de‡
__rußge_deföed


20 
	#__rußge_deföed
 1

	)

22 
	~<bôs/ty≥s.h
>

23 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

31 
	srußge


34 
timevÆ
 
	mru_utime
;

36 
timevÆ
 
	mru_°ime
;

38 
__exãnsi⁄__
 union

40 
	mru_maxrss
;

41 
__sysˇŒ_¶⁄g_t
 
	m__ru_maxrss_w‹d
;

46 
__exãnsi⁄__
 union

48 
	mru_ixrss
;

49 
__sysˇŒ_¶⁄g_t
 
	m__ru_ixrss_w‹d
;

52 
__exãnsi⁄__
 union

54 
	mru_idrss
;

55 
__sysˇŒ_¶⁄g_t
 
	m__ru_idrss_w‹d
;

58 
__exãnsi⁄__
 union

60 
	mru_i§ss
;

61 
__sysˇŒ_¶⁄g_t
 
	m__ru_i§ss_w‹d
;

65 
__exãnsi⁄__
 union

67 
	mru_möÊt
;

68 
__sysˇŒ_¶⁄g_t
 
	m__ru_möÊt_w‹d
;

71 
__exãnsi⁄__
 union

73 
	mru_majÊt
;

74 
__sysˇŒ_¶⁄g_t
 
	m__ru_majÊt_w‹d
;

77 
__exãnsi⁄__
 union

79 
	mru_nsw≠
;

80 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsw≠_w‹d
;

84 
__exãnsi⁄__
 union

86 
	mru_öblock
;

87 
__sysˇŒ_¶⁄g_t
 
	m__ru_öblock_w‹d
;

90 
__exãnsi⁄__
 union

92 
	mru_oublock
;

93 
__sysˇŒ_¶⁄g_t
 
	m__ru_oublock_w‹d
;

96 
__exãnsi⁄__
 union

98 
	mru_msg¢d
;

99 
__sysˇŒ_¶⁄g_t
 
	m__ru_msg¢d_w‹d
;

102 
__exãnsi⁄__
 union

104 
	mru_msgrcv
;

105 
__sysˇŒ_¶⁄g_t
 
	m__ru_msgrcv_w‹d
;

108 
__exãnsi⁄__
 union

110 
	mru_nsig«ls
;

111 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsig«ls_w‹d
;

116 
__exãnsi⁄__
 union

118 
	mru_nvcsw
;

119 
__sysˇŒ_¶⁄g_t
 
	m__ru_nvcsw_w‹d
;

123 
__exãnsi⁄__
 union

125 
	mru_nivcsw
;

126 
__sysˇŒ_¶⁄g_t
 
	m__ru_nivcsw_w‹d
;

	@/usr/include/bits/types/struct_sigstack.h

19 #i‚de‡
__sig°ack_deföed


20 
	#__sig°ack_deföed
 1

	)

23 
	ssig°ack


25 *
	mss_•
;

26 
	mss_⁄°ack
;

	@/usr/include/bits/types/struct_timespec.h

2 #i‚de‡
_STRUCT_TIMESPEC


3 
	#_STRUCT_TIMESPEC
 1

	)

5 
	~<bôs/ty≥s.h
>

9 
	stime•ec


11 
__time_t
 
	mtv_£c
;

12 
__sysˇŒ_¶⁄g_t
 
	mtv_n£c
;

	@/usr/include/bits/types/struct_timeval.h

1 #i‚de‡
__timevÆ_deföed


2 
	#__timevÆ_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
	stimevÆ


10 
__time_t
 
	mtv_£c
;

11 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types/struct_tm.h

1 #i‚de‡
__°ru˘_tm_deföed


2 
	#__°ru˘_tm_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
	stm


9 
	mtm_£c
;

10 
	mtm_mö
;

11 
	mtm_hour
;

12 
	mtm_mday
;

13 
	mtm_m⁄
;

14 
	mtm_yór
;

15 
	mtm_wday
;

16 
	mtm_yday
;

17 
	mtm_isd°
;

19 #ifdef 
__USE_MISC


20 
	mtm_gmtoff
;

21 c⁄° *
	mtm_z⁄e
;

23 
	m__tm_gmtoff
;

24 c⁄° *
	m__tm_z⁄e
;

	@/usr/include/bits/types/time_t.h

1 #i‚de‡
__time_t_deföed


2 
	#__time_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__time_t
 
	ttime_t
;

	@/usr/include/bits/types/timer_t.h

1 #i‚de‡
__timî_t_deföed


2 
	#__timî_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__timî_t
 
	ttimî_t
;

	@/usr/include/bits/types/wint_t.h

1 #i‚de‡
__wöt_t_deföed


2 
	#__wöt_t_deföed
 1

	)

9 #i‚de‡
_WINT_T


10 
	#_WINT_T
 1

	)

16 #i‚de‡
__WINT_TYPE__


17 
	#__WINT_TYPE__
 

	)

20 
__WINT_TYPE__
 
	twöt_t
;

	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #ifde‡
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

36 
	#__WNOTHREAD
 0x20000000

	)

38 
	#__WALL
 0x40000000

	)

39 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

25 
__LDBL_REDIR_DECL
 (
w¥ötf
);

26 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
	g__REDIRECT
 \

32 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

37 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

38 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 #ifde‡
__USE_ISOC99


44 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

45 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

46 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

47 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

48 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

49 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

51 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

52 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

53 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

57 #ifde‡
__USE_GNU


58 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

61 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


62 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

63 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

64 #i‡
__USE_FORTIFY_LEVEL
 > 1

65 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

66 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/bits/wctype-wchar.h

23 #i‚de‡
_BITS_WCTYPE_WCHAR_H


24 
	#_BITS_WCTYPE_WCHAR_H
 1

	)

26 #i‡!
deföed
 
_WCTYPE_H
 && !deföed 
_WCHAR_H


30 
	~<bôs/ty≥s.h
>

31 
	~<bôs/ty≥s/wöt_t.h
>

38 
	tw˘y≥_t
;

40 #i‚de‡
_ISwbô


45 
	~<ídün.h
>

46 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


47 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

49 
	#_ISwbô
(
bô
) \

50 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

51 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

52 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

53 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

58 
	m__ISwuµî
 = 0,

59 
	m__ISwlowî
 = 1,

60 
	m__ISwÆpha
 = 2,

61 
	m__ISwdigô
 = 3,

62 
	m__ISwxdigô
 = 4,

63 
	m__ISw•a˚
 = 5,

64 
	m__ISw¥öt
 = 6,

65 
	m__ISwgøph
 = 7,

66 
	m__ISwbœnk
 = 8,

67 
	m__ISw˙ål
 = 9,

68 
	m__ISwpun˘
 = 10,

69 
	m__ISwÆnum
 = 11,

71 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

72 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

73 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

74 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

75 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

76 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

77 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

78 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

79 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

80 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

81 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

82 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

87 
__BEGIN_DECLS


95 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

101 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

104 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

108 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

112 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

130 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

135 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

140 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

145 #ifde‡
__USE_ISOC99


146 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

155 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

159 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

166 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

169 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
__END_DECLS


	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

7 
	#__WORDSIZE32_SIZE_ULONG
 0

	)

8 
	#__WORDSIZE32_PTRDIFF_LONG
 0

	)

11 #ifde‡
__x86_64__


12 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

14 
	#__SYSCALL_WORDSIZE
 64

	)

16 
	#__WORDSIZE_TIME64_COMPAT32
 0

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

62 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

64 
	~<bôs/uio_lim.h
>

65 #ifde‡
__IOV_MAX


66 
	#IOV_MAX
 
__IOV_MAX


	)

68 #unde‡
IOV_MAX


73 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

76 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

79 
	#NL_MSGMAX
 
INT_MAX


	)

83 #i‡
deföed
 
__USE_GNU
 || !deföed 
__USE_XOPEN2K8


84 
	#NL_NMAX
 
INT_MAX


	)

88 
	#NL_SETMAX
 
INT_MAX


	)

91 
	#NL_TEXTMAX
 
INT_MAX


	)

94 
	#NZERO
 20

	)

98 #ifde‡
INT_MAX


99 #i‡
INT_MAX
 == 32767

100 
	#WORD_BIT
 16

	)

102 #i‡
INT_MAX
 == 2147483647

103 
	#WORD_BIT
 32

	)

106 
	#WORD_BIT
 64

	)

109 #ñi‡
deföed
 
__INT_MAX__


110 #i‡
__INT_MAX__
 == 32767

111 
	#WORD_BIT
 16

	)

113 #i‡
__INT_MAX__
 == 2147483647

114 
	#WORD_BIT
 32

	)

117 
	#WORD_BIT
 64

	)

121 
	#WORD_BIT
 32

	)

125 #ifde‡
LONG_MAX


126 #i‡
LONG_MAX
 == 2147483647

127 
	#LONG_BIT
 32

	)

130 
	#LONG_BIT
 64

	)

132 #ñi‡
deföed
 
__LONG_MAX__


133 #i‡
__LONG_MAX__
 == 2147483647

134 
	#LONG_BIT
 32

	)

137 
	#LONG_BIT
 64

	)

140 
	~<bôs/w‹dsize.h
>

141 #i‡
__WORDSIZE
 == 64

142 
	#LONG_BIT
 64

	)

144 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

61 
	~<bôs/uöä-idítôy.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

80 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

81 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

82 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

83 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

85 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

86 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

87 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

88 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

90 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

91 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

92 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

93 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

380 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

381 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

382 #ñi‡!
__GNUC_PREREQ
 (4, 1)

383 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


384 #ñi‡
_FORTIFY_SOURCE
 > 1

385 
	#__USE_FORTIFY_LEVEL
 2

	)

387 
	#__USE_FORTIFY_LEVEL
 1

	)

390 #i‚de‡
__USE_FORTIFY_LEVEL


391 
	#__USE_FORTIFY_LEVEL
 0

	)

398 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


399 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

401 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

406 
	~<°dc-¥edef.h
>

414 #unde‡
__GNU_LIBRARY__


415 
	#__GNU_LIBRARY__
 6

	)

419 
	#__GLIBC__
 2

	)

420 
	#__GLIBC_MINOR__
 28

	)

422 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

423 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

426 #i‚de‡
__ASSEMBLER__


427 #i‚de‡
_SYS_CDEFS_H


428 
	~<sys/cdefs.h
>

433 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


434 
	#__USE_LARGEFILE
 1

	)

435 
	#__USE_LARGEFILE64
 1

	)

441 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

442 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

443 && 
deföed
 
	g__exã∫_ölöe


444 
	#__USE_EXTERN_INLINES
 1

	)

452 
	~<gnu/°ubs.h
>

	@/usr/include/fontconfig/fontconfig.h

25 #i‚de‡
_FONTCONFIG_H_


26 
	#_FONTCONFIG_H_


	)

28 
	~<sys/ty≥s.h
>

29 
	~<sys/°©.h
>

30 
	~<°d¨g.h
>

31 
	~<limôs.h
>

33 #i‡
deföed
(
__GNUC__
) && (__GNUC__ >= 4)

34 
	#FC_ATTRIBUTE_SENTINEL
(
x
Ë
	`__©åibuã__
((
	`__£¡öñ__
(0)))

	)

36 
	#FC_ATTRIBUTE_SENTINEL
(
x
)

	)

39 #i‚de‡
FcPublic


40 
	#FcPublic


	)

43 
	tFcCh¨8
;

44 
	tFcCh¨16
;

45 
	tFcCh¨32
;

46 
	tFcBoﬁ
;

54 
	#FC_MAJOR
 2

	)

55 
	#FC_MINOR
 13

	)

56 
	#FC_REVISION
 0

	)

58 
	#FC_VERSION
 ((
FC_MAJOR
 * 10000Ë+ (
FC_MINOR
 * 100Ë+ (
FC_REVISION
))

	)

70 
	#FC_CACHE_VERSION_NUMBER
 7

	)

71 
	#_FC_STRINGIFY_
(
s
Ë#s

	)

72 
	#_FC_STRINGIFY
(
s
Ë
	`_FC_STRINGIFY_
(s)

	)

73 
	#FC_CACHE_VERSION
 
	`_FC_STRINGIFY
(
FC_CACHE_VERSION_NUMBER
)

	)

75 
	#FcFÆ£
 0

	)

76 
	#FcTrue
 1

	)

77 
	#FcD⁄tC¨e
 2

	)

79 
	#FC_FAMILY
 "Ámûy"

	)

80 
	#FC_STYLE
 "°yÀ"

	)

81 
	#FC_SLANT
 "¶™t"

	)

82 
	#FC_WEIGHT
 "weight"

	)

83 
	#FC_SIZE
 "size"

	)

84 
	#FC_ASPECT
 "a•e˘"

	)

85 
	#FC_PIXEL_SIZE
 "pixñsize"

	)

86 
	#FC_SPACING
 "•acög"

	)

87 
	#FC_FOUNDRY
 "foundry"

	)

88 
	#FC_ANTIALIAS
 "™tülüs"

	)

89 
	#FC_HINTING
 "hötög"

	)

90 
	#FC_HINT_STYLE
 "höt°yÀ"

	)

91 
	#FC_VERTICAL_LAYOUT
 "vîtiˇŒayout"

	)

92 
	#FC_AUTOHINT
 "autohöt"

	)

94 
	#FC_GLOBAL_ADVANCE
 "globÆadv™˚"

	)

95 
	#FC_WIDTH
 "width"

	)

96 
	#FC_FILE
 "fûe"

	)

97 
	#FC_INDEX
 "ödex"

	)

98 
	#FC_FT_FACE
 "·Á˚"

	)

99 
	#FC_RASTERIZER
 "ø°îizî"

	)

100 
	#FC_OUTLINE
 "ouéöe"

	)

101 
	#FC_SCALABLE
 "sˇœbÀ"

	)

102 
	#FC_COLOR
 "cﬁ‹"

	)

103 
	#FC_VARIABLE
 "v¨übÀ"

	)

104 
	#FC_SCALE
 "sˇÀ"

	)

105 
	#FC_SYMBOL
 "symbﬁ"

	)

106 
	#FC_DPI
 "dpi"

	)

107 
	#FC_RGBA
 "rgba"

	)

108 
	#FC_MINSPACE
 "mö•a˚"

	)

109 
	#FC_SOURCE
 "sour˚"

	)

110 
	#FC_CHARSET
 "ch¨£t"

	)

111 
	#FC_LANG
 "œng"

	)

112 
	#FC_FONTVERSION
 "f⁄tvîsi⁄"

	)

113 
	#FC_FULLNAME
 "fuŒ«me"

	)

114 
	#FC_FAMILYLANG
 "Ámûyœng"

	)

115 
	#FC_STYLELANG
 "°yÀœng"

	)

116 
	#FC_FULLNAMELANG
 "fuŒ«mñ™g"

	)

117 
	#FC_CAPABILITY
 "ˇ∑bûôy"

	)

118 
	#FC_FONTFORMAT
 "f⁄tf‹m©"

	)

119 
	#FC_EMBOLDEN
 "embﬁdí"

	)

120 
	#FC_EMBEDDED_BITMAP
 "embeddedbôm≠"

	)

121 
	#FC_DECORATIVE
 "dec‹©ive"

	)

122 
	#FC_LCD_FILTER
 "lcdfûãr"

	)

123 
	#FC_FONT_FEATURES
 "f⁄t„©uªs"

	)

124 
	#FC_FONT_VARIATIONS
 "f⁄tv¨üti⁄s"

	)

125 
	#FC_NAMELANG
 "«mñ™g"

	)

126 
	#FC_PRGNAME
 "¥g«me"

	)

127 
	#FC_HASH
 "hash"

	)

128 
	#FC_POSTSCRIPT_NAME
 "po°s¸ùäame"

	)

130 
	#FC_CACHE_SUFFIX
 ".ˇche-" 
FC_CACHE_VERSION


	)

131 
	#FC_DIR_CACHE_FILE
 "f⁄ts.ˇche-" 
FC_CACHE_VERSION


	)

132 
	#FC_USER_CACHE_FILE
 ".f⁄ts.ˇche-" 
FC_CACHE_VERSION


	)

135 
	#FC_CHARWIDTH
 "ch¨width"

	)

136 
	#FC_CHAR_WIDTH
 
FC_CHARWIDTH


	)

137 
	#FC_CHAR_HEIGHT
 "ch¨height"

	)

138 
	#FC_MATRIX
 "m©rix"

	)

140 
	#FC_WEIGHT_THIN
 0

	)

141 
	#FC_WEIGHT_EXTRALIGHT
 40

	)

142 
	#FC_WEIGHT_ULTRALIGHT
 
FC_WEIGHT_EXTRALIGHT


	)

143 
	#FC_WEIGHT_LIGHT
 50

	)

144 
	#FC_WEIGHT_DEMILIGHT
 55

	)

145 
	#FC_WEIGHT_SEMILIGHT
 
FC_WEIGHT_DEMILIGHT


	)

146 
	#FC_WEIGHT_BOOK
 75

	)

147 
	#FC_WEIGHT_REGULAR
 80

	)

148 
	#FC_WEIGHT_NORMAL
 
FC_WEIGHT_REGULAR


	)

149 
	#FC_WEIGHT_MEDIUM
 100

	)

150 
	#FC_WEIGHT_DEMIBOLD
 180

	)

151 
	#FC_WEIGHT_SEMIBOLD
 
FC_WEIGHT_DEMIBOLD


	)

152 
	#FC_WEIGHT_BOLD
 200

	)

153 
	#FC_WEIGHT_EXTRABOLD
 205

	)

154 
	#FC_WEIGHT_ULTRABOLD
 
FC_WEIGHT_EXTRABOLD


	)

155 
	#FC_WEIGHT_BLACK
 210

	)

156 
	#FC_WEIGHT_HEAVY
 
FC_WEIGHT_BLACK


	)

157 
	#FC_WEIGHT_EXTRABLACK
 215

	)

158 
	#FC_WEIGHT_ULTRABLACK
 
FC_WEIGHT_EXTRABLACK


	)

160 
	#FC_SLANT_ROMAN
 0

	)

161 
	#FC_SLANT_ITALIC
 100

	)

162 
	#FC_SLANT_OBLIQUE
 110

	)

164 
	#FC_WIDTH_ULTRACONDENSED
 50

	)

165 
	#FC_WIDTH_EXTRACONDENSED
 63

	)

166 
	#FC_WIDTH_CONDENSED
 75

	)

167 
	#FC_WIDTH_SEMICONDENSED
 87

	)

168 
	#FC_WIDTH_NORMAL
 100

	)

169 
	#FC_WIDTH_SEMIEXPANDED
 113

	)

170 
	#FC_WIDTH_EXPANDED
 125

	)

171 
	#FC_WIDTH_EXTRAEXPANDED
 150

	)

172 
	#FC_WIDTH_ULTRAEXPANDED
 200

	)

174 
	#FC_PROPORTIONAL
 0

	)

175 
	#FC_DUAL
 90

	)

176 
	#FC_MONO
 100

	)

177 
	#FC_CHARCELL
 110

	)

180 
	#FC_RGBA_UNKNOWN
 0

	)

181 
	#FC_RGBA_RGB
 1

	)

182 
	#FC_RGBA_BGR
 2

	)

183 
	#FC_RGBA_VRGB
 3

	)

184 
	#FC_RGBA_VBGR
 4

	)

185 
	#FC_RGBA_NONE
 5

	)

188 
	#FC_HINT_NONE
 0

	)

189 
	#FC_HINT_SLIGHT
 1

	)

190 
	#FC_HINT_MEDIUM
 2

	)

191 
	#FC_HINT_FULL
 3

	)

194 
	#FC_LCD_NONE
 0

	)

195 
	#FC_LCD_DEFAULT
 1

	)

196 
	#FC_LCD_LIGHT
 2

	)

197 
	#FC_LCD_LEGACY
 3

	)

199 
	e_FcTy≥
 {

200 
	mFcTy≥Unknown
 = -1,

201 
	mFcTy≥Void
,

202 
	mFcTy≥I¡egî
,

203 
	mFcTy≥DoubÀ
,

204 
	mFcTy≥Såög
,

205 
	mFcTy≥Boﬁ
,

206 
	mFcTy≥M©rix
,

207 
	mFcTy≥Ch¨Së
,

208 
	mFcTy≥FTFa˚
,

209 
	mFcTy≥L™gSë
,

210 
	mFcTy≥R™ge


211 } 
	tFcTy≥
;

213 
	s_FcM©rix
 {

214 
	mxx
, 
	mxy
, 
	myx
, 
	myy
;

215 } 
	tFcM©rix
;

217 
	#FcM©rixInô
(
m
Ë((m)->
xx
 = (m)->
yy
 = 1, \

218 (
m
)->
xy
 = (m)->
yx
 = 0)

	)

225 
_FcCh¨Së
 
	tFcCh¨Së
;

227 
	s_FcObje˘Ty≥
 {

228 *
	mobje˘
;

229 
FcTy≥
 
	mty≥
;

230 } 
	tFcObje˘Ty≥
;

232 
	s_FcC⁄°™t
 {

233 c⁄° 
FcCh¨8
 *
	m«me
;

234 c⁄° *
	mobje˘
;

235 
	mvÆue
;

236 } 
	tFcC⁄°™t
;

238 
	e_FcResu…
 {

239 
	mFcResu…M©ch
, 
	mFcResu…NoM©ch
, 
	mFcResu…Ty≥Mism©ch
, 
	mFcResu…NoId
,

240 
	mFcResu…OutOfMem‹y


241 } 
	tFcResu…
;

243 
	e_FcVÆueBödög
 {

244 
	mFcVÆueBödögWók
, 
	mFcVÆueBödögSå⁄g
, 
	mFcVÆueBödögSame
,

246 
	mFcVÆueBödögEnd
 = 
INT_MAX


247 } 
	tFcVÆueBödög
;

249 
_FcP©ã∫
 
	tFcP©ã∫
;

251 
_FcL™gSë
 
	tFcL™gSë
;

253 
_FcR™ge
 
	tFcR™ge
;

255 
	s_FcVÆue
 {

256 
FcTy≥
 
	mty≥
;

258 c⁄° 
FcCh¨8
 *
	ms
;

259 
	mi
;

260 
FcBoﬁ
 
	mb
;

261 
	md
;

262 c⁄° 
FcM©rix
 *
	mm
;

263 c⁄° 
FcCh¨Së
 *
	mc
;

264 *
	mf
;

265 c⁄° 
FcL™gSë
 *
	ml
;

266 c⁄° 
FcR™ge
 *
	mr
;

267 } 
	mu
;

268 } 
	tFcVÆue
;

270 
	s_FcF⁄tSë
 {

271 
	mnf⁄t
;

272 
	msf⁄t
;

273 
FcP©ã∫
 **
	mf⁄ts
;

274 } 
	tFcF⁄tSë
;

276 
	s_FcObje˘Së
 {

277 
	mnobje˘
;

278 
	msobje˘
;

279 c⁄° **
	mobje˘s
;

280 } 
	tFcObje˘Së
;

282 
	e_FcM©chKöd
 {

283 
	mFcM©chP©ã∫
, 
	mFcM©chF⁄t
, 
	mFcM©chSˇn
,

284 
	mFcM©chKödEnd
,

285 
	mFcM©chKödBegö
 = 
FcM©chP©ã∫


286 } 
	tFcM©chKöd
;

288 
	e_FcL™gResu…
 {

289 
	mFcL™gEquÆ
 = 0,

290 
	mFcL™gDif„ª¡Cou¡ry
 = 1,

291 
	mFcL™gDif„ª¡Tîrô‹y
 = 1,

292 
	mFcL™gDif„ª¡L™g
 = 2

293 } 
	tFcL™gResu…
;

295 
	e_FcSëName
 {

296 
	mFcSëSy°em
 = 0,

297 
	mFcSëAµliˇti⁄
 = 1

298 } 
	tFcSëName
;

300 
	s_FcC⁄figFûeInfoIãr
 {

301 *
	mdummy1
;

302 *
	mdummy2
;

303 *
	mdummy3
;

304 } 
	tFcC⁄figFûeInfoIãr
;

306 
_FcAtomic
 
	tFcAtomic
;

308 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

309 
	#_FCFUNCPROTOBEGIN
 "C" {

	)

310 
	#_FCFUNCPROTOEND
 }

	)

312 
	#_FCFUNCPROTOBEGIN


	)

313 
	#_FCFUNCPROTOEND


	)

316 íum { 
FcEndünBig
, 
FcEndünLôée
 } 
	tFcEndün
;

318 
_FcC⁄fig
 
	tFcC⁄fig
;

320 
_FcGlobÆCache
 
	tFcFûeCache
;

322 
_FcBœnks
 
	tFcBœnks
;

324 
_FcSåLi°
 
	tFcSåLi°
;

326 
_FcSåSë
 
	tFcSåSë
;

328 
_FcCache
 
	tFcCache
;

330 
_FCFUNCPROTOBEGIN


333 
FcPublic
 
FcBœnks
 *

334 
FcBœnksCª©e
 ();

336 
FcPublic
 

337 
FcBœnksDe°roy
 (
FcBœnks
 *
b
);

339 
FcPublic
 
FcBoﬁ


340 
FcBœnksAdd
 (
FcBœnks
 *
b
, 
FcCh¨32
 
ucs4
);

342 
FcPublic
 
FcBoﬁ


343 
FcBœnksIsMembî
 (
FcBœnks
 *
b
, 
FcCh¨32
 
ucs4
);

347 
FcPublic
 c⁄° 
FcCh¨8
 *

348 
FcCacheDú
(c⁄° 
FcCache
 *
c
);

350 
FcPublic
 
FcF⁄tSë
 *

351 
FcCacheC›ySë
(c⁄° 
FcCache
 *
c
);

353 
FcPublic
 c⁄° 
FcCh¨8
 *

354 
FcCacheSubdú
 (c⁄° 
FcCache
 *
c
, 
i
);

356 
FcPublic
 

357 
FcCacheNumSubdú
 (c⁄° 
FcCache
 *
c
);

359 
FcPublic
 

360 
FcCacheNumF⁄t
 (c⁄° 
FcCache
 *
c
);

362 
FcPublic
 
FcBoﬁ


363 
FcDúCacheU∆ök
 (c⁄° 
FcCh¨8
 *
dú
, 
FcC⁄fig
 *
c⁄fig
);

365 
FcPublic
 
FcBoﬁ


366 
FcDúCacheVÆid
 (c⁄° 
FcCh¨8
 *
ˇche_fûe
);

368 
FcPublic
 
FcBoﬁ


369 
FcDúCacheCÀ™
 (c⁄° 
FcCh¨8
 *
ˇche_dú
, 
FcBoﬁ
 
vîbo£
);

371 
FcPublic
 

372 
FcCacheCª©eTagFûe
 (c⁄° 
FcC⁄fig
 *
c⁄fig
);

374 
FcPublic
 
FcBoﬁ


375 
FcDúCacheCª©eUUID
 (
FcCh¨8
 *
dú
,

376 
FcBoﬁ
 
f‹˚
,

377 
FcC⁄fig
 *
c⁄fig
);

380 
FcPublic
 
FcCh¨8
 *

381 
FcC⁄figHome
 ();

383 
FcPublic
 
FcBoﬁ


384 
FcC⁄figE«bÀHome
 (
FcBoﬁ
 
íabÀ
);

386 
FcPublic
 
FcCh¨8
 *

387 
FcC⁄figFûíame
 (c⁄° 
FcCh¨8
 *
uæ
);

389 
FcPublic
 
FcC⁄fig
 *

390 
FcC⁄figCª©e
 ();

392 
FcPublic
 
FcC⁄fig
 *

393 
FcC⁄figRe„ªn˚
 (
FcC⁄fig
 *
c⁄fig
);

395 
FcPublic
 

396 
FcC⁄figDe°roy
 (
FcC⁄fig
 *
c⁄fig
);

398 
FcPublic
 
FcBoﬁ


399 
FcC⁄figSëCuºít
 (
FcC⁄fig
 *
c⁄fig
);

401 
FcPublic
 
FcC⁄fig
 *

402 
FcC⁄figGëCuºít
 ();

404 
FcPublic
 
FcBoﬁ


405 
FcC⁄figU±oD©e
 (
FcC⁄fig
 *
c⁄fig
);

407 
FcPublic
 
FcBoﬁ


408 
FcC⁄figBuûdF⁄ts
 (
FcC⁄fig
 *
c⁄fig
);

410 
FcPublic
 
FcSåLi°
 *

411 
FcC⁄figGëF⁄tDús
 (
FcC⁄fig
 *
c⁄fig
);

413 
FcPublic
 
FcSåLi°
 *

414 
FcC⁄figGëC⁄figDús
 (
FcC⁄fig
 *
c⁄fig
);

416 
FcPublic
 
FcSåLi°
 *

417 
FcC⁄figGëC⁄figFûes
 (
FcC⁄fig
 *
c⁄fig
);

419 
FcPublic
 
FcCh¨8
 *

420 
FcC⁄figGëCache
 (
FcC⁄fig
 *
c⁄fig
);

422 
FcPublic
 
FcBœnks
 *

423 
FcC⁄figGëBœnks
 (
FcC⁄fig
 *
c⁄fig
);

425 
FcPublic
 
FcSåLi°
 *

426 
FcC⁄figGëCacheDús
 (c⁄° 
FcC⁄fig
 *
c⁄fig
);

428 
FcPublic
 

429 
FcC⁄figGëResˇnI¡îvÆ
 (
FcC⁄fig
 *
c⁄fig
);

431 
FcPublic
 
FcBoﬁ


432 
FcC⁄figSëResˇnI¡îvÆ
 (
FcC⁄fig
 *
c⁄fig
, 
ªsˇnI¡îvÆ
);

434 
FcPublic
 
FcF⁄tSë
 *

435 
FcC⁄figGëF⁄ts
 (
FcC⁄fig
 *
c⁄fig
,

436 
FcSëName
 
£t
);

438 
FcPublic
 
FcBoﬁ


439 
FcC⁄figAµF⁄tAddFûe
 (
FcC⁄fig
 *
c⁄fig
,

440 c⁄° 
FcCh¨8
 *
fûe
);

442 
FcPublic
 
FcBoﬁ


443 
FcC⁄figAµF⁄tAddDú
 (
FcC⁄fig
 *
c⁄fig
,

444 c⁄° 
FcCh¨8
 *
dú
);

446 
FcPublic
 

447 
FcC⁄figAµF⁄tCÀ¨
 (
FcC⁄fig
 *
c⁄fig
);

449 
FcPublic
 
FcBoﬁ


450 
FcC⁄figSub°ôuãWôhP©
 (
FcC⁄fig
 *
c⁄fig
,

451 
FcP©ã∫
 *
p
,

452 
FcP©ã∫
 *
p_∑t
,

453 
FcM©chKöd
 
köd
);

455 
FcPublic
 
FcBoﬁ


456 
FcC⁄figSub°ôuã
 (
FcC⁄fig
 *
c⁄fig
,

457 
FcP©ã∫
 *
p
,

458 
FcM©chKöd
 
köd
);

460 
FcPublic
 c⁄° 
FcCh¨8
 *

461 
FcC⁄figGëSysRoŸ
 (c⁄° 
FcC⁄fig
 *
c⁄fig
);

463 
FcPublic
 

464 
FcC⁄figSëSysRoŸ
 (
FcC⁄fig
 *
c⁄fig
,

465 c⁄° 
FcCh¨8
 *
sy§oŸ
);

467 
FcPublic
 

468 
FcC⁄figFûeInfoIãrInô
 (
FcC⁄fig
 *
c⁄fig
,

469 
FcC⁄figFûeInfoIãr
 *
ôî
);

471 
FcPublic
 
FcBoﬁ


472 
FcC⁄figFûeInfoIãrNext
 (
FcC⁄fig
 *
c⁄fig
,

473 
FcC⁄figFûeInfoIãr
 *
ôî
);

475 
FcPublic
 
FcBoﬁ


476 
FcC⁄figFûeInfoIãrGë
 (
FcC⁄fig
 *
c⁄fig
,

477 
FcC⁄figFûeInfoIãr
 *
ôî
,

478 
FcCh¨8
 **
«me
,

479 
FcCh¨8
 **
des¸ùti⁄
,

480 
FcBoﬁ
 *
íabÀd
);

483 
FcPublic
 
FcCh¨Së
*

484 
FcCh¨SëCª©e
 ();

487 
FcPublic
 
FcCh¨Së
 *

488 
FcCh¨SëNew
 ();

490 
FcPublic
 

491 
FcCh¨SëDe°roy
 (
FcCh¨Së
 *
fcs
);

493 
FcPublic
 
FcBoﬁ


494 
FcCh¨SëAddCh¨
 (
FcCh¨Së
 *
fcs
, 
FcCh¨32
 
ucs4
);

496 
FcPublic
 
FcBoﬁ


497 
FcCh¨SëDñCh¨
 (
FcCh¨Së
 *
fcs
, 
FcCh¨32
 
ucs4
);

499 
FcPublic
 
FcCh¨Së
*

500 
FcCh¨SëC›y
 (
FcCh¨Së
 *
§c
);

502 
FcPublic
 
FcBoﬁ


503 
FcCh¨SëEquÆ
 (c⁄° 
FcCh¨Së
 *
a
, c⁄° FcCh¨Së *
b
);

505 
FcPublic
 
FcCh¨Së
*

506 
FcCh¨SëI¡î£˘
 (c⁄° 
FcCh¨Së
 *
a
, c⁄° FcCh¨Së *
b
);

508 
FcPublic
 
FcCh¨Së
*

509 
FcCh¨SëUni⁄
 (c⁄° 
FcCh¨Së
 *
a
, c⁄° FcCh¨Së *
b
);

511 
FcPublic
 
FcCh¨Së
*

512 
FcCh¨SëSubåa˘
 (c⁄° 
FcCh¨Së
 *
a
, c⁄° FcCh¨Së *
b
);

514 
FcPublic
 
FcBoﬁ


515 
FcCh¨SëMîge
 (
FcCh¨Së
 *
a
, c⁄° FcCh¨Së *
b
, 
FcBoﬁ
 *
ch™ged
);

517 
FcPublic
 
FcBoﬁ


518 
FcCh¨SëHasCh¨
 (c⁄° 
FcCh¨Së
 *
fcs
, 
FcCh¨32
 
ucs4
);

520 
FcPublic
 
FcCh¨32


521 
FcCh¨SëCou¡
 (c⁄° 
FcCh¨Së
 *
a
);

523 
FcPublic
 
FcCh¨32


524 
FcCh¨SëI¡î£˘Cou¡
 (c⁄° 
FcCh¨Së
 *
a
, c⁄° FcCh¨Së *
b
);

526 
FcPublic
 
FcCh¨32


527 
FcCh¨SëSubåa˘Cou¡
 (c⁄° 
FcCh¨Së
 *
a
, c⁄° FcCh¨Së *
b
);

529 
FcPublic
 
FcBoﬁ


530 
FcCh¨SëIsSub£t
 (c⁄° 
FcCh¨Së
 *
a
, c⁄° FcCh¨Së *
b
);

532 
	#FC_CHARSET_MAP_SIZE
 (256/32)

	)

533 
	#FC_CHARSET_DONE
 ((
FcCh¨32
Ë-1)

	)

535 
FcPublic
 
FcCh¨32


536 
FcCh¨SëFú°Page
 (c⁄° 
FcCh¨Së
 *
a
,

537 
FcCh¨32
 
m≠
[
FC_CHARSET_MAP_SIZE
],

538 
FcCh¨32
 *
√xt
);

540 
FcPublic
 
FcCh¨32


541 
FcCh¨SëNextPage
 (c⁄° 
FcCh¨Së
 *
a
,

542 
FcCh¨32
 
m≠
[
FC_CHARSET_MAP_SIZE
],

543 
FcCh¨32
 *
√xt
);

549 
FcPublic
 
FcCh¨32


550 
FcCh¨SëCovîage
 (c⁄° 
FcCh¨Së
 *
a
, 
FcCh¨32
 
∑ge
, FcCh¨32 *
ªsu…
);

553 
FcPublic
 

554 
FcVÆuePröt
 (c⁄° 
FcVÆue
 
v
);

556 
FcPublic
 

557 
FcP©ã∫Pröt
 (c⁄° 
FcP©ã∫
 *
p
);

559 
FcPublic
 

560 
FcF⁄tSëPröt
 (c⁄° 
FcF⁄tSë
 *
s
);

563 
FcPublic
 
FcSåSë
 *

564 
FcGëDeÁu…L™gs
 ();

566 
FcPublic
 

567 
FcDeÁu…Sub°ôuã
 (
FcP©ã∫
 *
∑âîn
);

570 
FcPublic
 
FcBoﬁ


571 
FcFûeIsDú
 (c⁄° 
FcCh¨8
 *
fûe
);

573 
FcPublic
 
FcBoﬁ


574 
FcFûeSˇn
 (
FcF⁄tSë
 *
£t
,

575 
FcSåSë
 *
dús
,

576 
FcFûeCache
 *
ˇche
,

577 
FcBœnks
 *
bœnks
,

578 c⁄° 
FcCh¨8
 *
fûe
,

579 
FcBoﬁ
 
f‹˚
);

581 
FcPublic
 
FcBoﬁ


582 
FcDúSˇn
 (
FcF⁄tSë
 *
£t
,

583 
FcSåSë
 *
dús
,

584 
FcFûeCache
 *
ˇche
,

585 
FcBœnks
 *
bœnks
,

586 c⁄° 
FcCh¨8
 *
dú
,

587 
FcBoﬁ
 
f‹˚
);

589 
FcPublic
 
FcBoﬁ


590 
FcDúSave
 (
FcF⁄tSë
 *
£t
, 
FcSåSë
 *
dús
, c⁄° 
FcCh¨8
 *
dú
);

592 
FcPublic
 
FcCache
 *

593 
FcDúCacheLﬂd
 (c⁄° 
FcCh¨8
 *
dú
, 
FcC⁄fig
 *
c⁄fig
, FcCh¨8 **
ˇche_fûe
);

595 
FcPublic
 
FcCache
 *

596 
FcDúCacheResˇn
 (c⁄° 
FcCh¨8
 *
dú
, 
FcC⁄fig
 *
c⁄fig
);

598 
FcPublic
 
FcCache
 *

599 
FcDúCacheRód
 (c⁄° 
FcCh¨8
 *
dú
, 
FcBoﬁ
 
f‹˚
, 
FcC⁄fig
 *
c⁄fig
);

601 
FcPublic
 
FcCache
 *

602 
FcDúCacheLﬂdFûe
 (c⁄° 
FcCh¨8
 *
ˇche_fûe
, 
°©
 *
fûe_°©
);

604 
FcPublic
 

605 
FcDúCacheU∆ﬂd
 (
FcCache
 *
ˇche
);

608 
FcPublic
 
FcP©ã∫
 *

609 
FcFªeTy≥Quîy
 (c⁄° 
FcCh¨8
 *
fûe
, 
id
, 
FcBœnks
 *
bœnks
, *
cou¡
);

611 
FcPublic
 

612 
FcFªeTy≥QuîyAŒ
(c⁄° 
FcCh¨8
 *
fûe
, 
id
, 
FcBœnks
 *
bœnks
, *
cou¡
, 
FcF⁄tSë
 *
£t
);

616 
FcPublic
 
FcF⁄tSë
 *

617 
FcF⁄tSëCª©e
 ();

619 
FcPublic
 

620 
FcF⁄tSëDe°roy
 (
FcF⁄tSë
 *
s
);

622 
FcPublic
 
FcBoﬁ


623 
FcF⁄tSëAdd
 (
FcF⁄tSë
 *
s
, 
FcP©ã∫
 *
f⁄t
);

626 
FcPublic
 
FcC⁄fig
 *

627 
FcInôLﬂdC⁄fig
 ();

629 
FcPublic
 
FcC⁄fig
 *

630 
FcInôLﬂdC⁄figAndF⁄ts
 ();

632 
FcPublic
 
FcBoﬁ


633 
FcInô
 ();

635 
FcPublic
 

636 
FcFöi
 ();

638 
FcPublic
 

639 
FcGëVîsi⁄
 ();

641 
FcPublic
 
FcBoﬁ


642 
FcInôReöôülize
 ();

644 
FcPublic
 
FcBoﬁ


645 
FcInôBrögU±oD©e
 ();

648 
FcPublic
 
FcSåSë
 *

649 
FcGëL™gs
 ();

651 
FcPublic
 
FcCh¨8
 *

652 
FcL™gN‹mÆize
 (c⁄° 
FcCh¨8
 *
œng
);

654 
FcPublic
 c⁄° 
FcCh¨Së
 *

655 
FcL™gGëCh¨Së
 (c⁄° 
FcCh¨8
 *
œng
);

657 
FcPublic
 
FcL™gSë
*

658 
FcL™gSëCª©e
 ();

660 
FcPublic
 

661 
FcL™gSëDe°roy
 (
FcL™gSë
 *
ls
);

663 
FcPublic
 
FcL™gSë
*

664 
FcL™gSëC›y
 (c⁄° 
FcL™gSë
 *
ls
);

666 
FcPublic
 
FcBoﬁ


667 
FcL™gSëAdd
 (
FcL™gSë
 *
ls
, c⁄° 
FcCh¨8
 *
œng
);

669 
FcPublic
 
FcBoﬁ


670 
FcL™gSëDñ
 (
FcL™gSë
 *
ls
, c⁄° 
FcCh¨8
 *
œng
);

672 
FcPublic
 
FcL™gResu…


673 
FcL™gSëHasL™g
 (c⁄° 
FcL™gSë
 *
ls
, c⁄° 
FcCh¨8
 *
œng
);

675 
FcPublic
 
FcL™gResu…


676 
FcL™gSëCom∑ª
 (c⁄° 
FcL™gSë
 *
lß
, c⁄° FcL™gSë *
lsb
);

678 
FcPublic
 
FcBoﬁ


679 
FcL™gSëC⁄èös
 (c⁄° 
FcL™gSë
 *
lß
, c⁄° FcL™gSë *
lsb
);

681 
FcPublic
 
FcBoﬁ


682 
FcL™gSëEquÆ
 (c⁄° 
FcL™gSë
 *
lß
, c⁄° FcL™gSë *
lsb
);

684 
FcPublic
 
FcCh¨32


685 
FcL™gSëHash
 (c⁄° 
FcL™gSë
 *
ls
);

687 
FcPublic
 
FcSåSë
 *

688 
FcL™gSëGëL™gs
 (c⁄° 
FcL™gSë
 *
ls
);

690 
FcPublic
 
FcL™gSë
 *

691 
FcL™gSëUni⁄
 (c⁄° 
FcL™gSë
 *
a
, c⁄° FcL™gSë *
b
);

693 
FcPublic
 
FcL™gSë
 *

694 
FcL™gSëSubåa˘
 (c⁄° 
FcL™gSë
 *
a
, c⁄° FcL™gSë *
b
);

697 
FcPublic
 
FcObje˘Së
 *

698 
FcObje˘SëCª©e
 ();

700 
FcPublic
 
FcBoﬁ


701 
FcObje˘SëAdd
 (
FcObje˘Së
 *
os
, c⁄° *
obje˘
);

703 
FcPublic
 

704 
FcObje˘SëDe°roy
 (
FcObje˘Së
 *
os
);

706 
FcPublic
 
FcObje˘Së
 *

707 
FcObje˘SëVaBuûd
 (c⁄° *
fú°
, 
va_li°
 
va
);

709 
FcPublic
 
FcObje˘Së
 *

710 
	$FcObje˘SëBuûd
 (c⁄° *
fú°
, ...Ë
	`FC_ATTRIBUTE_SENTINEL
(0);

712 
FcPublic
 
FcF⁄tSë
 *

713 
	`FcF⁄tSëLi°
 (
FcC⁄fig
 *
c⁄fig
,

714 
FcF⁄tSë
 **
£ts
,

715 
n£ts
,

716 
FcP©ã∫
 *
p
,

717 
FcObje˘Së
 *
os
);

719 
FcPublic
 
FcF⁄tSë
 *

720 
	`FcF⁄tLi°
 (
FcC⁄fig
 *
c⁄fig
,

721 
FcP©ã∫
 *
p
,

722 
FcObje˘Së
 *
os
);

726 
FcPublic
 
FcAtomic
 *

727 
	`FcAtomicCª©e
 (c⁄° 
FcCh¨8
 *
fûe
);

729 
FcPublic
 
FcBoﬁ


730 
	`FcAtomicLock
 (
FcAtomic
 *
©omic
);

732 
FcPublic
 
FcCh¨8
 *

733 
	`FcAtomicNewFûe
 (
FcAtomic
 *
©omic
);

735 
FcPublic
 
FcCh¨8
 *

736 
	`FcAtomicOrigFûe
 (
FcAtomic
 *
©omic
);

738 
FcPublic
 
FcBoﬁ


739 
	`FcAtomicRïœ˚Orig
 (
FcAtomic
 *
©omic
);

741 
FcPublic
 

742 
	`FcAtomicDñëeNew
 (
FcAtomic
 *
©omic
);

744 
FcPublic
 

745 
	`FcAtomicU∆ock
 (
FcAtomic
 *
©omic
);

747 
FcPublic
 

748 
	`FcAtomicDe°roy
 (
FcAtomic
 *
©omic
);

751 
FcPublic
 
FcP©ã∫
 *

752 
	`FcF⁄tSëM©ch
 (
FcC⁄fig
 *
c⁄fig
,

753 
FcF⁄tSë
 **
£ts
,

754 
n£ts
,

755 
FcP©ã∫
 *
p
,

756 
FcResu…
 *
ªsu…
);

758 
FcPublic
 
FcP©ã∫
 *

759 
	`FcF⁄tM©ch
 (
FcC⁄fig
 *
c⁄fig
,

760 
FcP©ã∫
 *
p
,

761 
FcResu…
 *
ªsu…
);

763 
FcPublic
 
FcP©ã∫
 *

764 
	`FcF⁄tRídîPª∑ª
 (
FcC⁄fig
 *
c⁄fig
,

765 
FcP©ã∫
 *
∑t
,

766 
FcP©ã∫
 *
f⁄t
);

768 
FcPublic
 
FcF⁄tSë
 *

769 
	`FcF⁄tSëS‹t
 (
FcC⁄fig
 *
c⁄fig
,

770 
FcF⁄tSë
 **
£ts
,

771 
n£ts
,

772 
FcP©ã∫
 *
p
,

773 
FcBoﬁ
 
åim
,

774 
FcCh¨Së
 **
c•
,

775 
FcResu…
 *
ªsu…
);

777 
FcPublic
 
FcF⁄tSë
 *

778 
	`FcF⁄tS‹t
 (
FcC⁄fig
 *
c⁄fig
,

779 
FcP©ã∫
 *
p
,

780 
FcBoﬁ
 
åim
,

781 
FcCh¨Së
 **
c•
,

782 
FcResu…
 *
ªsu…
);

784 
FcPublic
 

785 
	`FcF⁄tSëS‹tDe°roy
 (
FcF⁄tSë
 *
fs
);

788 
FcPublic
 
FcM©rix
 *

789 
	`FcM©rixC›y
 (c⁄° 
FcM©rix
 *
m©
);

791 
FcPublic
 
FcBoﬁ


792 
	`FcM©rixEquÆ
 (c⁄° 
FcM©rix
 *
m©1
, c⁄° FcM©rix *
m©2
);

794 
FcPublic
 

795 
	`FcM©rixMu…ùly
 (
FcM©rix
 *
ªsu…
, c⁄° FcM©rix *
a
, c⁄° FcM©rix *
b
);

797 
FcPublic
 

798 
	`FcM©rixRŸ©e
 (
FcM©rix
 *
m
, 
c
, 
s
);

800 
FcPublic
 

801 
	`FcM©rixSˇÀ
 (
FcM©rix
 *
m
, 
sx
, 
sy
);

803 
FcPublic
 

804 
	`FcM©rixShór
 (
FcM©rix
 *
m
, 
sh
, 
sv
);

809 
FcPublic
 
FcBoﬁ


810 
	`FcNameRegi°îObje˘Ty≥s
 (c⁄° 
FcObje˘Ty≥
 *
ty≥s
, 
¡y≥
);

813 
FcPublic
 
FcBoﬁ


814 
	`FcNameUƒegi°îObje˘Ty≥s
 (c⁄° 
FcObje˘Ty≥
 *
ty≥s
, 
¡y≥
);

816 
FcPublic
 c⁄° 
FcObje˘Ty≥
 *

817 
	`FcNameGëObje˘Ty≥
 (c⁄° *
obje˘
);

820 
FcPublic
 
FcBoﬁ


821 
	`FcNameRegi°îC⁄°™ts
 (c⁄° 
FcC⁄°™t
 *
c⁄°s
, 
nc⁄°s
);

824 
FcPublic
 
FcBoﬁ


825 
	`FcNameUƒegi°îC⁄°™ts
 (c⁄° 
FcC⁄°™t
 *
c⁄°s
, 
nc⁄°s
);

827 
FcPublic
 c⁄° 
FcC⁄°™t
 *

828 
	`FcNameGëC⁄°™t
 (c⁄° 
FcCh¨8
 *
°rög
);

830 
FcPublic
 
FcBoﬁ


831 
	`FcNameC⁄°™t
 (c⁄° 
FcCh¨8
 *
°rög
, *
ªsu…
);

833 
FcPublic
 
FcP©ã∫
 *

834 
	`FcNameP¨£
 (c⁄° 
FcCh¨8
 *
«me
);

836 
FcPublic
 
FcCh¨8
 *

837 
	`FcNameU≈¨£
 (
FcP©ã∫
 *
∑t
);

840 
FcPublic
 
FcP©ã∫
 *

841 
	`FcP©ã∫Cª©e
 ();

843 
FcPublic
 
FcP©ã∫
 *

844 
	`FcP©ã∫Du∂iˇã
 (c⁄° 
FcP©ã∫
 *
p
);

846 
FcPublic
 

847 
	`FcP©ã∫Re„ªn˚
 (
FcP©ã∫
 *
p
);

849 
FcPublic
 
FcP©ã∫
 *

850 
	`FcP©ã∫Fûãr
 (
FcP©ã∫
 *
p
, c⁄° 
FcObje˘Së
 *
os
);

852 
FcPublic
 

853 
	`FcVÆueDe°roy
 (
FcVÆue
 
v
);

855 
FcPublic
 
FcBoﬁ


856 
	`FcVÆueEquÆ
 (
FcVÆue
 
va
, FcVÆuê
vb
);

858 
FcPublic
 
FcVÆue


859 
	`FcVÆueSave
 (
FcVÆue
 
v
);

861 
FcPublic
 

862 
	`FcP©ã∫De°roy
 (
FcP©ã∫
 *
p
);

864 
FcPublic
 
FcBoﬁ


865 
	`FcP©ã∫EquÆ
 (c⁄° 
FcP©ã∫
 *
∑
, c⁄° FcP©ã∫ *
pb
);

867 
FcPublic
 
FcBoﬁ


868 
	`FcP©ã∫EquÆSub£t
 (c⁄° 
FcP©ã∫
 *
∑
, c⁄° FcP©ã∫ *
pb
, c⁄° 
FcObje˘Së
 *
os
);

870 
FcPublic
 
FcCh¨32


871 
	`FcP©ã∫Hash
 (c⁄° 
FcP©ã∫
 *
p
);

873 
FcPublic
 
FcBoﬁ


874 
	`FcP©ã∫Add
 (
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
FcVÆue
 
vÆue
, 
FcBoﬁ
 
≠≥nd
);

876 
FcPublic
 
FcBoﬁ


877 
	`FcP©ã∫AddWók
 (
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
FcVÆue
 
vÆue
, 
FcBoﬁ
 
≠≥nd
);

879 
FcPublic
 
FcResu…


880 
	`FcP©ã∫Gë
 (c⁄° 
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
id
, 
FcVÆue
 *
v
);

882 
FcPublic
 
FcResu…


883 
	`FcP©ã∫GëWôhBödög
 (c⁄° 
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
id
, 
FcVÆue
 *
v
, 
FcVÆueBödög
 *
b
);

885 
FcPublic
 
FcBoﬁ


886 
	`FcP©ã∫Dñ
 (
FcP©ã∫
 *
p
, c⁄° *
obje˘
);

888 
FcPublic
 
FcBoﬁ


889 
	`FcP©ã∫Remove
 (
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
id
);

891 
FcPublic
 
FcBoﬁ


892 
	`FcP©ã∫AddI¡egî
 (
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
i
);

894 
FcPublic
 
FcBoﬁ


895 
	`FcP©ã∫AddDoubÀ
 (
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
d
);

897 
FcPublic
 
FcBoﬁ


898 
	`FcP©ã∫AddSåög
 (
FcP©ã∫
 *
p
, c⁄° *
obje˘
, c⁄° 
FcCh¨8
 *
s
);

900 
FcPublic
 
FcBoﬁ


901 
	`FcP©ã∫AddM©rix
 (
FcP©ã∫
 *
p
, c⁄° *
obje˘
, c⁄° 
FcM©rix
 *
s
);

903 
FcPublic
 
FcBoﬁ


904 
	`FcP©ã∫AddCh¨Së
 (
FcP©ã∫
 *
p
, c⁄° *
obje˘
, c⁄° 
FcCh¨Së
 *
c
);

906 
FcPublic
 
FcBoﬁ


907 
	`FcP©ã∫AddBoﬁ
 (
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
FcBoﬁ
 
b
);

909 
FcPublic
 
FcBoﬁ


910 
	`FcP©ã∫AddL™gSë
 (
FcP©ã∫
 *
p
, c⁄° *
obje˘
, c⁄° 
FcL™gSë
 *
ls
);

912 
FcPublic
 
FcBoﬁ


913 
	`FcP©ã∫AddR™ge
 (
FcP©ã∫
 *
p
, c⁄° *
obje˘
, c⁄° 
FcR™ge
 *
r
);

915 
FcPublic
 
FcResu…


916 
	`FcP©ã∫GëI¡egî
 (c⁄° 
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
n
, *
i
);

918 
FcPublic
 
FcResu…


919 
	`FcP©ã∫GëDoubÀ
 (c⁄° 
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
n
, *
d
);

921 
FcPublic
 
FcResu…


922 
	`FcP©ã∫GëSåög
 (c⁄° 
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
n
, 
FcCh¨8
 ** 
s
);

924 
FcPublic
 
FcResu…


925 
	`FcP©ã∫GëM©rix
 (c⁄° 
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
n
, 
FcM©rix
 **
s
);

927 
FcPublic
 
FcResu…


928 
	`FcP©ã∫GëCh¨Së
 (c⁄° 
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
n
, 
FcCh¨Së
 **
c
);

930 
FcPublic
 
FcResu…


931 
	`FcP©ã∫GëBoﬁ
 (c⁄° 
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
n
, 
FcBoﬁ
 *
b
);

933 
FcPublic
 
FcResu…


934 
	`FcP©ã∫GëL™gSë
 (c⁄° 
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
n
, 
FcL™gSë
 **
ls
);

936 
FcPublic
 
FcResu…


937 
	`FcP©ã∫GëR™ge
 (c⁄° 
FcP©ã∫
 *
p
, c⁄° *
obje˘
, 
id
, 
FcR™ge
 **
r
);

939 
FcPublic
 
FcP©ã∫
 *

940 
	`FcP©ã∫VaBuûd
 (
FcP©ã∫
 *
p
, 
va_li°
 
va
);

942 
FcPublic
 
FcP©ã∫
 *

943 
	$FcP©ã∫Buûd
 (
FcP©ã∫
 *
p
, ...Ë
	`FC_ATTRIBUTE_SENTINEL
(0);

945 
FcPublic
 
FcCh¨8
 *

946 
	`FcP©ã∫F‹m©
 (
FcP©ã∫
 *
∑t
, c⁄° 
FcCh¨8
 *
f‹m©
);

949 
FcPublic
 
FcR™ge
 *

950 
	`FcR™geCª©eDoubÀ
 (
begö
, 
íd
);

952 
FcPublic
 
FcR™ge
 *

953 
	`FcR™geCª©eI¡egî
 (
FcCh¨32
 
begö
, FcCh¨32 
íd
);

955 
FcPublic
 

956 
	`FcR™geDe°roy
 (
FcR™ge
 *
ønge
);

958 
FcPublic
 
FcR™ge
 *

959 
	`FcR™geC›y
 (c⁄° 
FcR™ge
 *
r
);

961 
FcPublic
 
FcBoﬁ


962 
	`FcR™geGëDoubÀ
(c⁄° 
FcR™ge
 *
ønge
, *
begö
, *
íd
);

966 
FcPublic
 

967 
	`FcWeightFromO≥nTy≥
 (
Ÿ_weight
);

969 
FcPublic
 

970 
	`FcWeightFromO≥nTy≥DoubÀ
 (
Ÿ_weight
);

972 
FcPublic
 

973 
	`FcWeightToO≥nTy≥
 (
fc_weight
);

975 
FcPublic
 

976 
	`FcWeightToO≥nTy≥DoubÀ
 (
fc_weight
);

980 
FcPublic
 
FcCh¨8
 *

981 
	`FcSåC›y
 (c⁄° 
FcCh¨8
 *
s
);

983 
FcPublic
 
FcCh¨8
 *

984 
	`FcSåC›yFûíame
 (c⁄° 
FcCh¨8
 *
s
);

986 
FcPublic
 
FcCh¨8
 *

987 
	`FcSåPlus
 (c⁄° 
FcCh¨8
 *
s1
, c⁄° FcCh¨8 *
s2
);

989 
FcPublic
 

990 
	`FcSåFªe
 (
FcCh¨8
 *
s
);

993 
	#FcIsUµî
(
c
Ë((0101 <(cË&& (cË<0132))

	)

994 
	#FcIsLowî
(
c
Ë((0141 <(cË&& (cË<0172))

	)

995 
	#FcToLowî
(
c
Ë(
	`FcIsUµî
(cË? (cË- 0101 + 0141 : (c))

	)

997 
FcPublic
 
FcCh¨8
 *

998 
	`FcSåDownˇ£
 (c⁄° 
FcCh¨8
 *
s
);

1000 
FcPublic
 

1001 
	`FcSåCmpIgn‹eCa£
 (c⁄° 
FcCh¨8
 *
s1
, c⁄° FcCh¨8 *
s2
);

1003 
FcPublic
 

1004 
	`FcSåCmp
 (c⁄° 
FcCh¨8
 *
s1
, c⁄° FcCh¨8 *
s2
);

1006 
FcPublic
 c⁄° 
FcCh¨8
 *

1007 
	`FcSåSåIgn‹eCa£
 (c⁄° 
FcCh¨8
 *
s1
, c⁄° FcCh¨8 *
s2
);

1009 
FcPublic
 c⁄° 
FcCh¨8
 *

1010 
	`FcSåSå
 (c⁄° 
FcCh¨8
 *
s1
, c⁄° FcCh¨8 *
s2
);

1012 
FcPublic
 

1013 
	`FcUtf8ToUcs4
 (c⁄° 
FcCh¨8
 *
§c_‹ig
,

1014 
FcCh¨32
 *
d°
,

1015 
Àn
);

1017 
FcPublic
 
FcBoﬁ


1018 
	`FcUtf8Lí
 (c⁄° 
FcCh¨8
 *
°rög
,

1019 
Àn
,

1020 *
nch¨
,

1021 *
wch¨
);

1023 
	#FC_UTF8_MAX_LEN
 6

	)

1025 
FcPublic
 

1026 
	`FcUcs4ToUtf8
 (
FcCh¨32
 
ucs4
,

1027 
FcCh¨8
 
de°
[
FC_UTF8_MAX_LEN
]);

1029 
FcPublic
 

1030 
	`FcUtf16ToUcs4
 (c⁄° 
FcCh¨8
 *
§c_‹ig
,

1031 
FcEndün
 
ídün
,

1032 
FcCh¨32
 *
d°
,

1033 
Àn
);

1035 
FcPublic
 
FcBoﬁ


1036 
	`FcUtf16Lí
 (c⁄° 
FcCh¨8
 *
°rög
,

1037 
FcEndün
 
ídün
,

1038 
Àn
,

1039 *
nch¨
,

1040 *
wch¨
);

1042 
FcPublic
 
FcCh¨8
 *

1043 
	`FcSåDú«me
 (c⁄° 
FcCh¨8
 *
fûe
);

1045 
FcPublic
 
FcCh¨8
 *

1046 
	`FcSåBa£«me
 (c⁄° 
FcCh¨8
 *
fûe
);

1048 
FcPublic
 
FcSåSë
 *

1049 
	`FcSåSëCª©e
 ();

1051 
FcPublic
 
FcBoﬁ


1052 
	`FcSåSëMembî
 (
FcSåSë
 *
£t
, c⁄° 
FcCh¨8
 *
s
);

1054 
FcPublic
 
FcBoﬁ


1055 
	`FcSåSëEquÆ
 (
FcSåSë
 *
ß
, FcSåSë *
sb
);

1057 
FcPublic
 
FcBoﬁ


1058 
	`FcSåSëAdd
 (
FcSåSë
 *
£t
, c⁄° 
FcCh¨8
 *
s
);

1060 
FcPublic
 
FcBoﬁ


1061 
	`FcSåSëAddFûíame
 (
FcSåSë
 *
£t
, c⁄° 
FcCh¨8
 *
s
);

1063 
FcPublic
 
FcBoﬁ


1064 
	`FcSåSëDñ
 (
FcSåSë
 *
£t
, c⁄° 
FcCh¨8
 *
s
);

1066 
FcPublic
 

1067 
	`FcSåSëDe°roy
 (
FcSåSë
 *
£t
);

1069 
FcPublic
 
FcSåLi°
 *

1070 
	`FcSåLi°Cª©e
 (
FcSåSë
 *
£t
);

1072 
FcPublic
 

1073 
	`FcSåLi°Fú°
 (
FcSåLi°
 *
li°
);

1075 
FcPublic
 
FcCh¨8
 *

1076 
	`FcSåLi°Next
 (
FcSåLi°
 *
li°
);

1078 
FcPublic
 

1079 
	`FcSåLi°D⁄e
 (
FcSåLi°
 *
li°
);

1082 
FcPublic
 
FcBoﬁ


1083 
	`FcC⁄figP¨£AndLﬂd
 (
FcC⁄fig
 *
c⁄fig
, c⁄° 
FcCh¨8
 *
fûe
, 
FcBoﬁ
 
com∂aö
);

1085 
FcPublic
 
FcBoﬁ


1086 
	`FcC⁄figP¨£AndLﬂdFromMem‹y
 (
FcC⁄fig
 *
c⁄fig
,

1087 c⁄° 
FcCh¨8
 *
buf„r
,

1088 
FcBoﬁ
 
com∂aö
);

1090 
_FCFUNCPROTOEND


1092 #unde‡
FC_ATTRIBUTE_SENTINEL


1095 #i‚de‡
_FCINT_H_


1102 
	#FcC⁄figGëResˇnInvîvÆ
 
FcC⁄figGëResˇnInvîvÆ_REPLACE_BY_FcC⁄figGëResˇnI¡îvÆ


	)

1103 
	#FcC⁄figSëResˇnInvîvÆ
 
FcC⁄figSëResˇnInvîvÆ_REPLACE_BY_FcC⁄figSëResˇnI¡îvÆ


	)

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/ty≥s/sig£t_t.h
>

25 
	~<bôs/ty≥s/°ack_t.h
>

28 #ifde‡
__USE_MISC


29 
	#__˘x
(
Êd
Ë
	)
fld

31 
	#__˘x
(
Êd
Ë
__
 ## 
	)
fld

34 #ifde‡
__x86_64__


37 
__exãnsi⁄__
 
	tgªg_t
;

40 
	#__NGREG
 23

	)

41 #ifde‡
__USE_MISC


42 
	#NGREG
 
__NGREG


	)

46 
gªg_t
 
	tgªg£t_t
[
__NGREG
];

48 #ifde‡
__USE_GNU


52 
	mREG_R8
 = 0,

53 
	#REG_R8
 
REG_R8


	)

54 
	mREG_R9
,

55 
	#REG_R9
 
REG_R9


	)

56 
	mREG_R10
,

57 
	#REG_R10
 
REG_R10


	)

58 
	mREG_R11
,

59 
	#REG_R11
 
REG_R11


	)

60 
	mREG_R12
,

61 
	#REG_R12
 
REG_R12


	)

62 
	mREG_R13
,

63 
	#REG_R13
 
REG_R13


	)

64 
	mREG_R14
,

65 
	#REG_R14
 
REG_R14


	)

66 
	mREG_R15
,

67 
	#REG_R15
 
REG_R15


	)

68 
	mREG_RDI
,

69 
	#REG_RDI
 
REG_RDI


	)

70 
	mREG_RSI
,

71 
	#REG_RSI
 
REG_RSI


	)

72 
	mREG_RBP
,

73 
	#REG_RBP
 
REG_RBP


	)

74 
	mREG_RBX
,

75 
	#REG_RBX
 
REG_RBX


	)

76 
	mREG_RDX
,

77 
	#REG_RDX
 
REG_RDX


	)

78 
	mREG_RAX
,

79 
	#REG_RAX
 
REG_RAX


	)

80 
	mREG_RCX
,

81 
	#REG_RCX
 
REG_RCX


	)

82 
	mREG_RSP
,

83 
	#REG_RSP
 
REG_RSP


	)

84 
	mREG_RIP
,

85 
	#REG_RIP
 
REG_RIP


	)

86 
	mREG_EFL
,

87 
	#REG_EFL
 
REG_EFL


	)

88 
	mREG_CSGSFS
,

89 
	#REG_CSGSFS
 
REG_CSGSFS


	)

90 
	mREG_ERR
,

91 
	#REG_ERR
 
REG_ERR


	)

92 
	mREG_TRAPNO
,

93 
	#REG_TRAPNO
 
REG_TRAPNO


	)

94 
	mREG_OLDMASK
,

95 
	#REG_OLDMASK
 
REG_OLDMASK


	)

96 
	mREG_CR2


97 
	#REG_CR2
 
REG_CR2


	)

101 
	s_libc_Âxªg


103 
__˘x
(
signifiˇnd
)[4];

104 
__˘x
(
exp⁄ít
);

105 
	m__glibc_ª£rved1
[3];

108 
	s_libc_xmmªg


110 
__uöt32_t
 
__˘x
(
ñemít
)[4];

113 
	s_libc_Â°©e


116 
__uöt16_t
 
__˘x
(
cwd
);

117 
__uöt16_t
 
__˘x
(
swd
);

118 
__uöt16_t
 
__˘x
(
·w
);

119 
__uöt16_t
 
__˘x
(
f›
);

120 
__uöt64_t
 
__˘x
(
rù
);

121 
__uöt64_t
 
__˘x
(
rdp
);

122 
__uöt32_t
 
__˘x
(
mxc§
);

123 
__uöt32_t
 
__˘x
(
mx¸_mask
);

124 
_libc_Âxªg
 
	m_°
[8];

125 
_libc_xmmªg
 
	m_xmm
[16];

126 
__uöt32_t
 
	m__glibc_ª£rved1
[24];

130 
_libc_Â°©e
 *
	tÂªg£t_t
;

135 
gªg£t_t
 
__˘x
(
gªgs
);

137 
Âªg£t_t
 
__˘x
(
Âªgs
);

138 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

139 } 
	tmc⁄ãxt_t
;

142 
	suc⁄ãxt_t


144 
__˘x
(
uc_Êags
);

145 
uc⁄ãxt_t
 *
	muc_lök
;

146 
°ack_t
 
	muc_°ack
;

147 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

148 
sig£t_t
 
	muc_sigmask
;

149 
_libc_Â°©e
 
	m__Âªgs_mem
;

150 
__exãnsi⁄__
 
	m__s•
[4];

151 } 
	tuc⁄ãxt_t
;

156 
	tgªg_t
;

159 
	#__NGREG
 19

	)

160 #ifde‡
__USE_MISC


161 
	#NGREG
 
__NGREG


	)

165 
gªg_t
 
	tgªg£t_t
[
__NGREG
];

167 #ifde‡
__USE_GNU


171 
	mREG_GS
 = 0,

172 
	#REG_GS
 
REG_GS


	)

173 
	mREG_FS
,

174 
	#REG_FS
 
REG_FS


	)

175 
	mREG_ES
,

176 
	#REG_ES
 
REG_ES


	)

177 
	mREG_DS
,

178 
	#REG_DS
 
REG_DS


	)

179 
	mREG_EDI
,

180 
	#REG_EDI
 
REG_EDI


	)

181 
	mREG_ESI
,

182 
	#REG_ESI
 
REG_ESI


	)

183 
	mREG_EBP
,

184 
	#REG_EBP
 
REG_EBP


	)

185 
	mREG_ESP
,

186 
	#REG_ESP
 
REG_ESP


	)

187 
	mREG_EBX
,

188 
	#REG_EBX
 
REG_EBX


	)

189 
	mREG_EDX
,

190 
	#REG_EDX
 
REG_EDX


	)

191 
	mREG_ECX
,

192 
	#REG_ECX
 
REG_ECX


	)

193 
	mREG_EAX
,

194 
	#REG_EAX
 
REG_EAX


	)

195 
	mREG_TRAPNO
,

196 
	#REG_TRAPNO
 
REG_TRAPNO


	)

197 
	mREG_ERR
,

198 
	#REG_ERR
 
REG_ERR


	)

199 
	mREG_EIP
,

200 
	#REG_EIP
 
REG_EIP


	)

201 
	mREG_CS
,

202 
	#REG_CS
 
REG_CS


	)

203 
	mREG_EFL
,

204 
	#REG_EFL
 
REG_EFL


	)

205 
	mREG_UESP
,

206 
	#REG_UESP
 
REG_UESP


	)

207 
	mREG_SS


208 
	#REG_SS
 
REG_SS


	)

213 
	s_libc_Âªg


215 
__˘x
(
signifiˇnd
)[4];

216 
__˘x
(
exp⁄ít
);

219 
	s_libc_Â°©e


221 
__˘x
(
cw
);

222 
__˘x
(
sw
);

223 
__˘x
(
èg
);

224 
__˘x
(
ùoff
);

225 
__˘x
(
cs£l
);

226 
__˘x
(
d©aoff
);

227 
__˘x
(
d©a£l
);

228 
_libc_Âªg
 
	m_°
[8];

229 
__˘x
(
°©us
);

233 
_libc_Â°©e
 *
	tÂªg£t_t
;

238 
gªg£t_t
 
__˘x
(
gªgs
);

241 
Âªg£t_t
 
__˘x
(
Âªgs
);

242 
__˘x
(
ﬁdmask
);

243 
__˘x
(
¸2
);

244 } 
	tmc⁄ãxt_t
;

247 
	suc⁄ãxt_t


249 
__˘x
(
uc_Êags
);

250 
uc⁄ãxt_t
 *
	muc_lök
;

251 
°ack_t
 
	muc_°ack
;

252 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

253 
sig£t_t
 
	muc_sigmask
;

254 
_libc_Â°©e
 
	m__Âªgs_mem
;

255 
	m__s•
[4];

256 } 
	tuc⁄ãxt_t
;

260 #unde‡
__˘x


	@/usr/include/X11/Xmd.h

47 #i‚de‡
XMD_H


48 
	#XMD_H
 1

	)

56 #i‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

57 
	~<sys/iß_defs.h
>

60 #i‡
deföed
 (
_LP64
Ë|| deföed(
__LP64__
) || \

61 
deföed
(
__Æpha
Ë|| deföed(
__Æpha__
) || \

62 
deföed
(
__ü64__
Ë|| deföed(
ü64
) || \

63 
deföed
(
__•¨c64__
) || \

64 
deföed
(
__s390x__
) || \

65 
deföed
(
__amd64__
Ë|| deföed(
amd64
) || \

66 
	$deföed
(
__powîpc64__
)

67 #i‡!
	`deföed
(
__ILP32__
)

68 
	#LONG64


	)

86 
	#_SIZEOF
(
x
Ë
sz_
##
	)
x

87 
	#SIZEOF
(
x
Ë
	`_SIZEOF
(x)

	)

94 
	#B32


	)

95 
	#B16


	)

96 #ifde‡
LONG64


97 
	tINT64
;

98 
	tINT32
;

100 
	tINT32
;

102 
	tINT16
;

104 sig√d 
	tINT8
;

106 #ifde‡
LONG64


107 
	tCARD64
;

108 
	tCARD32
;

110 
	tCARD64
;

111 
	tCARD32
;

113 
	tCARD16
;

114 
	tCARD8
;

116 
CARD32
 
	tBITS32
;

117 
CARD16
 
	tBITS16
;

119 
CARD8
 
	tBYTE
;

120 
CARD8
 
	tBOOL
;

126 
	#cvtINT8toI¡
(
vÆ
Ë(vÆ)

	)

127 
	#cvtINT16toI¡
(
vÆ
Ë(vÆ)

	)

128 
	#cvtINT32toI¡
(
vÆ
Ë(vÆ)

	)

129 
	#cvtINT8toSh‹t
(
vÆ
Ë(vÆ)

	)

130 
	#cvtINT16toSh‹t
(
vÆ
Ë(vÆ)

	)

131 
	#cvtINT32toSh‹t
(
vÆ
Ë(vÆ)

	)

132 
	#cvtINT8toL⁄g
(
vÆ
Ë(vÆ)

	)

133 
	#cvtINT16toL⁄g
(
vÆ
Ë(vÆ)

	)

134 
	#cvtINT32toL⁄g
(
vÆ
Ë(vÆ)

	)

140 
	#NEXTPTR
(
p
,
t
Ë((— *)’)Ë+ 1)

	)

	@/usr/include/X11/Xutil.h

49 #i‚de‡
_X11_XUTIL_H_


50 
	#_X11_XUTIL_H_


	)

53 
	~<X11/Xlib.h
>

54 
	~<X11/keysym.h
>

59 #ifde‡
__˛™g__


60 #¥agm®
˛™g
 
dügno°ic
 
push


61 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

68 
	#NoVÆue
 0x0000

	)

69 
	#XVÆue
 0x0001

	)

70 
	#YVÆue
 0x0002

	)

71 
	#WidthVÆue
 0x0004

	)

72 
	#HeightVÆue
 0x0008

	)

73 
	#AŒVÆues
 0x000F

	)

74 
	#XNeg©ive
 0x0010

	)

75 
	#YNeg©ive
 0x0020

	)

82 
	mÊags
;

83 
	mx
, 
	my
;

84 
	mwidth
, 
	mheight
;

85 
	mmö_width
, 
	mmö_height
;

86 
	mmax_width
, 
	mmax_height
;

87 
	mwidth_öc
, 
	mheight_öc
;

89 
	mx
;

90 
	my
;

91 } 
	mmö_a•e˘
, 
	mmax_a•e˘
;

92 
	mba£_width
, 
	mba£_height
;

93 
	mwö_gøvôy
;

94 } 
	tXSizeHöts
;

102 
	#USPosôi⁄
 (1L << 0Ë

	)

103 
	#USSize
 (1L << 1Ë

	)

105 
	#PPosôi⁄
 (1L << 2Ë

	)

106 
	#PSize
 (1L << 3Ë

	)

107 
	#PMöSize
 (1L << 4Ë

	)

108 
	#PMaxSize
 (1L << 5Ë

	)

109 
	#PResizeInc
 (1L << 6Ë

	)

110 
	#PA•e˘
 (1L << 7Ë

	)

111 
	#PBa£Size
 (1L << 8Ë

	)

112 
	#PWöGøvôy
 (1L << 9Ë

	)

115 
	#PAŒHöts
 (
PPosôi⁄
|
PSize
|
PMöSize
|
PMaxSize
|
PResizeInc
|
PA•e˘
)

	)

120 
	mÊags
;

121 
Boﬁ
 
	möput
;

123 
	möôül_°©e
;

124 
Pixm≠
 
	mic⁄_pixm≠
;

125 
Wödow
 
	mic⁄_wödow
;

126 
	mic⁄_x
, 
	mic⁄_y
;

127 
Pixm≠
 
	mic⁄_mask
;

128 
XID
 
	mwödow_group
;

130 } 
	tXWMHöts
;

134 
	#I≈utHöt
 (1L << 0)

	)

135 
	#SèãHöt
 (1L << 1)

	)

136 
	#Ic⁄Pixm≠Höt
 (1L << 2)

	)

137 
	#Ic⁄WödowHöt
 (1L << 3)

	)

138 
	#Ic⁄Posôi⁄Höt
 (1L << 4)

	)

139 
	#Ic⁄MaskHöt
 (1L << 5)

	)

140 
	#WödowGroupHöt
 (1L << 6)

	)

141 
	#AŒHöts
 (
I≈utHöt
|
SèãHöt
|
Ic⁄Pixm≠Höt
|
Ic⁄WödowHöt
| \

142 
Ic⁄Posôi⁄Höt
|
Ic⁄MaskHöt
|
WödowGroupHöt
)

	)

143 
	#XUrgícyHöt
 (1L << 8)

	)

146 
	#WôhdøwnSèã
 0

	)

147 
	#N‹mÆSèã
 1

	)

148 
	#Ic⁄icSèã
 3

	)

153 
	#D⁄tC¨eSèã
 0

	)

154 
	#ZoomSèã
 2

	)

155 
	#I«˘iveSèã
 4

	)

164 *
	mvÆue
;

165 
Atom
 
	mícodög
;

166 
	mf‹m©
;

167 
	mnôems
;

168 } 
	tXTextPr›îty
;

170 
	#XNoMem‹y
 -1

	)

171 
	#XLoˇÀNŸSuµ‹ãd
 -2

	)

172 
	#XC⁄vîãrNŸFound
 -3

	)

175 
	mXSåögStyÀ
,

176 
	mXCompoundTextStyÀ
,

177 
	mXTextStyÀ
,

178 
	mXStdICCTextStyÀ
,

180 
	mXUTF8SåögStyÀ


181 } 
	tXICCEncodögStyÀ
;

184 
	mmö_width
, 
	mmö_height
;

185 
	mmax_width
, 
	mmax_height
;

186 
	mwidth_öc
, 
	mheight_öc
;

187 } 
	tXIc⁄Size
;

190 *
	mªs_«me
;

191 *
	mªs_˛ass
;

192 } 
	tXCœssHöt
;

194 #ifde‡
XUTIL_DEFINE_FUNCTIONS


195 
XDe°royImage
(

196 
XImage
 *
ximage
);

197 
XGëPixñ
(

198 
XImage
 *
ximage
,

199 
x
, 
y
);

200 
XPutPixñ
(

201 
XImage
 *
ximage
,

202 
x
, 
y
,

203 
pixñ
);

204 
XImage
 *
XSubImage
(

205 
XImage
 *
ximage
,

206 
x
, 
y
,

207 
width
, 
height
);

208 
XAddPixñ
(

209 
XImage
 *
ximage
,

210 
vÆue
);

216 
	#XDe°royImage
(
ximage
) \

217 ((*((
ximage
)->
f
.
de°roy_image
))((ximage)))

	)

218 
	#XGëPixñ
(
ximage
, 
x
, 
y
) \

219 ((*((
ximage
)->
f
.
gë_pixñ
))((ximage), (
x
), (
y
)))

	)

220 
	#XPutPixñ
(
ximage
, 
x
, 
y
, 
pixñ
) \

221 ((*((
ximage
)->
f
.
put_pixñ
))((ximage), (
x
), (
y
), (
pixñ
)))

	)

222 
	#XSubImage
(
ximage
, 
x
, 
y
, 
width
, 
height
) \

223 ((*((
ximage
)->
f
.
sub_image
))((ximage), (
x
), (
y
), (
width
), (
height
)))

	)

224 
	#XAddPixñ
(
ximage
, 
vÆue
) \

225 ((*((
ximage
)->
f
.
add_pixñ
))((ximage), (
vÆue
)))

	)

231 
	s_XCompo£Sètus
 {

232 
XPoöãr
 
	mcompo£_±r
;

233 
	mch¨s_m©ched
;

234 } 
	tXCompo£Sètus
;

239 
	#IsKey∑dKey
(
keysym
) \

240 (((
KeySym
)(
keysym
Ë>
XK_KP_S∑˚
Ë&& ((KeySym)(keysymË<
XK_KP_EquÆ
))

	)

242 
	#IsPriv©eKey∑dKey
(
keysym
) \

243 (((
KeySym
)(
keysym
Ë>0x11000000Ë&& ((KeySym)(keysymË<0x1100FFFF))

	)

245 
	#IsCurs‹Key
(
keysym
) \

246 (((
KeySym
)(
keysym
Ë>
XK_Home
Ë&& ((KeySym)(keysymË< 
XK_Sñe˘
))

	)

248 
	#IsPFKey
(
keysym
) \

249 (((
KeySym
)(
keysym
Ë>
XK_KP_F1
Ë&& ((KeySym)(keysymË<
XK_KP_F4
))

	)

251 
	#IsFun˘i⁄Key
(
keysym
) \

252 (((
KeySym
)(
keysym
Ë>
XK_F1
Ë&& ((KeySym)(keysymË<
XK_F35
))

	)

254 
	#IsMiscFun˘i⁄Key
(
keysym
) \

255 (((
KeySym
)(
keysym
Ë>
XK_Sñe˘
Ë&& ((KeySym)(keysymË<
XK_Bªak
))

	)

257 #ifde‡
XK_XKB_KEYS


258 
	#IsModifõrKey
(
keysym
) \

259 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

260 || (((
KeySym
)(
keysym
Ë>
XK_ISO_Lock
) && \

261 ((
KeySym
)(
keysym
Ë<
XK_ISO_Levñ5_Lock
)) \

262 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

263 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

265 
	#IsModifõrKey
(
keysym
) \

266 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

267 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

268 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

273 
_XRegi⁄
 *
	tRegi⁄
;

277 
	#Re˘™gÀOut
 0

	)

278 
	#Re˘™gÀIn
 1

	)

279 
	#Re˘™gÀP¨t
 2

	)

288 
VisuÆ
 *
	mvisuÆ
;

289 
VisuÆID
 
	mvisuÆid
;

290 
	ms¸ìn
;

291 
	mdïth
;

292 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

293 
	mc_˛ass
;

295 
	m˛ass
;

297 
	mªd_mask
;

298 
	mgªí_mask
;

299 
	mblue_mask
;

300 
	mcﬁ‹m≠_size
;

301 
	mbôs_≥r_rgb
;

302 } 
	tXVisuÆInfo
;

304 
	#VisuÆNoMask
 0x0

	)

305 
	#VisuÆIDMask
 0x1

	)

306 
	#VisuÆS¸ìnMask
 0x2

	)

307 
	#VisuÆDïthMask
 0x4

	)

308 
	#VisuÆCœssMask
 0x8

	)

309 
	#VisuÆRedMaskMask
 0x10

	)

310 
	#VisuÆGªíMaskMask
 0x20

	)

311 
	#VisuÆBlueMaskMask
 0x40

	)

312 
	#VisuÆCﬁ‹m≠SizeMask
 0x80

	)

313 
	#VisuÆBôsPîRGBMask
 0x100

	)

314 
	#VisuÆAŒMask
 0x1FF

	)

321 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

322 
	mªd_max
;

323 
	mªd_mu…
;

324 
	mgªí_max
;

325 
	mgªí_mu…
;

326 
	mblue_max
;

327 
	mblue_mu…
;

328 
	mba£_pixñ
;

329 
VisuÆID
 
	mvisuÆid
;

330 
XID
 
	mkûlid
;

331 } 
	tXSènd¨dCﬁ‹m≠
;

333 
	#Rñó£ByFªeögCﬁ‹m≠
 ((
XID
Ë1LË

	)

339 
	#Bôm≠Suc˚ss
 0

	)

340 
	#Bôm≠O≥nFaûed
 1

	)

341 
	#Bôm≠FûeInvÆid
 2

	)

342 
	#Bôm≠NoMem‹y
 3

	)

353 
	#XCSUCCESS
 0

	)

354 
	#XCNOMEM
 1

	)

355 
	#XCNOENT
 2

	)

357 
	tXC⁄ãxt
;

359 
	#XUniqueC⁄ãxt
(Ë((
XC⁄ãxt
Ë
	`XrmUniqueQu¨k
())

	)

360 
	#XSåögToC⁄ãxt
(
°rög
Ë((
XC⁄ãxt
Ë
	`XrmSåögToQu¨k
(°rög))

	)

362 
_XFUNCPROTOBEGIN


366 
XCœssHöt
 *
XAŒocCœssHöt
 (

370 
XIc⁄Size
 *
XAŒocIc⁄Size
 (

374 
XSizeHöts
 *
XAŒocSizeHöts
 (

378 
XSènd¨dCﬁ‹m≠
 *
XAŒocSènd¨dCﬁ‹m≠
 (

382 
XWMHöts
 *
XAŒocWMHöts
 (

386 
XClùBox
(

387 
Regi⁄
 ,

388 
XRe˘™gÀ
*

391 
Regi⁄
 
XCª©eRegi⁄
(

395 c⁄° *
XDeÁu…Såög
 ();

397 
XDñëeC⁄ãxt
(

398 
Di•œy
* ,

399 
XID
 ,

400 
XC⁄ãxt


403 
XDe°royRegi⁄
(

404 
Regi⁄


407 
XEm±yRegi⁄
(

408 
Regi⁄


411 
XEquÆRegi⁄
(

412 
Regi⁄
 ,

413 
Regi⁄


416 
XFödC⁄ãxt
(

417 
Di•œy
* ,

418 
XID
 ,

419 
XC⁄ãxt
 ,

420 
XPoöãr
*

423 
Sètus
 
XGëCœssHöt
(

424 
Di•œy
* ,

425 
Wödow
 ,

426 
XCœssHöt
*

429 
Sètus
 
XGëIc⁄Sizes
(

430 
Di•œy
* ,

431 
Wödow
 ,

432 
XIc⁄Size
** ,

436 
Sètus
 
XGëN‹mÆHöts
(

437 
Di•œy
* ,

438 
Wödow
 ,

439 
XSizeHöts
*

442 
Sètus
 
XGëRGBCﬁ‹m≠s
(

443 
Di•œy
* ,

444 
Wödow
 ,

445 
XSènd¨dCﬁ‹m≠
** ,

447 
Atom


450 
Sètus
 
XGëSizeHöts
(

451 
Di•œy
* ,

452 
Wödow
 ,

453 
XSizeHöts
* ,

454 
Atom


457 
Sètus
 
XGëSènd¨dCﬁ‹m≠
(

458 
Di•œy
* ,

459 
Wödow
 ,

460 
XSènd¨dCﬁ‹m≠
* ,

461 
Atom


464 
Sètus
 
XGëTextPr›îty
(

465 
Di•œy
* ,

466 
Wödow
 ,

467 
XTextPr›îty
* ,

468 
Atom


471 
XVisuÆInfo
 *
XGëVisuÆInfo
(

472 
Di•œy
* ,

474 
XVisuÆInfo
* ,

478 
Sètus
 
XGëWMClõ¡Machöe
(

479 
Di•œy
* ,

480 
Wödow
 ,

481 
XTextPr›îty
*

484 
XWMHöts
 *
XGëWMHöts
(

485 
Di•œy
* ,

486 
Wödow


489 
Sètus
 
XGëWMIc⁄Name
(

490 
Di•œy
* ,

491 
Wödow
 ,

492 
XTextPr›îty
*

495 
Sètus
 
XGëWMName
(

496 
Di•œy
* ,

497 
Wödow
 ,

498 
XTextPr›îty
*

501 
Sètus
 
XGëWMN‹mÆHöts
(

502 
Di•œy
* ,

503 
Wödow
 ,

504 
XSizeHöts
* ,

508 
Sètus
 
XGëWMSizeHöts
(

509 
Di•œy
* ,

510 
Wödow
 ,

511 
XSizeHöts
* ,

513 
Atom


516 
Sètus
 
XGëZoomHöts
(

517 
Di•œy
* ,

518 
Wödow
 ,

519 
XSizeHöts
*

522 
XI¡î£˘Regi⁄
(

523 
Regi⁄
 ,

524 
Regi⁄
 ,

525 
Regi⁄


528 
XC⁄vîtCa£
(

529 
KeySym
 ,

530 
KeySym
* ,

531 
KeySym
*

534 
XLookupSåög
(

535 
XKeyEvít
* ,

538 
KeySym
* ,

539 
XCompo£Sètus
*

542 
Sètus
 
XM©chVisuÆInfo
(

543 
Di•œy
* ,

547 
XVisuÆInfo
*

550 
XOff£tRegi⁄
(

551 
Regi⁄
 ,

556 
Boﬁ
 
XPoötInRegi⁄
(

557 
Regi⁄
 ,

562 
Regi⁄
 
XPﬁyg⁄Regi⁄
(

563 
XPoöt
* ,

568 
XRe˘InRegi⁄
(

569 
Regi⁄
 ,

576 
XSaveC⁄ãxt
(

577 
Di•œy
* ,

578 
XID
 ,

579 
XC⁄ãxt
 ,

580 
_Xc⁄°
 *

583 
XSëCœssHöt
(

584 
Di•œy
* ,

585 
Wödow
 ,

586 
XCœssHöt
*

589 
XSëIc⁄Sizes
(

590 
Di•œy
* ,

591 
Wödow
 ,

592 
XIc⁄Size
* ,

596 
XSëN‹mÆHöts
(

597 
Di•œy
* ,

598 
Wödow
 ,

599 
XSizeHöts
*

602 
XSëRGBCﬁ‹m≠s
(

603 
Di•œy
* ,

604 
Wödow
 ,

605 
XSènd¨dCﬁ‹m≠
* ,

607 
Atom


610 
XSëSizeHöts
(

611 
Di•œy
* ,

612 
Wödow
 ,

613 
XSizeHöts
* ,

614 
Atom


617 
XSëSènd¨dPr›îtõs
(

618 
Di•œy
* ,

619 
Wödow
 ,

620 
_Xc⁄°
 * ,

621 
_Xc⁄°
 * ,

622 
Pixm≠
 ,

625 
XSizeHöts
*

628 
XSëTextPr›îty
(

629 
Di•œy
* ,

630 
Wödow
 ,

631 
XTextPr›îty
* ,

632 
Atom


635 
XSëWMClõ¡Machöe
(

636 
Di•œy
* ,

637 
Wödow
 ,

638 
XTextPr›îty
*

641 
XSëWMHöts
(

642 
Di•œy
* ,

643 
Wödow
 ,

644 
XWMHöts
*

647 
XSëWMIc⁄Name
(

648 
Di•œy
* ,

649 
Wödow
 ,

650 
XTextPr›îty
*

653 
XSëWMName
(

654 
Di•œy
* ,

655 
Wödow
 ,

656 
XTextPr›îty
*

659 
XSëWMN‹mÆHöts
(

660 
Di•œy
* ,

661 
Wödow
 ,

662 
XSizeHöts
*

665 
XSëWMPr›îtõs
(

666 
Di•œy
* ,

667 
Wödow
 ,

668 
XTextPr›îty
* ,

669 
XTextPr›îty
* ,

672 
XSizeHöts
* ,

673 
XWMHöts
* ,

674 
XCœssHöt
*

677 
XmbSëWMPr›îtõs
(

678 
Di•œy
* ,

679 
Wödow
 ,

680 
_Xc⁄°
 * ,

681 
_Xc⁄°
 * ,

684 
XSizeHöts
* ,

685 
XWMHöts
* ,

686 
XCœssHöt
*

689 
Xutf8SëWMPr›îtõs
(

690 
Di•œy
* ,

691 
Wödow
 ,

692 
_Xc⁄°
 * ,

693 
_Xc⁄°
 * ,

696 
XSizeHöts
* ,

697 
XWMHöts
* ,

698 
XCœssHöt
*

701 
XSëWMSizeHöts
(

702 
Di•œy
* ,

703 
Wödow
 ,

704 
XSizeHöts
* ,

705 
Atom


708 
XSëRegi⁄
(

709 
Di•œy
* ,

710 
GC
 ,

711 
Regi⁄


714 
XSëSènd¨dCﬁ‹m≠
(

715 
Di•œy
* ,

716 
Wödow
 ,

717 
XSènd¨dCﬁ‹m≠
* ,

718 
Atom


721 
XSëZoomHöts
(

722 
Di•œy
* ,

723 
Wödow
 ,

724 
XSizeHöts
*

727 
XShrökRegi⁄
(

728 
Regi⁄
 ,

733 
Sètus
 
XSåögLi°ToTextPr›îty
(

736 
XTextPr›îty
*

739 
XSubåa˘Regi⁄
(

740 
Regi⁄
 ,

741 
Regi⁄
 ,

742 
Regi⁄


745 
XmbTextLi°ToTextPr›îty
(

746 
Di•œy
* 
di•œy
,

747 ** 
li°
,

748 
cou¡
,

749 
XICCEncodögStyÀ
 
°yÀ
,

750 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


753 
XwcTextLi°ToTextPr›îty
(

754 
Di•œy
* 
di•œy
,

755 
wch¨_t
** 
li°
,

756 
cou¡
,

757 
XICCEncodögStyÀ
 
°yÀ
,

758 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


761 
Xutf8TextLi°ToTextPr›îty
(

762 
Di•œy
* 
di•œy
,

763 ** 
li°
,

764 
cou¡
,

765 
XICCEncodögStyÀ
 
°yÀ
,

766 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


769 
XwcFªeSåögLi°
(

770 
wch¨_t
** 
li°


773 
Sètus
 
XTextPr›îtyToSåögLi°
(

774 
XTextPr›îty
* ,

779 
XmbTextPr›îtyToTextLi°
(

780 
Di•œy
* 
di•œy
,

781 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

782 *** 
li°_ªtu∫
,

783 * 
cou¡_ªtu∫


786 
XwcTextPr›îtyToTextLi°
(

787 
Di•œy
* 
di•œy
,

788 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

789 
wch¨_t
*** 
li°_ªtu∫
,

790 * 
cou¡_ªtu∫


793 
Xutf8TextPr›îtyToTextLi°
(

794 
Di•œy
* 
di•œy
,

795 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

796 *** 
li°_ªtu∫
,

797 * 
cou¡_ªtu∫


800 
XUni⁄Re˘WôhRegi⁄
(

801 
XRe˘™gÀ
* ,

802 
Regi⁄
 ,

803 
Regi⁄


806 
XUni⁄Regi⁄
(

807 
Regi⁄
 ,

808 
Regi⁄
 ,

809 
Regi⁄


812 
XWMGeomëry
(

813 
Di•œy
* ,

815 
_Xc⁄°
 * ,

816 
_Xc⁄°
 * ,

818 
XSizeHöts
* ,

826 
XX‹Regi⁄
(

827 
Regi⁄
 ,

828 
Regi⁄
 ,

829 
Regi⁄


832 #ifde‡
__˛™g__


833 #¥agm®
˛™g
 
dügno°ic
 
p›


836 
	g_XFUNCPROTOEND


	@/usr/include/X11/extensions/XKB.h

27 #i‚de‡
_XKB_H_


28 
	#_XKB_H_


	)

35 
	#X_kbU£Exãnsi⁄
 0

	)

36 
	#X_kbSñe˘Evíts
 1

	)

37 
	#X_kbBñl
 3

	)

38 
	#X_kbGëSèã
 4

	)

39 
	#X_kbL©chLockSèã
 5

	)

40 
	#X_kbGëC⁄åﬁs
 6

	)

41 
	#X_kbSëC⁄åﬁs
 7

	)

42 
	#X_kbGëM≠
 8

	)

43 
	#X_kbSëM≠
 9

	)

44 
	#X_kbGëCom∑tM≠
 10

	)

45 
	#X_kbSëCom∑tM≠
 11

	)

46 
	#X_kbGëIndiˇt‹Sèã
 12

	)

47 
	#X_kbGëIndiˇt‹M≠
 13

	)

48 
	#X_kbSëIndiˇt‹M≠
 14

	)

49 
	#X_kbGëNamedIndiˇt‹
 15

	)

50 
	#X_kbSëNamedIndiˇt‹
 16

	)

51 
	#X_kbGëNames
 17

	)

52 
	#X_kbSëNames
 18

	)

53 
	#X_kbGëGeomëry
 19

	)

54 
	#X_kbSëGeomëry
 20

	)

55 
	#X_kbPîClõ¡Fœgs
 21

	)

56 
	#X_kbLi°Comp⁄íts
 22

	)

57 
	#X_kbGëKbdByName
 23

	)

58 
	#X_kbGëDevi˚Info
 24

	)

59 
	#X_kbSëDevi˚Info
 25

	)

60 
	#X_kbSëDebuggögFœgs
 101

	)

66 
	#XkbEvítCode
 0

	)

67 
	#XkbNumbîEvíts
 (
XkbEvítCode
+1)

	)

76 
	#XkbNewKeybﬂrdNŸify
 0

	)

77 
	#XkbM≠NŸify
 1

	)

78 
	#XkbSèãNŸify
 2

	)

79 
	#XkbC⁄åﬁsNŸify
 3

	)

80 
	#XkbIndiˇt‹SèãNŸify
 4

	)

81 
	#XkbIndiˇt‹M≠NŸify
 5

	)

82 
	#XkbNamesNŸify
 6

	)

83 
	#XkbCom∑tM≠NŸify
 7

	)

84 
	#XkbBñlNŸify
 8

	)

85 
	#XkbA˘i⁄Mesßge
 9

	)

86 
	#XkbAc˚ssXNŸify
 10

	)

87 
	#XkbExãnsi⁄Devi˚NŸify
 11

	)

93 
	#XkbNewKeybﬂrdNŸifyMask
 (1L << 0)

	)

94 
	#XkbM≠NŸifyMask
 (1L << 1)

	)

95 
	#XkbSèãNŸifyMask
 (1L << 2)

	)

96 
	#XkbC⁄åﬁsNŸifyMask
 (1L << 3)

	)

97 
	#XkbIndiˇt‹SèãNŸifyMask
 (1L << 4)

	)

98 
	#XkbIndiˇt‹M≠NŸifyMask
 (1L << 5)

	)

99 
	#XkbNamesNŸifyMask
 (1L << 6)

	)

100 
	#XkbCom∑tM≠NŸifyMask
 (1L << 7)

	)

101 
	#XkbBñlNŸifyMask
 (1L << 8)

	)

102 
	#XkbA˘i⁄MesßgeMask
 (1L << 9)

	)

103 
	#XkbAc˚ssXNŸifyMask
 (1L << 10)

	)

104 
	#XkbExãnsi⁄Devi˚NŸifyMask
 (1L << 11)

	)

105 
	#XkbAŒEvítsMask
 (0xFFF)

	)

110 
	#XkbNKN_KeycodesMask
 (1L << 0)

	)

111 
	#XkbNKN_GeomëryMask
 (1L << 1)

	)

112 
	#XkbNKN_Devi˚IDMask
 (1L << 2)

	)

113 
	#XkbAŒNewKeybﬂrdEvítsMask
 (0x7)

	)

120 
	#XkbAXN_SKPªss
 0

	)

121 
	#XkbAXN_SKAc˚±
 1

	)

122 
	#XkbAXN_SKReje˘
 2

	)

123 
	#XkbAXN_SKRñó£
 3

	)

124 
	#XkbAXN_BKAc˚±
 4

	)

125 
	#XkbAXN_BKReje˘
 5

	)

126 
	#XkbAXN_AXKW¨nög
 6

	)

133 
	#XkbAXN_SKPªssMask
 (1L << 0)

	)

134 
	#XkbAXN_SKAc˚±Mask
 (1L << 1)

	)

135 
	#XkbAXN_SKReje˘Mask
 (1L << 2)

	)

136 
	#XkbAXN_SKRñó£Mask
 (1L << 3)

	)

137 
	#XkbAXN_BKAc˚±Mask
 (1L << 4)

	)

138 
	#XkbAXN_BKReje˘Mask
 (1L << 5)

	)

139 
	#XkbAXN_AXKW¨nögMask
 (1L << 6)

	)

140 
	#XkbAŒAc˚ssXEvítsMask
 (0x7f)

	)

147 
	#XkbAŒSèãEvítsMask
 
XkbAŒSèãComp⁄ítsMask


	)

148 
	#XkbAŒM≠EvítsMask
 
XkbAŒM≠Comp⁄ítsMask


	)

149 
	#XkbAŒC⁄åﬁEvítsMask
 
XkbAŒC⁄åﬁsMask


	)

150 
	#XkbAŒIndiˇt‹EvítsMask
 
XkbAŒIndiˇt‹sMask


	)

151 
	#XkbAŒNameEvítsMask
 
XkbAŒNamesMask


	)

152 
	#XkbAŒCom∑tM≠EvítsMask
 
XkbAŒCom∑tMask


	)

153 
	#XkbAŒBñlEvítsMask
 (1L << 0)

	)

154 
	#XkbAŒA˘i⁄MesßgesMask
 (1L << 0)

	)

169 
	#XkbKeybﬂrd
 0

	)

170 
	#XkbNumbîEº‹s
 1

	)

172 
	#XkbEº_BadDevi˚
 0xff

	)

173 
	#XkbEº_BadCœss
 0x„

	)

174 
	#XkbEº_BadId
 0xfd

	)

180 
	#XkbClõ¡M≠Mask
 (1L << 0)

	)

181 
	#XkbSîvîM≠Mask
 (1L << 1)

	)

182 
	#XkbCom∑tM≠Mask
 (1L << 2)

	)

183 
	#XkbIndiˇt‹M≠Mask
 (1L << 3)

	)

184 
	#XkbNamesMask
 (1L << 4)

	)

185 
	#XkbGeomëryMask
 (1L << 5)

	)

186 
	#XkbC⁄åﬁsMask
 (1L << 6)

	)

187 
	#XkbAŒComp⁄ítsMask
 (0x7f)

	)

196 
	#XkbModifõrSèãMask
 (1L << 0)

	)

197 
	#XkbModifõrBa£Mask
 (1L << 1)

	)

198 
	#XkbModifõrL©chMask
 (1L << 2)

	)

199 
	#XkbModifõrLockMask
 (1L << 3)

	)

200 
	#XkbGroupSèãMask
 (1L << 4)

	)

201 
	#XkbGroupBa£Mask
 (1L << 5)

	)

202 
	#XkbGroupL©chMask
 (1L << 6)

	)

203 
	#XkbGroupLockMask
 (1L << 7)

	)

204 
	#XkbCom∑tSèãMask
 (1L << 8)

	)

205 
	#XkbGøbModsMask
 (1L << 9)

	)

206 
	#XkbCom∑tGøbModsMask
 (1L << 10)

	)

207 
	#XkbLookupModsMask
 (1L << 11)

	)

208 
	#XkbCom∑tLookupModsMask
 (1L << 12)

	)

209 
	#XkbPoöãrBuâ⁄Mask
 (1L << 13)

	)

210 
	#XkbAŒSèãComp⁄ítsMask
 (0x3fff)

	)

240 
	#XkbRïótKeysMask
 (1L << 0)

	)

241 
	#XkbSlowKeysMask
 (1L << 1)

	)

242 
	#XkbBoun˚KeysMask
 (1L << 2)

	)

243 
	#XkbStickyKeysMask
 (1L << 3)

	)

244 
	#XkbMou£KeysMask
 (1L << 4)

	)

245 
	#XkbMou£KeysAc˚lMask
 (1L << 5)

	)

246 
	#XkbAc˚ssXKeysMask
 (1L << 6)

	)

247 
	#XkbAc˚ssXTimeoutMask
 (1L << 7)

	)

248 
	#XkbAc˚ssXFìdbackMask
 (1L << 8)

	)

249 
	#XkbAudibÀBñlMask
 (1L << 9)

	)

250 
	#XkbOvîœy1Mask
 (1L << 10)

	)

251 
	#XkbOvîœy2Mask
 (1L << 11)

	)

252 
	#XkbIgn‹eGroupLockMask
 (1L << 12)

	)

253 
	#XkbGroupsWøpMask
 (1L << 27)

	)

254 
	#XkbI¡î«lModsMask
 (1L << 28)

	)

255 
	#XkbIgn‹eLockModsMask
 (1L << 29)

	)

256 
	#XkbPîKeyRïótMask
 (1L << 30)

	)

257 
	#XkbC⁄åﬁsE«bÀdMask
 (1L << 31)

	)

259 
	#XkbAc˚ssXO±i⁄sMask
 (
XkbStickyKeysMask
|
XkbAc˚ssXFìdbackMask
)

	)

261 
	#XkbAŒBoﬁónCålsMask
 (0x00001FFF)

	)

262 
	#XkbAŒC⁄åﬁsMask
 (0xF8001FFF)

	)

263 
	#XkbAŒC⁄åﬁEvítsMask
 
XkbAŒC⁄åﬁsMask


	)

274 
	#XkbAX_SKPªssFBMask
 (1L << 0)

	)

275 
	#XkbAX_SKAc˚±FBMask
 (1L << 1)

	)

276 
	#XkbAX_FótuªFBMask
 (1L << 2)

	)

277 
	#XkbAX_SlowW¨nFBMask
 (1L << 3)

	)

278 
	#XkbAX_Indiˇt‹FBMask
 (1L << 4)

	)

279 
	#XkbAX_StickyKeysFBMask
 (1L << 5)

	)

280 
	#XkbAX_TwoKeysMask
 (1L << 6)

	)

281 
	#XkbAX_L©chToLockMask
 (1L << 7)

	)

282 
	#XkbAX_SKRñó£FBMask
 (1L << 8)

	)

283 
	#XkbAX_SKReje˘FBMask
 (1L << 9)

	)

284 
	#XkbAX_BKReje˘FBMask
 (1L << 10)

	)

285 
	#XkbAX_DumbBñlFBMask
 (1L << 11)

	)

286 
	#XkbAX_FBO±i⁄sMask
 (0xF3F)

	)

287 
	#XkbAX_SKO±i⁄sMask
 (0x0C0)

	)

288 
	#XkbAX_AŒO±i⁄sMask
 (0xFFF)

	)

317 
	#XkbU£C‹eKbd
 0x0100

	)

318 
	#XkbU£C‹ePå
 0x0200

	)

319 
	#XkbDÊtXICœss
 0x0300

	)

320 
	#XkbDÊtXIId
 0x0400

	)

321 
	#XkbAŒXICœs£s
 0x0500

	)

322 
	#XkbAŒXIIds
 0x0600

	)

323 
	#XkbXIN⁄e
 0xff00

	)

325 
	#XkbLegÆXILedCœss
(
c
Ë(((c)==
KbdFìdbackCœss
)||\

326 ((
c
)==
LedFìdbackCœss
)||\

327 ((
c
)==
XkbDÊtXICœss
)||\

328 ((
c
)==
XkbAŒXICœs£s
))

	)

329 
	#XkbLegÆXIBñlCœss
(
c
Ë(((c)==
KbdFìdbackCœss
)||\

330 ((
c
)==
BñlFìdbackCœss
)||\

331 ((
c
)==
XkbDÊtXICœss
)||\

332 ((
c
)==
XkbAŒXICœs£s
))

	)

333 
	#XkbEx∂icôXIDevi˚
(
c
Ë(((c)&(~0xff))==0)

	)

334 
	#XkbEx∂icôXICœss
(
c
Ë(((c)&(~0xff))==0)

	)

335 
	#XkbEx∂icôXIId
(
c
Ë(((c)&(~0xff))==0)

	)

336 
	#XkbSögÀXICœss
(
c
Ë((((c)&(~0xff))==0)||((c)==
XkbDÊtXICœss
))

	)

337 
	#XkbSögÀXIId
(
c
Ë((((c)&(~0xff))==0)||((c)==
XkbDÊtXIId
))

	)

339 
	#XkbNoModifõr
 0xff

	)

340 
	#XkbNoShi·Levñ
 0xff

	)

341 
	#XkbNoSh≠e
 0xff

	)

342 
	#XkbNoIndiˇt‹
 0xff

	)

344 
	#XkbNoModifõrMask
 0

	)

345 
	#XkbAŒModifõrsMask
 0xff

	)

346 
	#XkbAŒVútuÆModsMask
 0xffff

	)

348 
	#XkbNumKbdGroups
 4

	)

349 
	#XkbMaxKbdGroup
 (
XkbNumKbdGroups
-1)

	)

351 
	#XkbMaxMou£KeysBä
 4

	)

358 
	#XkbGroup1Index
 0

	)

359 
	#XkbGroup2Index
 1

	)

360 
	#XkbGroup3Index
 2

	)

361 
	#XkbGroup4Index
 3

	)

362 
	#XkbAnyGroup
 254

	)

363 
	#XkbAŒGroups
 255

	)

365 
	#XkbGroup1Mask
 (1<<0)

	)

366 
	#XkbGroup2Mask
 (1<<1)

	)

367 
	#XkbGroup3Mask
 (1<<2)

	)

368 
	#XkbGroup4Mask
 (1<<3)

	)

369 
	#XkbAnyGroupMask
 (1<<7)

	)

370 
	#XkbAŒGroupsMask
 (0xf)

	)

379 
	#XkbBuûdC‹eSèã
(
m
,
g
Ë((((g)&0x3)<<13)|((m)&0xff))

	)

380 
	#XkbGroupF‹C‹eSèã
(
s
Ë(((s)>>13)&0x3)

	)

381 
	#XkbIsLegÆGroup
(
g
Ë(((g)>=0)&&((g)<
XkbNumKbdGroups
))

	)

391 
	#XkbWøpI¡oR™ge
 (0x00)

	)

392 
	#XkbCœmpI¡oR™ge
 (0x40)

	)

393 
	#XkbRedúe˘I¡oR™ge
 (0x80)

	)

426 
	#XkbSA_CÀ¨Locks
 (1L << 0)

	)

427 
	#XkbSA_L©chToLock
 (1L << 1)

	)

429 
	#XkbSA_LockNoLock
 (1L << 0)

	)

430 
	#XkbSA_LockNoU∆ock
 (1L << 1)

	)

432 
	#XkbSA_U£ModM≠Mods
 (1L << 2)

	)

434 
	#XkbSA_GroupAbsﬁuã
 (1L << 2)

	)

435 
	#XkbSA_U£DÊtBuâ⁄
 0

	)

437 
	#XkbSA_NoAc˚Àøti⁄
 (1L << 0)

	)

438 
	#XkbSA_MoveAbsﬁuãX
 (1L << 1)

	)

439 
	#XkbSA_MoveAbsﬁuãY
 (1L << 2)

	)

441 
	#XkbSA_ISODÊtIsGroup
 (1L << 7)

	)

442 
	#XkbSA_ISONoAf„˘Mods
 (1L << 6)

	)

443 
	#XkbSA_ISONoAf„˘Group
 (1L << 5)

	)

444 
	#XkbSA_ISONoAf„˘På
 (1L << 4)

	)

445 
	#XkbSA_ISONoAf„˘Cåls
 (1L << 3)

	)

446 
	#XkbSA_ISOAf„˘Mask
 (0x78)

	)

448 
	#XkbSA_MesßgeOnPªss
 (1L << 0)

	)

449 
	#XkbSA_MesßgeOnRñó£
 (1L << 1)

	)

450 
	#XkbSA_MesßgeGíKeyEvít
 (1L << 2)

	)

452 
	#XkbSA_Af„˘DÊtBä
 1

	)

453 
	#XkbSA_DÊtBäAbsﬁuã
 (1L << 2)

	)

455 
	#XkbSA_SwôchAµliˇti⁄
 (1L << 0)

	)

456 
	#XkbSA_SwôchAbsﬁuã
 (1L << 2)

	)

464 
	#XkbSA_Ign‹eVÆ
 (0x00)

	)

465 
	#XkbSA_SëVÆMö
 (0x10)

	)

466 
	#XkbSA_SëVÆCíãr
 (0x20)

	)

467 
	#XkbSA_SëVÆMax
 (0x30)

	)

468 
	#XkbSA_SëVÆRñ©ive
 (0x40)

	)

469 
	#XkbSA_SëVÆAbsﬁuã
 (0x50)

	)

470 
	#XkbSA_VÆOpMask
 (0x70)

	)

471 
	#XkbSA_VÆSˇÀMask
 (0x07)

	)

472 
	#XkbSA_VÆOp
(
a
Ë(◊)&
XkbSA_VÆOpMask
)

	)

473 
	#XkbSA_VÆSˇÀ
(
a
Ë(◊)&
XkbSA_VÆSˇÀMask
)

	)

479 
	#XkbSA_NoA˘i⁄
 0x00

	)

480 
	#XkbSA_SëMods
 0x01

	)

481 
	#XkbSA_L©chMods
 0x02

	)

482 
	#XkbSA_LockMods
 0x03

	)

483 
	#XkbSA_SëGroup
 0x04

	)

484 
	#XkbSA_L©chGroup
 0x05

	)

485 
	#XkbSA_LockGroup
 0x06

	)

486 
	#XkbSA_MovePå
 0x07

	)

487 
	#XkbSA_PåBä
 0x08

	)

488 
	#XkbSA_LockPåBä
 0x09

	)

489 
	#XkbSA_SëPåDÊt
 0x0a

	)

490 
	#XkbSA_ISOLock
 0x0b

	)

491 
	#XkbSA_Tîmö©e
 0x0c

	)

492 
	#XkbSA_SwôchS¸ìn
 0x0d

	)

493 
	#XkbSA_SëC⁄åﬁs
 0x0e

	)

494 
	#XkbSA_LockC⁄åﬁs
 0x0f

	)

495 
	#XkbSA_A˘i⁄Mesßge
 0x10

	)

496 
	#XkbSA_Redúe˘Key
 0x11

	)

497 
	#XkbSA_Devi˚Bä
 0x12

	)

498 
	#XkbSA_LockDevi˚Bä
 0x13

	)

499 
	#XkbSA_Devi˚VÆu©‹
 0x14

	)

500 
	#XkbSA_La°A˘i⁄
 
XkbSA_Devi˚VÆu©‹


	)

501 
	#XkbSA_NumA˘i⁄s
 (
XkbSA_La°A˘i⁄
+1)

	)

503 
	#XkbSA_XFªe86Priv©e
 0x86

	)

508 
	#XkbSA_BªakL©ch
 \

509 ((1<<
XkbSA_NoA˘i⁄
)|(1<<
XkbSA_PåBä
)|(1<<
XkbSA_LockPåBä
)|\

510 (1<<
XkbSA_Tîmö©e
)|(1<<
XkbSA_SwôchS¸ìn
)|(1<<
XkbSA_SëC⁄åﬁs
)|\

511 (1<<
XkbSA_LockC⁄åﬁs
)|(1<<
XkbSA_A˘i⁄Mesßge
)|\

512 (1<<
XkbSA_Redúe˘Key
)|(1<<
XkbSA_Devi˚Bä
)|(1<<
XkbSA_LockDevi˚Bä
))

	)

517 
	#XkbIsModA˘i⁄
(
a
Ë((◊)->
ty≥
>=
Xkb_SASëMods
)&&(◊)->ty≥<=
XkbSA_LockMods
))

	)

518 
	#XkbIsGroupA˘i⁄
(
a
Ë((◊)->
ty≥
>=
XkbSA_SëGroup
)&&(◊)->ty≥<=
XkbSA_LockGroup
))

	)

519 
	#XkbIsPåA˘i⁄
(
a
Ë((◊)->
ty≥
>=
XkbSA_MovePå
)&&(◊)->ty≥<=
XkbSA_SëPåDÊt
))

	)

530 
	#XkbKB_Pîm™ít
 0x80

	)

531 
	#XkbKB_OpMask
 0x7f

	)

533 
	#XkbKB_DeÁu…
 0x00

	)

534 
	#XkbKB_Lock
 0x01

	)

535 
	#XkbKB_RadioGroup
 0x02

	)

536 
	#XkbKB_Ovîœy1
 0x03

	)

537 
	#XkbKB_Ovîœy2
 0x04

	)

539 
	#XkbKB_RGAŒowN⁄e
 0x80

	)

544 
	#XkbMöLegÆKeyCode
 8

	)

545 
	#XkbMaxLegÆKeyCode
 255

	)

546 
	#XkbMaxKeyCou¡
 (
XkbMaxLegÆKeyCode
-
XkbMöLegÆKeyCode
+1)

	)

547 
	#XkbPîKeyBôAºaySize
 ((
XkbMaxLegÆKeyCode
+1)/8)

	)

549 
	#XkbIsLegÆKeycode
(
k
Ë((k)>=
XkbMöLegÆKeyCode
)

	)

554 
	#XkbNumModifõrs
 8

	)

555 
	#XkbNumVútuÆMods
 16

	)

556 
	#XkbNumIndiˇt‹s
 32

	)

557 
	#XkbAŒIndiˇt‹sMask
 (0xffffffff)

	)

558 
	#XkbMaxRadioGroups
 32

	)

559 
	#XkbAŒRadioGroupsMask
 (0xffffffff)

	)

560 
	#XkbMaxShi·Levñ
 63

	)

561 
	#XkbMaxSymsPîKey
 (
XkbMaxShi·Levñ
*
XkbNumKbdGroups
)

	)

562 
	#XkbRGMaxMembîs
 12

	)

563 
	#XkbA˘i⁄MesßgeLígth
 6

	)

564 
	#XkbKeyNameLígth
 4

	)

565 
	#XkbMaxRedúe˘Cou¡
 8

	)

567 
	#XkbGeomPtsPîMM
 10

	)

568 
	#XkbGeomMaxCﬁ‹s
 32

	)

569 
	#XkbGeomMaxLabñCﬁ‹s
 3

	)

570 
	#XkbGeomMaxPri‹ôy
 255

	)

575 
	#XkbO√LevñIndex
 0

	)

576 
	#XkbTwoLevñIndex
 1

	)

577 
	#XkbAÕhabëicIndex
 2

	)

578 
	#XkbKey∑dIndex
 3

	)

579 
	#XkbLa°RequúedTy≥
 
XkbKey∑dIndex


	)

580 
	#XkbNumRequúedTy≥s
 (
XkbLa°RequúedTy≥
+1)

	)

581 
	#XkbMaxKeyTy≥s
 255

	)

583 
	#XkbO√LevñMask
 (1<<0)

	)

584 
	#XkbTwoLevñMask
 (1<<1)

	)

585 
	#XkbAÕhabëicMask
 (1<<2)

	)

586 
	#XkbKey∑dMask
 (1<<3)

	)

587 
	#XkbAŒRequúedTy≥s
 (0xf)

	)

589 
	#XkbShi·Levñ
(
n
Ë(“)-1)

	)

590 
	#XkbShi·LevñMask
(
n
Ë(1<<(“)-1))

	)

595 
	#XkbName
 "XKEYBOARD"

	)

596 
	#XkbMaj‹Vîsi⁄
 1

	)

597 
	#XkbMö‹Vîsi⁄
 0

	)

605 
	#XkbEx∂icôKeyTy≥sMask
 (0x0f)

	)

606 
	#XkbEx∂icôKeyTy≥1Mask
 (1<<0)

	)

607 
	#XkbEx∂icôKeyTy≥2Mask
 (1<<1)

	)

608 
	#XkbEx∂icôKeyTy≥3Mask
 (1<<2)

	)

609 
	#XkbEx∂icôKeyTy≥4Mask
 (1<<3)

	)

610 
	#XkbEx∂icôI¡î¥ëMask
 (1<<4)

	)

611 
	#XkbEx∂icôAutoRïótMask
 (1<<5)

	)

612 
	#XkbEx∂icôBehavi‹Mask
 (1<<6)

	)

613 
	#XkbEx∂icôVModM≠Mask
 (1<<7)

	)

614 
	#XkbAŒEx∂icôMask
 (0xff)

	)

626 
	#XkbKeyTy≥sMask
 (1<<0)

	)

627 
	#XkbKeySymsMask
 (1<<1)

	)

628 
	#XkbModifõrM≠Mask
 (1<<2)

	)

629 
	#XkbEx∂icôComp⁄ítsMask
 (1<<3)

	)

630 
	#XkbKeyA˘i⁄sMask
 (1<<4)

	)

631 
	#XkbKeyBehavi‹sMask
 (1<<5)

	)

632 
	#XkbVútuÆModsMask
 (1<<6)

	)

633 
	#XkbVútuÆModM≠Mask
 (1<<7)

	)

635 
	#XkbAŒClõ¡InfoMask
 (
XkbKeyTy≥sMask
|
XkbKeySymsMask
|
XkbModifõrM≠Mask
)

	)

636 
	#XkbAŒSîvîInfoMask
 (
XkbEx∂icôComp⁄ítsMask
|
XkbKeyA˘i⁄sMask
|
XkbKeyBehavi‹sMask
|
XkbVútuÆModsMask
|
XkbVútuÆModM≠Mask
)

	)

637 
	#XkbAŒM≠Comp⁄ítsMask
 (
XkbAŒClõ¡InfoMask
|
XkbAŒSîvîInfoMask
)

	)

643 
	#XkbSI_AutoRïót
 (1<<0)

	)

644 
	#XkbSI_LockögKey
 (1<<1)

	)

651 
	#XkbSI_LevñO√O∆y
 (0x80)

	)

652 
	#XkbSI_OpMask
 (0x7f)

	)

653 
	#XkbSI_N⁄eOf
 (0)

	)

654 
	#XkbSI_AnyOfOrN⁄e
 (1)

	)

655 
	#XkbSI_AnyOf
 (2)

	)

656 
	#XkbSI_AŒOf
 (3)

	)

657 
	#XkbSI_Exa˘ly
 (4)

	)

665 
	#XkbIM_NoEx∂icô
 (1L << 7)

	)

666 
	#XkbIM_NoAutom©ic
 (1L << 6)

	)

667 
	#XkbIM_LEDDrivesKB
 (1L << 5)

	)

675 
	#XkbIM_U£Ba£
 (1L << 0)

	)

676 
	#XkbIM_U£L©ched
 (1L << 1)

	)

677 
	#XkbIM_U£Locked
 (1L << 2)

	)

678 
	#XkbIM_U£Ef„˘ive
 (1L << 3)

	)

679 
	#XkbIM_U£Com∑t
 (1L << 4)

	)

681 
	#XkbIM_U£N⁄e
 0

	)

682 
	#XkbIM_U£AnyGroup
 (
XkbIM_U£Ba£
|
XkbIM_U£L©ched
|
XkbIM_U£Locked
\

683 |
XkbIM_U£Ef„˘ive
)

	)

684 
	#XkbIM_U£AnyMods
 (
XkbIM_U£AnyGroup
|
XkbIM_U£Com∑t
)

	)

690 
	#XkbSymI¡îpMask
 (1<<0)

	)

691 
	#XkbGroupCom∑tMask
 (1<<1)

	)

692 
	#XkbAŒCom∑tMask
 (0x3)

	)

701 
	#XkbKeycodesNameMask
 (1<<0)

	)

702 
	#XkbGeomëryNameMask
 (1<<1)

	)

703 
	#XkbSymbﬁsNameMask
 (1<<2)

	)

704 
	#XkbPhysSymbﬁsNameMask
 (1<<3)

	)

705 
	#XkbTy≥sNameMask
 (1<<4)

	)

706 
	#XkbCom∑tNameMask
 (1<<5)

	)

707 
	#XkbKeyTy≥NamesMask
 (1<<6)

	)

708 
	#XkbKTLevñNamesMask
 (1<<7)

	)

709 
	#XkbIndiˇt‹NamesMask
 (1<<8)

	)

710 
	#XkbKeyNamesMask
 (1<<9)

	)

711 
	#XkbKeyAlü£sMask
 (1<<10)

	)

712 
	#XkbVútuÆModNamesMask
 (1<<11)

	)

713 
	#XkbGroupNamesMask
 (1<<12)

	)

714 
	#XkbRGNamesMask
 (1<<13)

	)

715 
	#XkbComp⁄ítNamesMask
 (0x3f)

	)

716 
	#XkbAŒNamesMask
 (0x3fff)

	)

723 
	#XkbGBN_Ty≥sMask
 (1L << 0)

	)

724 
	#XkbGBN_Com∑tM≠Mask
 (1L << 1)

	)

725 
	#XkbGBN_Clõ¡SymbﬁsMask
 (1L << 2)

	)

726 
	#XkbGBN_SîvîSymbﬁsMask
 (1L << 3)

	)

727 
	#XkbGBN_SymbﬁsMask
 (
XkbGBN_Clõ¡SymbﬁsMask
|
XkbGBN_SîvîSymbﬁsMask
)

	)

728 
	#XkbGBN_Indiˇt‹M≠Mask
 (1L << 4)

	)

729 
	#XkbGBN_KeyNamesMask
 (1L << 5)

	)

730 
	#XkbGBN_GeomëryMask
 (1L << 6)

	)

731 
	#XkbGBN_OthîNamesMask
 (1L << 7)

	)

732 
	#XkbGBN_AŒComp⁄ítsMask
 (0xff)

	)

737 
	#XkbLC_Hiddí
 (1L << 0)

	)

738 
	#XkbLC_DeÁu…
 (1L << 1)

	)

739 
	#XkbLC_P¨tül
 (1L << 2)

	)

741 
	#XkbLC_AÕh™umîicKeys
 (1L << 8)

	)

742 
	#XkbLC_ModifõrKeys
 (1L << 9)

	)

743 
	#XkbLC_Key∑dKeys
 (1L << 10)

	)

744 
	#XkbLC_Fun˘i⁄Keys
 (1L << 11)

	)

745 
	#XkbLC_A…î«ãGroup
 (1L << 12)

	)

758 
	#XkbXI_KeybﬂrdsMask
 (1L << 0)

	)

759 
	#XkbXI_Buâ⁄A˘i⁄sMask
 (1L << 1)

	)

760 
	#XkbXI_Indiˇt‹NamesMask
 (1L << 2)

	)

761 
	#XkbXI_Indiˇt‹M≠sMask
 (1L << 3)

	)

762 
	#XkbXI_Indiˇt‹SèãMask
 (1L << 4)

	)

763 
	#XkbXI_Unsuµ‹ãdFótuªMask
 (1L << 15)

	)

764 
	#XkbXI_AŒFótuªsMask
 (0x001f)

	)

765 
	#XkbXI_AŒDevi˚FótuªsMask
 (0x001e)

	)

767 
	#XkbXI_Indiˇt‹sMask
 (0x001c)

	)

768 
	#XkbAŒExãnsi⁄Devi˚EvítsMask
 (0x801f)

	)

774 
	#XkbPCF_Dëe˘abÀAutoRïótMask
 (1L << 0)

	)

775 
	#XkbPCF_GøbsU£XKBSèãMask
 (1L << 1)

	)

776 
	#XkbPCF_AutoRe£tC⁄åﬁsMask
 (1L << 2)

	)

777 
	#XkbPCF_LookupSèãWhíGøbbed
 (1L << 3)

	)

778 
	#XkbPCF_SídEvítU£sXKBSèã
 (1L << 4)

	)

779 
	#XkbPCF_AŒFœgsMask
 (0x1F)

	)

784 
	#XkbDF_DißbÀLocks
 (1<<0)

	)

	@/usr/include/X11/extensions/render.h

24 #i‚de‡
_RENDER_H_


25 
	#_RENDER_H_


	)

27 
	~<X11/Xdefs.h
>

29 
XID
 
	tGlyph
;

30 
XID
 
	tGlyphSë
;

31 
XID
 
	tPi˘uª
;

32 
XID
 
	tPi˘F‹m©
;

34 
	#RENDER_NAME
 "RENDER"

	)

35 
	#RENDER_MAJOR
 0

	)

36 
	#RENDER_MINOR
 11

	)

38 
	#X_RídîQuîyVîsi⁄
 0

	)

39 
	#X_RídîQuîyPi˘F‹m©s
 1

	)

40 
	#X_RídîQuîyPi˘IndexVÆues
 2

	)

41 
	#X_RídîQuîyDôhîs
 3

	)

42 
	#X_RídîCª©ePi˘uª
 4

	)

43 
	#X_RídîCh™gePi˘uª
 5

	)

44 
	#X_RídîSëPi˘uªClùRe˘™gÀs
 6

	)

45 
	#X_RídîFªePi˘uª
 7

	)

46 
	#X_RídîComposôe
 8

	)

47 
	#X_RídîSˇÀ
 9

	)

48 
	#X_RídîTø≥zoids
 10

	)

49 
	#X_RídîTrüngÀs
 11

	)

50 
	#X_RídîTriSåù
 12

	)

51 
	#X_RídîTriF™
 13

	)

52 
	#X_RídîCﬁ‹Tø≥zoids
 14

	)

53 
	#X_RídîCﬁ‹TrüngÀs
 15

	)

55 
	#X_RídîCª©eGlyphSë
 17

	)

56 
	#X_RídîRe„ªn˚GlyphSë
 18

	)

57 
	#X_RídîFªeGlyphSë
 19

	)

58 
	#X_RídîAddGlyphs
 20

	)

59 
	#X_RídîAddGlyphsFromPi˘uª
 21

	)

60 
	#X_RídîFªeGlyphs
 22

	)

61 
	#X_RídîComposôeGlyphs8
 23

	)

62 
	#X_RídîComposôeGlyphs16
 24

	)

63 
	#X_RídîComposôeGlyphs32
 25

	)

64 
	#X_RídîFûlRe˘™gÀs
 26

	)

66 
	#X_RídîCª©eCurs‹
 27

	)

68 
	#X_RídîSëPi˘uªTønsf‹m
 28

	)

69 
	#X_RídîQuîyFûãrs
 29

	)

70 
	#X_RídîSëPi˘uªFûãr
 30

	)

72 
	#X_RídîCª©eAnimCurs‹
 31

	)

74 
	#X_RídîAddTøps
 32

	)

76 
	#X_RídîCª©eSﬁidFûl
 33

	)

77 
	#X_RídîCª©eLöórGødõ¡
 34

	)

78 
	#X_RídîCª©eRadülGødõ¡
 35

	)

79 
	#X_RídîCª©eC⁄iˇlGødõ¡
 36

	)

80 
	#RídîNumbîReque°s
 (
X_RídîCª©eC⁄iˇlGødõ¡
+1)

	)

82 
	#BadPi˘F‹m©
 0

	)

83 
	#BadPi˘uª
 1

	)

84 
	#BadPi˘Op
 2

	)

85 
	#BadGlyphSë
 3

	)

86 
	#BadGlyph
 4

	)

87 
	#RídîNumbîEº‹s
 (
BadGlyph
+1)

	)

89 
	#Pi˘Ty≥Indexed
 0

	)

90 
	#Pi˘Ty≥Dúe˘
 1

	)

92 
	#Pi˘OpMöimum
 0

	)

93 
	#Pi˘OpCÀ¨
 0

	)

94 
	#Pi˘OpSrc
 1

	)

95 
	#Pi˘OpD°
 2

	)

96 
	#Pi˘OpOvî
 3

	)

97 
	#Pi˘OpOvîRevî£
 4

	)

98 
	#Pi˘OpIn
 5

	)

99 
	#Pi˘OpInRevî£
 6

	)

100 
	#Pi˘OpOut
 7

	)

101 
	#Pi˘OpOutRevî£
 8

	)

102 
	#Pi˘OpAt›
 9

	)

103 
	#Pi˘OpAt›Revî£
 10

	)

104 
	#Pi˘OpX‹
 11

	)

105 
	#Pi˘OpAdd
 12

	)

106 
	#Pi˘OpS©uøã
 13

	)

107 
	#Pi˘OpMaximum
 13

	)

112 
	#Pi˘OpDisjoötMöimum
 0x10

	)

113 
	#Pi˘OpDisjoötCÀ¨
 0x10

	)

114 
	#Pi˘OpDisjoötSrc
 0x11

	)

115 
	#Pi˘OpDisjoötD°
 0x12

	)

116 
	#Pi˘OpDisjoötOvî
 0x13

	)

117 
	#Pi˘OpDisjoötOvîRevî£
 0x14

	)

118 
	#Pi˘OpDisjoötIn
 0x15

	)

119 
	#Pi˘OpDisjoötInRevî£
 0x16

	)

120 
	#Pi˘OpDisjoötOut
 0x17

	)

121 
	#Pi˘OpDisjoötOutRevî£
 0x18

	)

122 
	#Pi˘OpDisjoötAt›
 0x19

	)

123 
	#Pi˘OpDisjoötAt›Revî£
 0x1a

	)

124 
	#Pi˘OpDisjoötX‹
 0x1b

	)

125 
	#Pi˘OpDisjoötMaximum
 0x1b

	)

127 
	#Pi˘OpC⁄joötMöimum
 0x20

	)

128 
	#Pi˘OpC⁄joötCÀ¨
 0x20

	)

129 
	#Pi˘OpC⁄joötSrc
 0x21

	)

130 
	#Pi˘OpC⁄joötD°
 0x22

	)

131 
	#Pi˘OpC⁄joötOvî
 0x23

	)

132 
	#Pi˘OpC⁄joötOvîRevî£
 0x24

	)

133 
	#Pi˘OpC⁄joötIn
 0x25

	)

134 
	#Pi˘OpC⁄joötInRevî£
 0x26

	)

135 
	#Pi˘OpC⁄joötOut
 0x27

	)

136 
	#Pi˘OpC⁄joötOutRevî£
 0x28

	)

137 
	#Pi˘OpC⁄joötAt›
 0x29

	)

138 
	#Pi˘OpC⁄joötAt›Revî£
 0x2a

	)

139 
	#Pi˘OpC⁄joötX‹
 0x2b

	)

140 
	#Pi˘OpC⁄joötMaximum
 0x2b

	)

145 
	#Pi˘OpBÀndMöimum
 0x30

	)

146 
	#Pi˘OpMu…ùly
 0x30

	)

147 
	#Pi˘OpS¸ìn
 0x31

	)

148 
	#Pi˘OpOvîœy
 0x32

	)

149 
	#Pi˘OpD¨kí
 0x33

	)

150 
	#Pi˘OpLighãn
 0x34

	)

151 
	#Pi˘OpCﬁ‹Dodge
 0x35

	)

152 
	#Pi˘OpCﬁ‹Bu∫
 0x36

	)

153 
	#Pi˘OpH¨dLight
 0x37

	)

154 
	#Pi˘OpSo·Light
 0x38

	)

155 
	#Pi˘OpDif„ªn˚
 0x39

	)

156 
	#Pi˘OpEx˛usi⁄
 0x3a

	)

157 
	#Pi˘OpHSLHue
 0x3b

	)

158 
	#Pi˘OpHSLS©uøti⁄
 0x3c

	)

159 
	#Pi˘OpHSLCﬁ‹
 0x3d

	)

160 
	#Pi˘OpHSLLumöosôy
 0x3e

	)

161 
	#Pi˘OpBÀndMaximum
 0x3e

	)

163 
	#PﬁyEdgeSh¨p
 0

	)

164 
	#PﬁyEdgeSmoŸh
 1

	)

166 
	#PﬁyModePªci£
 0

	)

167 
	#PﬁyModeIm¥eci£
 1

	)

169 
	#CPRïót
 (1 << 0)

	)

170 
	#CPAÕhaM≠
 (1 << 1)

	)

171 
	#CPAÕhaXOrigö
 (1 << 2)

	)

172 
	#CPAÕhaYOrigö
 (1 << 3)

	)

173 
	#CPClùXOrigö
 (1 << 4)

	)

174 
	#CPClùYOrigö
 (1 << 5)

	)

175 
	#CPClùMask
 (1 << 6)

	)

176 
	#CPGøphicsExposuª
 (1 << 7)

	)

177 
	#CPSubwödowMode
 (1 << 8)

	)

178 
	#CPPﬁyEdge
 (1 << 9)

	)

179 
	#CPPﬁyMode
 (1 << 10)

	)

180 
	#CPDôhî
 (1 << 11)

	)

181 
	#CPComp⁄ítAÕha
 (1 << 12)

	)

182 
	#CPLa°Bô
 12

	)

185 
	#FûãrNóª°
 "√¨e°"

	)

186 
	#FûãrBûöór
 "bûöór"

	)

188 
	#FûãrC⁄vﬁuti⁄
 "c⁄vﬁuti⁄"

	)

190 
	#FûãrFa°
 "Á°"

	)

191 
	#FûãrGood
 "good"

	)

192 
	#FûãrBe°
 "be°"

	)

194 
	#FûãrAlüsN⁄e
 -1

	)

197 
	#SubPixñUnknown
 0

	)

198 
	#SubPixñH‹iz⁄èlRGB
 1

	)

199 
	#SubPixñH‹iz⁄èlBGR
 2

	)

200 
	#SubPixñVîtiˇlRGB
 3

	)

201 
	#SubPixñVîtiˇlBGR
 4

	)

202 
	#SubPixñN⁄e
 5

	)

205 
	#RïótN⁄e
 0

	)

206 
	#RïótN‹mÆ
 1

	)

207 
	#RïótPad
 2

	)

208 
	#RïótReÊe˘
 3

	)

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	#__bsw≠_c⁄°™t_16
(
x
) \

31 ((
__uöt16_t
Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

33 
__ölöe
 
__uöt16_t


34 
	$__bsw≠_16
 (
__uöt16_t
 
__bsx
)

36 #i‡
	`__GNUC_PREREQ
 (4, 8)

37  
	`__buûtö_bsw≠16
 (
__bsx
);

39  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

41 
	}
}

44 
	#__bsw≠_c⁄°™t_32
(
x
) \

45 ((((
x
) & 0xff000000u) >> 24) | (((x) & 0x00ff0000u) >> 8) \

46 | (((
x
Ë& 0x0000ff00uË<< 8Ë| (((xË& 0x000000ffuË<< 24))

	)

48 
__ölöe
 
__uöt32_t


49 
	$__bsw≠_32
 (
__uöt32_t
 
__bsx
)

51 #i‡
	`__GNUC_PREREQ
 (4, 3)

52  
	`__buûtö_bsw≠32
 (
__bsx
);

54  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

56 
	}
}

59 
	#__bsw≠_c⁄°™t_64
(
x
) \

60 ((((
x
) & 0xff00000000000000ull) >> 56) \

61 | (((
x
) & 0x00ff000000000000ull) >> 40) \

62 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

63 | (((
x
) & 0x000000ff00000000ull) >> 8) \

64 | (((
x
) & 0x00000000ff000000ull) << 8) \

65 | (((
x
) & 0x0000000000ff0000ull) << 24) \

66 | (((
x
) & 0x000000000000ff00ull) << 40) \

67 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

69 
__exãnsi⁄__
 
__ölöe
 
__uöt64_t


70 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

72 #i‡
	`__GNUC_PREREQ
 (4, 3)

73  
	`__buûtö_bsw≠64
 (
__bsx
);

75  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

77 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/ty≥s/°ru˘_iovec.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

205 
	#F_ADD_SEALS
 1033

	)

206 
	#F_GET_SEALS
 1034

	)

208 
	#F_GET_RW_HINT
 1035

	)

209 
	#F_SET_RW_HINT
 1036

	)

210 
	#F_GET_FILE_RW_HINT
 1037

	)

211 
	#F_SET_FILE_RW_HINT
 1038

	)

213 #ifde‡
__USE_XOPEN2K8


214 
	#F_DUPFD_CLOEXEC
 1030

	)

219 
	#FD_CLOEXEC
 1

	)

221 #i‚de‡
F_RDLCK


223 
	#F_RDLCK
 0

	)

224 
	#F_WRLCK
 1

	)

225 
	#F_UNLCK
 2

	)

230 #i‚de‡
F_EXLCK


231 
	#F_EXLCK
 4

	)

232 
	#F_SHLCK
 8

	)

235 #ifde‡
__USE_MISC


237 
	#LOCK_SH
 1

	)

238 
	#LOCK_EX
 2

	)

239 
	#LOCK_NB
 4

	)

241 
	#LOCK_UN
 8

	)

244 #ifde‡
__USE_GNU


245 
	#LOCK_MAND
 32

	)

246 
	#LOCK_READ
 64

	)

247 
	#LOCK_WRITE
 128

	)

248 
	#LOCK_RW
 192

	)

251 #ifde‡
__USE_GNU


253 
	#DN_ACCESS
 0x00000001

	)

254 
	#DN_MODIFY
 0x00000002

	)

255 
	#DN_CREATE
 0x00000004

	)

256 
	#DN_DELETE
 0x00000008

	)

257 
	#DN_RENAME
 0x00000010

	)

258 
	#DN_ATTRIB
 0x00000020

	)

259 
	#DN_MULTISHOT
 0x80000000

	)

263 #ifde‡
__USE_GNU


265 
	e__pid_ty≥


267 
	mF_OWNER_TID
 = 0,

268 
	mF_OWNER_PID
,

269 
	mF_OWNER_PGRP
,

270 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


274 
	sf_ow√r_ex


276 
__pid_ty≥
 
	mty≥
;

277 
__pid_t
 
	mpid
;

281 #ifde‡
__USE_GNU


283 
	#F_SEAL_SEAL
 0x0001

	)

284 
	#F_SEAL_SHRINK
 0x0002

	)

285 
	#F_SEAL_GROW
 0x0004

	)

286 
	#F_SEAL_WRITE
 0x0008

	)

289 #ifde‡
__USE_GNU


291 
	#RWF_WRITE_LIFE_NOT_SET
 0

	)

292 
	#RWH_WRITE_LIFE_NONE
 1

	)

293 
	#RWH_WRITE_LIFE_SHORT
 2

	)

294 
	#RWH_WRITE_LIFE_MEDIUM
 3

	)

295 
	#RWH_WRITE_LIFE_LONG
 4

	)

296 
	#RWH_WRITE_LIFE_EXTREME
 5

	)

301 #ifdef 
__USE_MISC


302 
	#FAPPEND
 
O_APPEND


	)

303 
	#FFSYNC
 
O_FSYNC


	)

304 
	#FASYNC
 
O_ASYNC


	)

305 
	#FNONBLOCK
 
O_NONBLOCK


	)

306 
	#FNDELAY
 
O_NDELAY


	)

309 #i‚de‡
__POSIX_FADV_DONTNEED


310 
	#__POSIX_FADV_DONTNEED
 4

	)

311 
	#__POSIX_FADV_NOREUSE
 5

	)

314 #ifde‡
__USE_XOPEN2K


315 
	#POSIX_FADV_NORMAL
 0

	)

316 
	#POSIX_FADV_RANDOM
 1

	)

317 
	#POSIX_FADV_SEQUENTIAL
 2

	)

318 
	#POSIX_FADV_WILLNEED
 3

	)

319 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

320 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

324 #ifde‡
__USE_GNU


326 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

329 
	#SYNC_FILE_RANGE_WRITE
 2

	)

332 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

337 
	#SPLICE_F_MOVE
 1

	)

338 
	#SPLICE_F_NONBLOCK
 2

	)

341 
	#SPLICE_F_MORE
 4

	)

342 
	#SPLICE_F_GIFT
 8

	)

346 
	~<löux/ÁŒoc.h
>

350 
	sfûe_h™dÀ


352 
	mh™dÀ_byãs
;

353 
	mh™dÀ_ty≥
;

355 
	mf_h™dÀ
[0];

359 
	#MAX_HANDLE_SZ
 128

	)

362 
	g__BEGIN_DECLS


364 #ifde‡
__USE_GNU


367 
__ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

368 
__THROW
;

375 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

376 
__Êags
);

383 
__ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

384 
size_t
 
__cou¡
, 
__Êags
);

390 
__ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

391 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

392 
__Êags
);

398 
__ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

399 
__Êags
);

405 #i‚de‡
__USE_FILE_OFFSET64


406 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

408 #ifde‡
__REDIRECT


409 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

410 
__off64_t
 
__Àn
),

411 
ÁŒoˇã64
);

413 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

416 #ifde‡
__USE_LARGEFILE64


417 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

418 
__off64_t
 
__Àn
);

423 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

424 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

425 
__Êags
Ë
__THROW
;

431 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

432 
__Êags
);

436 
__END_DECLS


	@/usr/include/bits/floatn-common.h

20 #i‚de‡
_BITS_FLOATN_COMMON_H


21 
	#_BITS_FLOATN_COMMON_H


	)

23 
	~<„©uªs.h
>

24 
	~<bôs/l⁄g-doubÀ.h
>

34 
	#__HAVE_FLOAT16
 0

	)

35 
	#__HAVE_FLOAT32
 1

	)

36 
	#__HAVE_FLOAT64
 1

	)

37 
	#__HAVE_FLOAT32X
 1

	)

38 
	#__HAVE_FLOAT128X
 0

	)

52 
	#__HAVE_DISTINCT_FLOAT16
 
__HAVE_FLOAT16


	)

53 
	#__HAVE_DISTINCT_FLOAT32
 0

	)

54 
	#__HAVE_DISTINCT_FLOAT64
 0

	)

55 
	#__HAVE_DISTINCT_FLOAT32X
 0

	)

56 
	#__HAVE_DISTINCT_FLOAT64X
 0

	)

57 
	#__HAVE_DISTINCT_FLOAT128X
 
__HAVE_FLOAT128X


	)

63 
	#__HAVE_FLOAT128_UNLIKE_LDBL
 (
__HAVE_DISTINCT_FLOAT128
 \

64 && 
__LDBL_MANT_DIG__
 !113)

	)

69 #i‡
__GNUC_PREREQ
 (7, 0Ë&& !
deföed
 
__˝lu•lus


70 
	#__HAVE_FLOATN_NOT_TYPEDEF
 1

	)

72 
	#__HAVE_FLOATN_NOT_TYPEDEF
 0

	)

75 #i‚de‡
__ASSEMBLER__


80 #i‡
__HAVE_FLOAT16


81 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


83 
	#__f16
(
x
Ë((
_Flﬂt16
Ëx##
f
)

	)

85 
	#__f16
(
x
Ëx##
f16


	)

89 #i‡
__HAVE_FLOAT32


90 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


91 
	#__f32
(
x
Ëx##
f


	)

93 
	#__f32
(
x
Ëx##
f32


	)

97 #i‡
__HAVE_FLOAT64


98 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
	#__f64
(
x
Ëx##
l


	)

102 
	#__f64
(
x
Ë
	)
x

105 
	#__f64
(
x
Ëx##
f64


	)

109 #i‡
__HAVE_FLOAT32X


110 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


111 
	#__f32x
(
x
Ë
	)
x

113 
	#__f32x
(
x
Ëx##
f32x


	)

117 #i‡
__HAVE_FLOAT64X


118 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


119 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


120 
	#__f64x
(
x
Ëx##
l


	)

122 
	#__f64x
(
x
Ë
	`__f128
 (x)

	)

125 
	#__f64x
(
x
Ëx##
f64x


	)

129 #i‡
__HAVE_FLOAT128X


130 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


133 
	#__f128x
(
x
Ëx##
f128x


	)

138 #i‡
__HAVE_FLOAT16


139 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


140 
_Com∂ex
 
	t__cÊﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HC__
)));

141 
	#__CFLOAT16
 
__cÊﬂt16


	)

143 
	#__CFLOAT16
 
_Com∂ex
 
_Flﬂt16


	)

147 #i‡
__HAVE_FLOAT32


148 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


149 
	#__CFLOAT32
 
_Com∂ex
 

	)

151 
	#__CFLOAT32
 
_Com∂ex
 
_Flﬂt32


	)

155 #i‡
__HAVE_FLOAT64


156 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


157 #ifde‡
__NO_LONG_DOUBLE_MATH


158 
	#__CFLOAT64
 
_Com∂ex
 

	)

160 
	#__CFLOAT64
 
_Com∂ex
 

	)

163 
	#__CFLOAT64
 
_Com∂ex
 
_Flﬂt64


	)

167 #i‡
__HAVE_FLOAT32X


168 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


169 
	#__CFLOAT32X
 
_Com∂ex
 

	)

171 
	#__CFLOAT32X
 
_Com∂ex
 
_Flﬂt32x


	)

175 #i‡
__HAVE_FLOAT64X


176 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


177 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


178 
	#__CFLOAT64X
 
_Com∂ex
 

	)

180 
	#__CFLOAT64X
 
__CFLOAT128


	)

183 
	#__CFLOAT64X
 
_Com∂ex
 
_Flﬂt64x


	)

187 #i‡
__HAVE_FLOAT128X


188 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


191 
	#__CFLOAT128X
 
_Com∂ex
 
_Flﬂt128x


	)

196 #i‡
__HAVE_FLOAT16


198 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


199 
	t_Flﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HF__
)));

202 #i‡!
__GNUC_PREREQ
 (7, 0)

203 
	#__buûtö_huge_vÆf16
(Ë((
_Flﬂt16
Ë
	`__buûtö_huge_vÆ
 ())

	)

204 
	#__buûtö_öff16
(Ë((
_Flﬂt16
Ë
	`__buûtö_öf
 ())

	)

205 
	#__buûtö_«nf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«n
 (x))

	)

206 
	#__buûtö_«nsf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«ns
 (x))

	)

211 #i‡
__HAVE_FLOAT32


213 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


214 
	t_Flﬂt32
;

217 #i‡!
__GNUC_PREREQ
 (7, 0)

218 
	#__buûtö_huge_vÆf32
(Ë(
	`__buûtö_huge_vÆf
 ())

	)

219 
	#__buûtö_öff32
(Ë(
	`__buûtö_öff
 ())

	)

220 
	#__buûtö_«nf32
(
x
Ë(
	`__buûtö_«nf
 (x))

	)

221 
	#__buûtö_«nsf32
(
x
Ë(
	`__buûtö_«nsf
 (x))

	)

226 #i‡
__HAVE_FLOAT64


235 #ifde‡
__NO_LONG_DOUBLE_MATH


237 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


238 
	t_Flﬂt64
;

241 #i‡!
__GNUC_PREREQ
 (7, 0)

242 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

243 
	#__buûtö_öff64
(Ë(
	`__buûtö_öÊ
 ())

	)

244 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

245 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

250 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


251 
	t_Flﬂt64
;

254 #i‡!
__GNUC_PREREQ
 (7, 0)

255 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

256 
	#__buûtö_öff64
(Ë(
	`__buûtö_öf
 ())

	)

257 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«n
 (x))

	)

258 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

265 #i‡
__HAVE_FLOAT32X


267 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


268 
	t_Flﬂt32x
;

271 #i‡!
__GNUC_PREREQ
 (7, 0)

272 
	#__buûtö_huge_vÆf32x
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

273 
	#__buûtö_öff32x
(Ë(
	`__buûtö_öf
 ())

	)

274 
	#__buûtö_«nf32x
(
x
Ë(
	`__buûtö_«n
 (x))

	)

275 
	#__buûtö_«nsf32x
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

280 #i‡
__HAVE_FLOAT64X


282 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


284 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


285 
	t_Flﬂt64x
;

288 #i‡!
__GNUC_PREREQ
 (7, 0)

289 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

290 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öÊ
 ())

	)

291 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

292 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

297 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


298 
_Flﬂt128
 
	t_Flﬂt64x
;

301 #i‡!
__GNUC_PREREQ
 (7, 0)

302 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆf128
 ())

	)

303 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öff128
 ())

	)

304 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«nf128
 (x))

	)

305 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«nsf128
 (x))

	)

312 #i‡
__HAVE_FLOAT128X


314 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


318 #i‡!
__GNUC_PREREQ
 (7, 0)

319 
	#__buûtö_huge_vÆf128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_huge_vÆ
 ())

	)

320 
	#__buûtö_öff128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_öf
 ())

	)

321 
	#__buûtö_«nf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«n
 (x))

	)

322 
	#__buûtö_«nsf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«ns
 (x))

	)

	@/usr/include/bits/getopt_core.h

20 #i‚de‡
_GETOPT_CORE_H


21 
	#_GETOPT_CORE_H
 1

	)

28 
__BEGIN_DECLS


36 *
›èrg
;

50 
›töd
;

55 
›ãº
;

59 
›t›t
;

91 
	$gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

92 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

94 
__END_DECLS


	@/usr/include/bits/libm-simd-decl-stubs.h

19 #i‚de‡
_MATH_H


33 #i‚de‡
_BITS_LIBM_SIMD_DECL_STUBS_H


34 
	#_BITS_LIBM_SIMD_DECL_STUBS_H
 1

	)

36 
	#__DECL_SIMD_cos


	)

37 
	#__DECL_SIMD_cosf


	)

38 
	#__DECL_SIMD_co¶


	)

39 
	#__DECL_SIMD_cosf16


	)

40 
	#__DECL_SIMD_cosf32


	)

41 
	#__DECL_SIMD_cosf64


	)

42 
	#__DECL_SIMD_cosf128


	)

43 
	#__DECL_SIMD_cosf32x


	)

44 
	#__DECL_SIMD_cosf64x


	)

45 
	#__DECL_SIMD_cosf128x


	)

47 
	#__DECL_SIMD_sö


	)

48 
	#__DECL_SIMD_söf


	)

49 
	#__DECL_SIMD_söl


	)

50 
	#__DECL_SIMD_söf16


	)

51 
	#__DECL_SIMD_söf32


	)

52 
	#__DECL_SIMD_söf64


	)

53 
	#__DECL_SIMD_söf128


	)

54 
	#__DECL_SIMD_söf32x


	)

55 
	#__DECL_SIMD_söf64x


	)

56 
	#__DECL_SIMD_söf128x


	)

58 
	#__DECL_SIMD_söcos


	)

59 
	#__DECL_SIMD_söcosf


	)

60 
	#__DECL_SIMD_söco¶


	)

61 
	#__DECL_SIMD_söcosf16


	)

62 
	#__DECL_SIMD_söcosf32


	)

63 
	#__DECL_SIMD_söcosf64


	)

64 
	#__DECL_SIMD_söcosf128


	)

65 
	#__DECL_SIMD_söcosf32x


	)

66 
	#__DECL_SIMD_söcosf64x


	)

67 
	#__DECL_SIMD_söcosf128x


	)

69 
	#__DECL_SIMD_log


	)

70 
	#__DECL_SIMD_logf


	)

71 
	#__DECL_SIMD_logl


	)

72 
	#__DECL_SIMD_logf16


	)

73 
	#__DECL_SIMD_logf32


	)

74 
	#__DECL_SIMD_logf64


	)

75 
	#__DECL_SIMD_logf128


	)

76 
	#__DECL_SIMD_logf32x


	)

77 
	#__DECL_SIMD_logf64x


	)

78 
	#__DECL_SIMD_logf128x


	)

80 
	#__DECL_SIMD_exp


	)

81 
	#__DECL_SIMD_expf


	)

82 
	#__DECL_SIMD_ex∂


	)

83 
	#__DECL_SIMD_expf16


	)

84 
	#__DECL_SIMD_expf32


	)

85 
	#__DECL_SIMD_expf64


	)

86 
	#__DECL_SIMD_expf128


	)

87 
	#__DECL_SIMD_expf32x


	)

88 
	#__DECL_SIMD_expf64x


	)

89 
	#__DECL_SIMD_expf128x


	)

91 
	#__DECL_SIMD_pow


	)

92 
	#__DECL_SIMD_powf


	)

93 
	#__DECL_SIMD_powl


	)

94 
	#__DECL_SIMD_powf16


	)

95 
	#__DECL_SIMD_powf32


	)

96 
	#__DECL_SIMD_powf64


	)

97 
	#__DECL_SIMD_powf128


	)

98 
	#__DECL_SIMD_powf32x


	)

99 
	#__DECL_SIMD_powf64x


	)

100 
	#__DECL_SIMD_powf128x


	)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/siginfo-arch.h

2 #i‚de‡
_BITS_SIGINFO_ARCH_H


3 
	#_BITS_SIGINFO_ARCH_H
 1

	)

5 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

12 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

13 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

14 
	#__SI_CLOCK_T
 
__sigchld_˛ock_t


	)

	@/usr/include/bits/siginfo-consts-arch.h

2 #i‚de‡
_BITS_SIGINFO_CONSTS_ARCH_H


3 
	#_BITS_SIGINFO_CONSTS_ARCH_H
 1

	)

	@/usr/include/bits/signum-generic.h

19 #i‚def 
_BITS_SIGNUM_GENERIC_H


20 
	#_BITS_SIGNUM_GENERIC_H
 1

	)

22 #i‚de‡
_SIGNAL_H


28 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

29 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

30 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

32 #ifde‡
__USE_XOPEN


33 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

48 
	#SIGINT
 2

	)

49 
	#SIGILL
 4

	)

50 
	#SIGABRT
 6

	)

51 
	#SIGFPE
 8

	)

52 
	#SIGSEGV
 11

	)

53 
	#SIGTERM
 15

	)

56 
	#SIGHUP
 1

	)

57 
	#SIGQUIT
 3

	)

58 
	#SIGTRAP
 5

	)

59 
	#SIGKILL
 9

	)

60 
	#SIGBUS
 10

	)

61 
	#SIGSYS
 12

	)

62 
	#SIGPIPE
 13

	)

63 
	#SIGALRM
 14

	)

66 
	#SIGURG
 16

	)

67 
	#SIGSTOP
 17

	)

68 
	#SIGTSTP
 18

	)

69 
	#SIGCONT
 19

	)

70 
	#SIGCHLD
 20

	)

71 
	#SIGTTIN
 21

	)

72 
	#SIGTTOU
 22

	)

73 
	#SIGPOLL
 23

	)

74 
	#SIGXCPU
 24

	)

75 
	#SIGXFSZ
 25

	)

76 
	#SIGVTALRM
 26

	)

77 
	#SIGPROF
 27

	)

78 
	#SIGUSR1
 30

	)

79 
	#SIGUSR2
 31

	)

83 
	#SIGWINCH
 28

	)

86 
	#SIGIO
 
SIGPOLL


	)

87 
	#SIGIOT
 
SIGABRT


	)

88 
	#SIGCLD
 
SIGCHLD


	)

96 
	#__SIGRTMIN
 32

	)

97 
	#__SIGRTMAX
 
__SIGRTMIN


	)

100 
	#_NSIG
 (
__SIGRTMAX
 + 1)

	)

	@/usr/include/bits/strings_fortified.h

19 #i‚de‡
__STRINGS_FORTIFIED


20 
	#__STRINGS_FORTIFIED
 1

	)

22 
__f‹tify_fun˘i⁄
 

23 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

25 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

26 
	}
}

28 
__f‹tify_fun˘i⁄
 

29 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

31 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

32 
	}
}

	@/usr/include/bits/thread-shared-types.h

19 #i‚de‡
_THREAD_SHARED_TYPES_H


20 
	#_THREAD_SHARED_TYPES_H
 1

	)

77 
	~<bôs/±hªadty≥s-¨ch.h
>

81 #i‡!
__PTHREAD_MUTEX_USE_UNION


82 
	s__±hªad_öã∫Æ_li°


84 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

85 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

86 } 
	t__±hªad_li°_t
;

88 
	s__±hªad_öã∫Æ_¶i°


90 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

91 } 
	t__±hªad_¶i°_t
;

95 #i‡
__PTHREAD_MUTEX_LOCK_ELISION


96 #i‡!
__PTHREAD_MUTEX_USE_UNION


97 
	#__PTHREAD_SPINS_DATA
 \

98 
__•ös
; \

99 
__ñisi⁄


	)

100 
	#__PTHREAD_SPINS
 0, 0

	)

102 
	#__PTHREAD_SPINS_DATA
 \

105 
__e•ös
; \

106 
__ìlisi⁄
; \

107 } 
__ñisi⁄_d©a


	)

108 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

109 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

110 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ìlisi⁄


	)

113 
	#__PTHREAD_SPINS_DATA
 
__•ös


	)

115 
	#__PTHREAD_SPINS
 0

	)

118 
	s__±hªad_muãx_s


120 
__lock
 
	m__LOCK_ALIGNMENT
;

121 
	m__cou¡
;

122 
	m__ow√r
;

123 #i‡!
__PTHREAD_MUTEX_NUSERS_AFTER_KIND


124 
	m__nu£rs
;

128 
	m__köd
;

129 
	m__PTHREAD_COMPAT_PADDING_MID


130 #i‡
__PTHREAD_MUTEX_NUSERS_AFTER_KIND


131 
	m__nu£rs
;

133 #i‡!
__PTHREAD_MUTEX_USE_UNION


134 
	m__PTHREAD_SPINS_DATA
;

135 
__±hªad_li°_t
 
	m__li°
;

136 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

138 
__exãnsi⁄__
 union

140 
	m__PTHREAD_SPINS_DATA
;

141 
__±hªad_¶i°_t
 
	m__li°
;

143 
	#__PTHREAD_MUTEX_HAVE_PREV
 0

	)

145 
	m__PTHREAD_COMPAT_PADDING_END


151 
	s__±hªad_c⁄d_s


153 
__exãnsi⁄__
 union

155 
__exãnsi⁄__
 
	m__w£q
;

158 
	m__low
;

159 
	m__high
;

160 } 
	m__w£q32
;

162 
__exãnsi⁄__
 union

164 
__exãnsi⁄__
 
	m__g1_°¨t
;

167 
	m__low
;

168 
	m__high
;

169 } 
	m__g1_°¨t32
;

171 
	m__g_ªfs
[2] 
	m__LOCK_ALIGNMENT
;

172 
	m__g_size
[2];

173 
	m__g1_‹ig_size
;

174 
	m__wªfs
;

175 
	m__g_sig«ls
[2];

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

22 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

26 
	stimex


28 
	mmodes
;

29 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

30 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

31 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

32 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

33 
	m°©us
;

34 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

35 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

36 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

37 
timevÆ
 
	mtime
;

38 
__sysˇŒ_¶⁄g_t
 
	mtick
;

39 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

40 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

41 
	mshi·
;

42 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

43 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

46 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

48 
	mèi
;

57 
	#ADJ_OFFSET
 0x0001

	)

58 
	#ADJ_FREQUENCY
 0x0002

	)

59 
	#ADJ_MAXERROR
 0x0004

	)

60 
	#ADJ_ESTERROR
 0x0008

	)

61 
	#ADJ_STATUS
 0x0010

	)

62 
	#ADJ_TIMECONST
 0x0020

	)

63 
	#ADJ_TAI
 0x0080

	)

64 
	#ADJ_SETOFFSET
 0x0100

	)

65 
	#ADJ_MICRO
 0x1000

	)

66 
	#ADJ_NANO
 0x2000

	)

67 
	#ADJ_TICK
 0x4000

	)

68 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

69 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

72 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

73 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

74 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

75 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

76 
	#MOD_STATUS
 
ADJ_STATUS


	)

77 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

78 
	#MOD_CLKB
 
ADJ_TICK


	)

79 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

80 
	#MOD_TAI
 
ADJ_TAI


	)

81 
	#MOD_MICRO
 
ADJ_MICRO


	)

82 
	#MOD_NANO
 
ADJ_NANO


	)

86 
	#STA_PLL
 0x0001

	)

87 
	#STA_PPSFREQ
 0x0002

	)

88 
	#STA_PPSTIME
 0x0004

	)

89 
	#STA_FLL
 0x0008

	)

91 
	#STA_INS
 0x0010

	)

92 
	#STA_DEL
 0x0020

	)

93 
	#STA_UNSYNC
 0x0040

	)

94 
	#STA_FREQHOLD
 0x0080

	)

96 
	#STA_PPSSIGNAL
 0x0100

	)

97 
	#STA_PPSJITTER
 0x0200

	)

98 
	#STA_PPSWANDER
 0x0400

	)

99 
	#STA_PPSERROR
 0x0800

	)

101 
	#STA_CLOCKERR
 0x1000

	)

102 
	#STA_NANO
 0x2000

	)

103 
	#STA_MODE
 0x4000

	)

104 
	#STA_CLK
 0x8000

	)

107 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

108 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/types/__locale_t.h

20 #i‚de‡
_BITS_TYPES___LOCALE_T_H


21 
	#_BITS_TYPES___LOCALE_T_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

42 
__loˇÀ_°ru˘
 *
	t__loˇÀ_t
;

	@/usr/include/bits/types/__mbstate_t.h

1 #i‚de‡
____mb°©e_t_deföed


2 
	#____mb°©e_t_deföed
 1

	)

8 #i‚de‡
__WINT_TYPE__


9 
	#__WINT_TYPE__
 

	)

15 
	m__cou¡
;

18 
__WINT_TYPE__
 
	m__wch
;

19 
	m__wchb
[4];

20 } 
	m__vÆue
;

21 } 
	t__mb°©e_t
;

	@/usr/include/bits/types/__sigset_t.h

1 #i‚de‡
____sig£t_t_deföed


2 
	#____sig£t_t_deföed


	)

4 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

7 
	m__vÆ
[
_SIGSET_NWORDS
];

8 } 
	t__sig£t_t
;

	@/usr/include/bits/types/__sigval_t.h

19 #i‚de‡
____sigvÆ_t_deföed


20 
	#____sigvÆ_t_deföed


	)

23 #ifde‡
__USE_POSIX199309


24 
	usigvÆ


26 
	msivÆ_öt
;

27 *
	msivÆ_±r
;

30 
sigvÆ
 
	t__sigvÆ_t
;

32 
	u__sigvÆ


34 
	m__sivÆ_öt
;

35 *
	m__sivÆ_±r
;

38 
__sigvÆ
 
	t__sigvÆ_t
;

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__RLIM_T_MATCHES_RLIM64_T
 1

	)

88 
	#__RLIM_T_MATCHES_RLIM64_T
 0

	)

92 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uintn-identity.h

19 #i‡!
deföed
 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_UINTN_IDENTITY_H


24 
	#_BITS_UINTN_IDENTITY_H
 1

	)

26 
	~<bôs/ty≥s.h
>

32 
__ölöe
 
__uöt16_t


33 
	$__uöt16_idítôy
 (
__uöt16_t
 
__x
)

35  
__x
;

36 
	}
}

38 
__ölöe
 
__uöt32_t


39 
	$__uöt32_idítôy
 (
__uöt32_t
 
__x
)

41  
__x
;

42 
	}
}

44 
__ölöe
 
__uöt64_t


45 
	$__uöt64_idítôy
 (
__uöt64_t
 
__x
)

47  
__x
;

48 
	}
}

	@/usr/include/bits/uio_lim.h

19 #i‚de‡
_BITS_UIO_LIM_H


20 
	#_BITS_UIO_LIM_H
 1

	)

30 
	#__IOV_MAX
 1024

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

58 
	#__NTHNL
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__NTHNL
(
f˘
Ëf˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
fct

69 
	#__NTHNL
(
f˘
Ë
	)
fct

75 #i‡(
deföed
 
__˝lu•lus
 \

76 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

77 
	#__ölöe
 
ölöe


	)

79 
	#__ölöe


	)

82 
	#__THROW


	)

83 
	#__THROWNL


	)

84 
	#__NTH
(
f˘
Ë
	)
fct

91 #i‡
deföed
 
__˛™g__
 && deföed 
__has_exãnsi⁄


92 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë
	`__has_exãnsi⁄
 (ext)

	)

94 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë0

	)

99 
	#__P
(
¨gs
Ë
	)
args

100 
	#__PMT
(
¨gs
Ë
	)
args

105 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

106 
	#__STRING
(
x
Ë#x

	)

109 
	#__±r_t
 *

	)

113 #ifdef 
__˝lu•lus


114 
	#__BEGIN_DECLS
 "C" {

	)

115 
	#__END_DECLS
 }

	)

117 
	#__BEGIN_DECLS


	)

118 
	#__END_DECLS


	)

123 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

124 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

126 #i‡
__GNUC_PREREQ
 (4,3)

127 
	#__w¨nde˛
(
«me
, 
msg
) \

128 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

129 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

130 
	#__îr‹de˛
(
«me
, 
msg
) \

131 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

133 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

134 
	#__w¨«âr
(
msg
)

	)

135 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

142 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

143 
	#__Êex¨r
 []

	)

144 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

145 #ñi‡
__GNUC_PREREQ
 (2,97)

148 
	#__Êex¨r
 []

	)

149 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

150 #ñi‡
deföed
 
__GNUC__


153 
	#__Êex¨r
 [0]

	)

154 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

157 
	#__Êex¨r
 [1]

	)

158 
	#__glibc_c99_Êex¨r_avaûabÀ
 0

	)

172 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

174 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

175 #ifde‡
__˝lu•lus


176 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

177 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

179 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

183 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

184 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

186 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

187 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

200 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

201 
	#__©åibuã__
(
xyz
Ë

	)

207 #i‡
__GNUC_PREREQ
 (2,96)

208 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

210 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (4, 3)

216 
	#__©åibuã_Æloc_size__
(
∑øms
) \

217 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

219 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

225 #i‡
__GNUC_PREREQ
 (2,96)

226 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

228 
	#__©åibuã_puª__


	)

232 #i‡
__GNUC_PREREQ
 (2,5)

233 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

235 
	#__©åibuã_c⁄°__


	)

241 #i‡
__GNUC_PREREQ
 (3,1)

242 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

243 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

246 
	#__©åibuã_noölöe__


	)

250 #i‡
__GNUC_PREREQ
 (3,2)

251 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

253 
	#__©åibuã_dïªˇãd__


	)

259 #i‡
__GNUC_PREREQ
 (4,5) || \

260 
	$__glibc_˛™g_has_exãnsi⁄
 (
__©åibuã_dïªˇãd_wôh_mesßge__
)

261 
	#__©åibuã_dïªˇãd_msg__
(
msg
) \

262 
	`__©åibuã__
 ((
	`__dïªˇãd__
 (
msg
)))

	)

264 
	#__©åibuã_dïªˇãd_msg__
(
msg
Ë
__©åibuã_dïªˇãd__


	)

273 #i‡
	`__GNUC_PREREQ
 (2,8)

274 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

276 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

283 #i‡
	`__GNUC_PREREQ
 (2,97)

284 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

285 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

287 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

292 #i‡
	`__GNUC_PREREQ
 (3,3)

293 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

295 
	#__n⁄nuŒ
(
∑øms
)

	)

300 #i‡
	`__GNUC_PREREQ
 (3,4)

301 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

302 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

303 #i‡
__USE_FORTIFY_LEVEL
 > 0

304 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

307 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

309 #i‚de‡
__wur


310 
	#__wur


	)

314 #i‡
	`__GNUC_PREREQ
 (3,2)

318 #unde‡
__Æways_ölöe


319 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

321 #unde‡
__Æways_ölöe


322 
	#__Æways_ölöe
 
__ölöe


	)

327 #i‡
	`__GNUC_PREREQ
 (4,3)

328 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

330 
	#__©åibuã_¨tificül__


	)

342 #i‡(!
deföed
 
__˝lu•lus
 || 
	`__GNUC_PREREQ
 (4,3) \

343 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

344 || 
deföed
 
__GNUC_GNU_INLINE__
)))

345 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


346 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

347 
	#__exã∫_Æways_ölöe
 \

348 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

350 
	#__exã∫_ölöe
 
__ölöe


	)

351 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

355 #ifde‡
__exã∫_Æways_ölöe


356 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

361 #i‡
	`__GNUC_PREREQ
 (4,3)

362 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

363 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

370 #i‡!
	`__GNUC_PREREQ
 (2,8)

371 
	#__exãnsi⁄__


	)

375 #i‡!
	`__GNUC_PREREQ
 (2,92)

376 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

377 
	#__ª°ri˘
 
ª°ri˘


	)

379 
	#__ª°ri˘


	)

386 #i‡
	`__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


387 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

389 #ifde‡
__GNUC__


390 
	#__ª°ri˘_¨r


	)

392 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

393 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

396 
	#__ª°ri˘_¨r


	)

401 #i‡
__GNUC__
 >= 3

402 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

403 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

405 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

406 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

409 #ifde‡
__has_©åibuã


410 
	#__glibc_has_©åibuã
(
©å
Ë
	`__has_©åibuã
 (©å)

	)

412 
	#__glibc_has_©åibuã
(
©å
Ë0

	)

415 #i‡(!
deföed
 
_N‹ëu∫
 \

416 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

417 && !
	$__GNUC_PREREQ
 (4,7))

418 #i‡
	`__GNUC_PREREQ
 (2,8)

419 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

421 
	#_N‹ëu∫


	)

425 #i‡
	`__GNUC_PREREQ
 (8, 0)

429 
	#__©åibuã_n⁄°rög__
 
	`__©åibuã__
 ((
__n⁄°rög__
))

	)

431 
	#__©åibuã_n⁄°rög__


	)

434 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

435 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

436 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

437 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

438 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

439 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

442 
	~<bôs/w‹dsize.h
>

443 
	~<bôs/l⁄g-doubÀ.h
>

445 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


446 
	#__LDBL_COMPAT
 1

	)

447 #ifde‡
__REDIRECT


448 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

449 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

450 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

451 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

452 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

453 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

454 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

455 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

456 
	#__LDBL_REDIR_DECL
(
«me
) \

457 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

458 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

459 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

460 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

461 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

464 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


465 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

466 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

467 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

468 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

469 
	#__LDBL_REDIR_DECL
(
«me
)

	)

470 #ifde‡
__REDIRECT


471 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

472 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

473 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

482 #i‡
	`__GNUC_PREREQ
 (4,8Ë|| 
	`__glibc_˛™g_¥îeq
 (3,5)

483 
	#__glibc_ma¸o_w¨nög1
(
mesßge
Ë
	`_Pøgma
 (#mesßge)

	)

484 
	#__glibc_ma¸o_w¨nög
(
mesßge
) \

485 
	`__glibc_ma¸o_w¨nög1
 (
GCC
 
w¨nög
 
mesßge
)

	)

487 
	#__glibc_ma¸o_w¨nög
(
msg
)

	)

497 #i‡!
deföed
 
__˝lu•lus
 \

498 && (
	`__GNUC_PREREQ
 (4, 9) \

499 || 
	`__glibc_˛™g_has_exãnsi⁄
 (
c_gíîic_£À˘i⁄s
) \

500 || (!
deföed
 
__GNUC__
 && deföed 
__STDC_VERSION__
 \

501 && 
__STDC_VERSION__
 >= 201112L))

502 
	#__HAVE_GENERIC_SELECTION
 1

	)

504 
	#__HAVE_GENERIC_SELECTION
 0

	)

	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #ifde‡
__USE_XOPEN2K8


30 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 
	~<bôs/ty≥s/time_t.h
>

39 #i‚de‡
__dev_t_deföed


40 
__dev_t
 
	tdev_t
;

41 
	#__dev_t_deföed


	)

44 #i‚de‡
__gid_t_deföed


45 
__gid_t
 
	tgid_t
;

46 
	#__gid_t_deföed


	)

49 #i‚de‡
__öo_t_deföed


50 #i‚de‡
__USE_FILE_OFFSET64


51 
__öo_t
 
	töo_t
;

53 
__öo64_t
 
	töo_t
;

55 
	#__öo_t_deföed


	)

58 #i‚de‡
__mode_t_deföed


59 
__mode_t
 
	tmode_t
;

60 
	#__mode_t_deföed


	)

63 #i‚de‡
__∆ök_t_deföed


64 
__∆ök_t
 
	t∆ök_t
;

65 
	#__∆ök_t_deföed


	)

68 #i‚de‡
__off_t_deföed


69 #i‚de‡
__USE_FILE_OFFSET64


70 
__off_t
 
	toff_t
;

72 
__off64_t
 
	toff_t
;

74 
	#__off_t_deföed


	)

77 #i‚de‡
__uid_t_deföed


78 
__uid_t
 
	tuid_t
;

79 
	#__uid_t_deföed


	)

83 #ifde‡
__USE_UNIX98


84 #i‚de‡
__blk˙t_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__blk˙t_t
 
	tblk˙t_t
;

88 
__blk˙t64_t
 
	tblk˙t_t
;

90 
	#__blk˙t_t_deföed


	)

93 #i‚de‡
__blksize_t_deföed


94 
__blksize_t
 
	tblksize_t
;

95 
	#__blksize_t_deföed


	)

99 
	g__BEGIN_DECLS


101 
	~<bôs/°©.h
>

103 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


104 
	#S_IFMT
 
__S_IFMT


	)

105 
	#S_IFDIR
 
__S_IFDIR


	)

106 
	#S_IFCHR
 
__S_IFCHR


	)

107 
	#S_IFBLK
 
__S_IFBLK


	)

108 
	#S_IFREG
 
__S_IFREG


	)

109 #ifde‡
__S_IFIFO


110 
	#S_IFIFO
 
__S_IFIFO


	)

112 #ifde‡
__S_IFLNK


113 
	#S_IFLNK
 
__S_IFLNK


	)

115 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
) \

116 && 
deföed
 
	g__S_IFSOCK


117 
	#S_IFSOCK
 
__S_IFSOCK


	)

123 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

125 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

126 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

127 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

128 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

129 #ifde‡
__S_IFIFO


130 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

132 #ifde‡
__S_IFLNK


133 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

136 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë0

	)

140 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K
) \

141 && 
deföed
 
	g__S_IFSOCK


142 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

143 #ñi‡
deföed
 
__USE_XOPEN2K


144 
	#S_ISSOCK
(
mode
Ë0

	)

151 #ifdef 
__USE_POSIX199309


152 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

153 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

154 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

160 
	#S_ISUID
 
__S_ISUID


	)

161 
	#S_ISGID
 
__S_ISGID


	)

163 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


165 
	#S_ISVTX
 
__S_ISVTX


	)

168 
	#S_IRUSR
 
__S_IREAD


	)

169 
	#S_IWUSR
 
__S_IWRITE


	)

170 
	#S_IXUSR
 
__S_IEXEC


	)

172 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

174 #ifde‡
__USE_MISC


175 
	#S_IREAD
 
S_IRUSR


	)

176 
	#S_IWRITE
 
S_IWUSR


	)

177 
	#S_IEXEC
 
S_IXUSR


	)

180 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

181 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

182 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

184 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

186 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

187 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

188 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

190 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

193 #ifdef 
__USE_MISC


195 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

196 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

197 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

199 
	#S_BLKSIZE
 512

	)

203 #i‚de‡
__USE_FILE_OFFSET64


205 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

206 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

210 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

212 #ifde‡
__REDIRECT_NTH


213 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

214 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

215 
	`__n⁄nuŒ
 ((1, 2));

216 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

217 
	`__n⁄nuŒ
 ((2));

219 
	#°©
 
°©64


	)

220 
	#f°©
 
f°©64


	)

223 #ifde‡
__USE_LARGEFILE64


224 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

225 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

226 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

229 #ifde‡
__USE_ATFILE


233 #i‚de‡
__USE_FILE_OFFSET64


234 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

235 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

236 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

238 #ifde‡
__REDIRECT_NTH


239 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

240 
°©
 *
__ª°ri˘
 
__buf
,

241 
__Êag
),

242 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

244 
	#f°©©
 
f°©©64


	)

248 #ifde‡
__USE_LARGEFILE64


249 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

250 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

251 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

255 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


256 #i‚de‡
__USE_FILE_OFFSET64


259 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

260 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT_NTH


263 
	`__REDIRECT_NTH
 (
l°©
,

264 (c⁄° *
__ª°ri˘
 
__fûe
,

265 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

266 
	`__n⁄nuŒ
 ((1, 2));

268 
	#l°©
 
l°©64


	)

271 #ifde‡
__USE_LARGEFILE64


272 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

273 
°©64
 *
__ª°ri˘
 
__buf
)

274 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

280 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1));

283 #ifde‡
__USE_MISC


287 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


293 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

296 #ifde‡
__USE_ATFILE


299 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

300 
__Êag
)

301 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

308 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

310 #ifdef 
__USE_GNU


313 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

317 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1));

320 #ifde‡
__USE_ATFILE


324 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

325 
__THROW
 
	`__n⁄nuŒ
 ((2));

331 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


332 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 #ifde‡
__USE_ATFILE


339 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

340 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1));

349 #ifde‡
__USE_ATFILE


353 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

354 
__THROW
 
	`__n⁄nuŒ
 ((2));

357 #ifde‡
__USE_ATFILE


360 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

361 c⁄° 
time•ec
 
__times
[2],

362 
__Êags
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 #ifde‡
__USE_XOPEN2K8


368 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

386 #i‚de‡
_STAT_VER


387 
	#_STAT_VER
 0

	)

389 #i‚de‡
_MKNOD_VER


390 
	#_MKNOD_VER
 0

	)

394 #i‚de‡
__USE_FILE_OFFSET64


395 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

396 
__THROW
 
	`__n⁄nuŒ
 ((3));

397 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

398 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

399 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

400 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

401 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

402 
°©
 *
__°©_buf
, 
__Êag
)

403 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

405 #ifde‡
__REDIRECT_NTH


406 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

407 
°©
 *
__°©_buf
), 
__fx°©64
)

408 
	`__n⁄nuŒ
 ((3));

409 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

410 
°©
 *
__°©_buf
), 
__x°©64
)

411 
	`__n⁄nuŒ
 ((2, 3));

412 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

413 
°©
 *
__°©_buf
), 
__lx°©64
)

414 
	`__n⁄nuŒ
 ((2, 3));

415 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

416 c⁄° *
__fûíame
,

417 
°©
 *
__°©_buf
, 
__Êag
),

418 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

421 
	#__fx°©
 
__fx°©64


	)

422 
	#__x°©
 
__x°©64


	)

423 
	#__lx°©
 
__lx°©64


	)

427 #ifde‡
__USE_LARGEFILE64


428 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

429 
__THROW
 
	`__n⁄nuŒ
 ((3));

430 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

431 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

432 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

433 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

434 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

435 
°©64
 *
__°©_buf
, 
__Êag
)

436 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

438 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

439 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

441 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

442 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

443 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

445 #ifde‡
__USE_GNU


446 
	~<bôs/°©x.h
>

449 #ifde‡
__USE_EXTERN_INLINES


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #ifde‡
__USE_MISC


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/X11/Xdefs.h

28 #i‚de‡
_XDEFS_H


29 
	#_XDEFS_H


	)

31 #ifde‡
_XSERVER64


32 
	~<X11/Xmd.h
>

35 #i‚de‡
_XTYPEDEF_ATOM


36 
	#_XTYPEDEF_ATOM


	)

37 #i‚de‡
_XSERVER64


38 
	tAtom
;

40 
CARD32
 
	tAtom
;

44 #i‚de‡
Boﬁ


45 #i‚de‡
_XTYPEDEF_BOOL


46 
	#_XTYPEDEF_BOOL


	)

47 
	tBoﬁ
;

51 #i‚de‡
_XTYPEDEF_POINTER


52 
	#_XTYPEDEF_POINTER


	)

53 *
	tpoöãr
;

56 #i‚de‡
_XTYPEDEF_CLIENTPTR


57 
_Clõ¡
 *
	tClõ¡På
;

58 
	#_XTYPEDEF_CLIENTPTR


	)

61 #i‚de‡
_XTYPEDEF_XID


62 
	#_XTYPEDEF_XID


	)

63 #i‚de‡
_XSERVER64


64 
	tXID
;

66 
CARD32
 
	tXID
;

70 #i‚de‡
_XTYPEDEF_MASK


71 
	#_XTYPEDEF_MASK


	)

72 #i‚de‡
_XSERVER64


73 
	tMask
;

75 
CARD32
 
	tMask
;

79 #i‚de‡
_XTYPEDEF_FONTPTR


80 
	#_XTYPEDEF_FONTPTR


	)

81 
_F⁄t
 *
	tF⁄tPå
;

84 #i‚de‡
_XTYPEDEF_FONT


85 
	#_XTYPEDEF_FONT


	)

86 
XID
 
	tF⁄t
;

89 #i‚de‡
_XTYPEDEF_FSID


90 #i‚de‡
_XSERVER64


91 
	tFSID
;

93 
CARD32
 
	tFSID
;

97 
FSID
 
	tAccC⁄ãxt
;

101 
timevÆ
 **
	tOSTimePå
;

104 (* 
	tBlockH™dÀrProcPå
)(* ,

105 
	tOSTimePå
 ,

	@/usr/include/asm-generic/ioctls.h

2 #i‚de‡
__ASM_GENERIC_IOCTLS_H


3 
	#__ASM_GENERIC_IOCTLS_H


	)

5 
	~<löux/io˘l.h
>

20 
	#TCGETS
 0x5401

	)

21 
	#TCSETS
 0x5402

	)

22 
	#TCSETSW
 0x5403

	)

23 
	#TCSETSF
 0x5404

	)

24 
	#TCGETA
 0x5405

	)

25 
	#TCSETA
 0x5406

	)

26 
	#TCSETAW
 0x5407

	)

27 
	#TCSETAF
 0x5408

	)

28 
	#TCSBRK
 0x5409

	)

29 
	#TCXONC
 0x540A

	)

30 
	#TCFLSH
 0x540B

	)

31 
	#TIOCEXCL
 0x540C

	)

32 
	#TIOCNXCL
 0x540D

	)

33 
	#TIOCSCTTY
 0x540E

	)

34 
	#TIOCGPGRP
 0x540F

	)

35 
	#TIOCSPGRP
 0x5410

	)

36 
	#TIOCOUTQ
 0x5411

	)

37 
	#TIOCSTI
 0x5412

	)

38 
	#TIOCGWINSZ
 0x5413

	)

39 
	#TIOCSWINSZ
 0x5414

	)

40 
	#TIOCMGET
 0x5415

	)

41 
	#TIOCMBIS
 0x5416

	)

42 
	#TIOCMBIC
 0x5417

	)

43 
	#TIOCMSET
 0x5418

	)

44 
	#TIOCGSOFTCAR
 0x5419

	)

45 
	#TIOCSSOFTCAR
 0x541A

	)

46 
	#FIONREAD
 0x541B

	)

47 
	#TIOCINQ
 
FIONREAD


	)

48 
	#TIOCLINUX
 0x541C

	)

49 
	#TIOCCONS
 0x541D

	)

50 
	#TIOCGSERIAL
 0x541E

	)

51 
	#TIOCSSERIAL
 0x541F

	)

52 
	#TIOCPKT
 0x5420

	)

53 
	#FIONBIO
 0x5421

	)

54 
	#TIOCNOTTY
 0x5422

	)

55 
	#TIOCSETD
 0x5423

	)

56 
	#TIOCGETD
 0x5424

	)

57 
	#TCSBRKP
 0x5425

	)

58 
	#TIOCSBRK
 0x5427

	)

59 
	#TIOCCBRK
 0x5428

	)

60 
	#TIOCGSID
 0x5429

	)

61 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

62 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

63 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

64 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

65 
	#TIOCGRS485
 0x542E

	)

66 #i‚de‡
TIOCSRS485


67 
	#TIOCSRS485
 0x542F

	)

69 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

70 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

71 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

72 
	#TCGETX
 0x5432

	)

73 
	#TCSETX
 0x5433

	)

74 
	#TCSETXF
 0x5434

	)

75 
	#TCSETXW
 0x5435

	)

76 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

77 
	#TIOCVHANGUP
 0x5437

	)

78 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

79 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

80 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#TIOCGPTPEER
 
	`_IO
('T', 0x41Ë

	)

83 
	#FIONCLEX
 0x5450

	)

84 
	#FIOCLEX
 0x5451

	)

85 
	#FIOASYNC
 0x5452

	)

86 
	#TIOCSERCONFIG
 0x5453

	)

87 
	#TIOCSERGWILD
 0x5454

	)

88 
	#TIOCSERSWILD
 0x5455

	)

89 
	#TIOCGLCKTRMIOS
 0x5456

	)

90 
	#TIOCSLCKTRMIOS
 0x5457

	)

91 
	#TIOCSERGSTRUCT
 0x5458

	)

92 
	#TIOCSERGETLSR
 0x5459

	)

93 
	#TIOCSERGETMULTI
 0x545A

	)

94 
	#TIOCSERSETMULTI
 0x545B

	)

96 
	#TIOCMIWAIT
 0x545C

	)

97 
	#TIOCGICOUNT
 0x545D

	)

103 #i‚de‡
FIOQSIZE


104 
	#FIOQSIZE
 0x5460

	)

108 
	#TIOCPKT_DATA
 0

	)

109 
	#TIOCPKT_FLUSHREAD
 1

	)

110 
	#TIOCPKT_FLUSHWRITE
 2

	)

111 
	#TIOCPKT_STOP
 4

	)

112 
	#TIOCPKT_START
 8

	)

113 
	#TIOCPKT_NOSTOP
 16

	)

114 
	#TIOCPKT_DOSTOP
 32

	)

115 
	#TIOCPKT_IOCTL
 64

	)

117 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/long-double.h

	@/usr/include/bits/pthreadtypes-arch.h

18 #i‚de‡
_BITS_PTHREADTYPES_ARCH_H


19 
	#_BITS_PTHREADTYPES_ARCH_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

29 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

31 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

32 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

33 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

34 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

35 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

38 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

39 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

40 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

45 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

46 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

47 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

48 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

51 
	#__PTHREAD_COMPAT_PADDING_MID


	)

52 
	#__PTHREAD_COMPAT_PADDING_END


	)

53 
	#__PTHREAD_MUTEX_LOCK_ELISION
 1

	)

54 #ifde‡
__x86_64__


55 
	#__PTHREAD_MUTEX_NUSERS_AFTER_KIND
 0

	)

56 
	#__PTHREAD_MUTEX_USE_UNION
 0

	)

58 
	#__PTHREAD_MUTEX_NUSERS_AFTER_KIND
 1

	)

59 
	#__PTHREAD_MUTEX_USE_UNION
 1

	)

62 
	#__LOCK_ALIGNMENT


	)

63 
	#__ONCE_ALIGNMENT


	)

65 
	s__±hªad_rwlock_¨ch_t


67 
	m__ªadîs
;

68 
	m__wrôîs
;

69 
	m__wΩha£_fuãx
;

70 
	m__wrôîs_fuãx
;

71 
	m__∑d3
;

72 
	m__∑d4
;

73 #ifde‡
__x86_64__


74 
	m__cur_wrôî
;

75 
	m__sh¨ed
;

76 sig√d 
	m__rwñisi⁄
;

77 #ifde‡ 
__ILP32__


78 
	m__∑d1
[3];

79 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

81 
	m__∑d1
[7];

82 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

84 
	m__∑d2
;

87 
	m__Êags
;

88 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

92 
	m__Êags
;

93 
	m__sh¨ed
;

94 sig√d 
	m__rwñisi⁄
;

95 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

96 
	m__∑d2
;

97 
	m__cur_wrôî
;

101 #i‚de‡
__x86_64__


103 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/statx.h

21 #i‚de‡
_SYS_STAT_H


22 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
°©
.
x
.
h
> 
dúe˘ly
, in˛udê<
sys
/°©.h> 
ö°ód
.

25 
	s°©x_time°amp


27 
__öt64_t
 
	mtv_£c
;

28 
__uöt32_t
 
	mtv_n£c
;

29 
__öt32_t
 
	m__°©x_time°amp_∑d1
[1];

36 
	s°©x


38 
__uöt32_t
 
	m°x_mask
;

39 
__uöt32_t
 
	m°x_blksize
;

40 
__uöt64_t
 
	m°x_©åibuãs
;

41 
__uöt32_t
 
	m°x_∆ök
;

42 
__uöt32_t
 
	m°x_uid
;

43 
__uöt32_t
 
	m°x_gid
;

44 
__uöt16_t
 
	m°x_mode
;

45 
__uöt16_t
 
	m__°©x_∑d1
[1];

46 
__uöt64_t
 
	m°x_öo
;

47 
__uöt64_t
 
	m°x_size
;

48 
__uöt64_t
 
	m°x_blocks
;

49 
__uöt64_t
 
	m°x_©åibuãs_mask
;

50 
°©x_time°amp
 
	m°x_©ime
;

51 
°©x_time°amp
 
	m°x_btime
;

52 
°©x_time°amp
 
	m°x_˘ime
;

53 
°©x_time°amp
 
	m°x_mtime
;

54 
__uöt32_t
 
	m°x_rdev_maj‹
;

55 
__uöt32_t
 
	m°x_rdev_mö‹
;

56 
__uöt32_t
 
	m°x_dev_maj‹
;

57 
__uöt32_t
 
	m°x_dev_mö‹
;

58 
__uöt64_t
 
	m__°©x_∑d2
[14];

61 
	#STATX_TYPE
 0x0001U

	)

62 
	#STATX_MODE
 0x0002U

	)

63 
	#STATX_NLINK
 0x0004U

	)

64 
	#STATX_UID
 0x0008U

	)

65 
	#STATX_GID
 0x0010U

	)

66 
	#STATX_ATIME
 0x0020U

	)

67 
	#STATX_MTIME
 0x0040U

	)

68 
	#STATX_CTIME
 0x0080U

	)

69 
	#STATX_INO
 0x0100U

	)

70 
	#STATX_SIZE
 0x0200U

	)

71 
	#STATX_BLOCKS
 0x0400U

	)

72 
	#STATX_BASIC_STATS
 0x07ffU

	)

73 
	#STATX_ALL
 0x0fffU

	)

74 
	#STATX_BTIME
 0x0800U

	)

75 
	#STATX__RESERVED
 0x80000000U

	)

77 
	#STATX_ATTR_COMPRESSED
 0x0004

	)

78 
	#STATX_ATTR_IMMUTABLE
 0x0010

	)

79 
	#STATX_ATTR_APPEND
 0x0020

	)

80 
	#STATX_ATTR_NODUMP
 0x0040

	)

81 
	#STATX_ATTR_ENCRYPTED
 0x0800

	)

82 
	#STATX_ATTR_AUTOMOUNT
 0x1000

	)

84 
__BEGIN_DECLS


87 
	$°©x
 (
__dúfd
, c⁄° *
__ª°ri˘
 
__∑th
, 
__Êags
,

88 
__mask
, 
°©x
 *
__ª°ri˘
 
__buf
)

89 
__THROW
 
	`__n⁄nuŒ
 ((2, 5));

91 
__END_DECLS


	@/usr/include/bits/types/struct_iovec.h

19 #i‚de‡
__iovec_deföed


20 
	#__iovec_deföed
 1

	)

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 
	siovec


28 *
	miov_ba£
;

29 
size_t
 
	miov_Àn
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/falloc.h

2 #i‚de‡
_FALLOC_H_


3 
	#_FALLOC_H_


	)

5 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

6 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

7 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

29 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

43 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

60 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

78 
	#FALLOC_FL_UNSHARE_RANGE
 0x40

	)

	@/usr/include/linux/limits.h

2 #i‚de‡
_LINUX_LIMITS_H


3 
	#_LINUX_LIMITS_H


	)

5 
	#NR_OPEN
 1024

	)

7 
	#NGROUPS_MAX
 65536

	)

8 
	#ARG_MAX
 131072

	)

9 
	#LINK_MAX
 127

	)

10 
	#MAX_CANON
 255

	)

11 
	#MAX_INPUT
 255

	)

12 
	#NAME_MAX
 255

	)

13 
	#PATH_MAX
 4096

	)

14 
	#PIPE_BUF
 4096

	)

15 
	#XATTR_NAME_MAX
 255

	)

16 
	#XATTR_SIZE_MAX
 65536

	)

17 
	#XATTR_LIST_MAX
 65536

	)

19 
	#RTSIG_MAX
 32

	)

	@/usr/include/asm-generic/errno.h

2 #i‚de‡
_ASM_GENERIC_ERRNO_H


3 
	#_ASM_GENERIC_ERRNO_H


	)

5 
	~<asm-gíîic/î∫o-ba£.h
>

7 
	#EDEADLK
 35

	)

8 
	#ENAMETOOLONG
 36

	)

9 
	#ENOLCK
 37

	)

18 
	#ENOSYS
 38

	)

20 
	#ENOTEMPTY
 39

	)

21 
	#ELOOP
 40

	)

22 
	#EWOULDBLOCK
 
EAGAIN


	)

23 
	#ENOMSG
 42

	)

24 
	#EIDRM
 43

	)

25 
	#ECHRNG
 44

	)

26 
	#EL2NSYNC
 45

	)

27 
	#EL3HLT
 46

	)

28 
	#EL3RST
 47

	)

29 
	#ELNRNG
 48

	)

30 
	#EUNATCH
 49

	)

31 
	#ENOCSI
 50

	)

32 
	#EL2HLT
 51

	)

33 
	#EBADE
 52

	)

34 
	#EBADR
 53

	)

35 
	#EXFULL
 54

	)

36 
	#ENOANO
 55

	)

37 
	#EBADRQC
 56

	)

38 
	#EBADSLT
 57

	)

40 
	#EDEADLOCK
 
EDEADLK


	)

42 
	#EBFONT
 59

	)

43 
	#ENOSTR
 60

	)

44 
	#ENODATA
 61

	)

45 
	#ETIME
 62

	)

46 
	#ENOSR
 63

	)

47 
	#ENONET
 64

	)

48 
	#ENOPKG
 65

	)

49 
	#EREMOTE
 66

	)

50 
	#ENOLINK
 67

	)

51 
	#EADV
 68

	)

52 
	#ESRMNT
 69

	)

53 
	#ECOMM
 70

	)

54 
	#EPROTO
 71

	)

55 
	#EMULTIHOP
 72

	)

56 
	#EDOTDOT
 73

	)

57 
	#EBADMSG
 74

	)

58 
	#EOVERFLOW
 75

	)

59 
	#ENOTUNIQ
 76

	)

60 
	#EBADFD
 77

	)

61 
	#EREMCHG
 78

	)

62 
	#ELIBACC
 79

	)

63 
	#ELIBBAD
 80

	)

64 
	#ELIBSCN
 81

	)

65 
	#ELIBMAX
 82

	)

66 
	#ELIBEXEC
 83

	)

67 
	#EILSEQ
 84

	)

68 
	#ERESTART
 85

	)

69 
	#ESTRPIPE
 86

	)

70 
	#EUSERS
 87

	)

71 
	#ENOTSOCK
 88

	)

72 
	#EDESTADDRREQ
 89

	)

73 
	#EMSGSIZE
 90

	)

74 
	#EPROTOTYPE
 91

	)

75 
	#ENOPROTOOPT
 92

	)

76 
	#EPROTONOSUPPORT
 93

	)

77 
	#ESOCKTNOSUPPORT
 94

	)

78 
	#EOPNOTSUPP
 95

	)

79 
	#EPFNOSUPPORT
 96

	)

80 
	#EAFNOSUPPORT
 97

	)

81 
	#EADDRINUSE
 98

	)

82 
	#EADDRNOTAVAIL
 99

	)

83 
	#ENETDOWN
 100

	)

84 
	#ENETUNREACH
 101

	)

85 
	#ENETRESET
 102

	)

86 
	#ECONNABORTED
 103

	)

87 
	#ECONNRESET
 104

	)

88 
	#ENOBUFS
 105

	)

89 
	#EISCONN
 106

	)

90 
	#ENOTCONN
 107

	)

91 
	#ESHUTDOWN
 108

	)

92 
	#ETOOMANYREFS
 109

	)

93 
	#ETIMEDOUT
 110

	)

94 
	#ECONNREFUSED
 111

	)

95 
	#EHOSTDOWN
 112

	)

96 
	#EHOSTUNREACH
 113

	)

97 
	#EALREADY
 114

	)

98 
	#EINPROGRESS
 115

	)

99 
	#ESTALE
 116

	)

100 
	#EUCLEAN
 117

	)

101 
	#ENOTNAM
 118

	)

102 
	#ENAVAIL
 119

	)

103 
	#EISNAM
 120

	)

104 
	#EREMOTEIO
 121

	)

105 
	#EDQUOT
 122

	)

107 
	#ENOMEDIUM
 123

	)

108 
	#EMEDIUMTYPE
 124

	)

109 
	#ECANCELED
 125

	)

110 
	#ENOKEY
 126

	)

111 
	#EKEYEXPIRED
 127

	)

112 
	#EKEYREVOKED
 128

	)

113 
	#EKEYREJECTED
 129

	)

116 
	#EOWNERDEAD
 130

	)

117 
	#ENOTRECOVERABLE
 131

	)

119 
	#ERFKILL
 132

	)

121 
	#EHWPOISON
 133

	)

	@/usr/include/linux/ioctl.h

2 #i‚de‡
_LINUX_IOCTL_H


3 
	#_LINUX_IOCTL_H


	)

5 
	~<asm/io˘l.h
>

	@/usr/include/asm-generic/errno-base.h

2 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


3 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

5 
	#EPERM
 1

	)

6 
	#ENOENT
 2

	)

7 
	#ESRCH
 3

	)

8 
	#EINTR
 4

	)

9 
	#EIO
 5

	)

10 
	#ENXIO
 6

	)

11 
	#E2BIG
 7

	)

12 
	#ENOEXEC
 8

	)

13 
	#EBADF
 9

	)

14 
	#ECHILD
 10

	)

15 
	#EAGAIN
 11

	)

16 
	#ENOMEM
 12

	)

17 
	#EACCES
 13

	)

18 
	#EFAULT
 14

	)

19 
	#ENOTBLK
 15

	)

20 
	#EBUSY
 16

	)

21 
	#EEXIST
 17

	)

22 
	#EXDEV
 18

	)

23 
	#ENODEV
 19

	)

24 
	#ENOTDIR
 20

	)

25 
	#EISDIR
 21

	)

26 
	#EINVAL
 22

	)

27 
	#ENFILE
 23

	)

28 
	#EMFILE
 24

	)

29 
	#ENOTTY
 25

	)

30 
	#ETXTBSY
 26

	)

31 
	#EFBIG
 27

	)

32 
	#ENOSPC
 28

	)

33 
	#ESPIPE
 29

	)

34 
	#EROFS
 30

	)

35 
	#EMLINK
 31

	)

36 
	#EPIPE
 32

	)

37 
	#EDOM
 33

	)

38 
	#ERANGE
 34

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm-generic/ioctl.h

2 #i‚de‡
_ASM_GENERIC_IOCTL_H


3 
	#_ASM_GENERIC_IOCTL_H


	)

23 
	#_IOC_NRBITS
 8

	)

24 
	#_IOC_TYPEBITS
 8

	)

31 #i‚de‡
_IOC_SIZEBITS


32 
	#_IOC_SIZEBITS
 14

	)

35 #i‚de‡
_IOC_DIRBITS


36 
	#_IOC_DIRBITS
 2

	)

39 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

40 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

41 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

42 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

44 
	#_IOC_NRSHIFT
 0

	)

45 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

46 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

47 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

57 #i‚de‡
_IOC_NONE


58 
	#_IOC_NONE
 0U

	)

61 #i‚de‡
_IOC_WRITE


62 
	#_IOC_WRITE
 1U

	)

65 #i‚de‡
_IOC_READ


66 
	#_IOC_READ
 2U

	)

69 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

70 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

71 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

72 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

73 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

75 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

83 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

84 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

85 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

86 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

87 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

88 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

89 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

92 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

93 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

94 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

95 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

99 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

100 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

101 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

102 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

103 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@
1
.
1
/usr/include
181
5328
arg.h
config.def.h
config.h
st.c
st.h
win.h
x.c
/home/alexlai/.cache/wal/colors-wal-st.h
/usr/include/X11/XKBlib.h
/usr/include/X11/Xatom.h
/usr/include/X11/Xft/Xft.h
/usr/include/X11/Xlib.h
/usr/include/X11/cursorfont.h
/usr/include/X11/keysym.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/libgen.h
/usr/include/limits.h
/usr/include/locale.h
/usr/include/math.h
/usr/include/pty.h
/usr/include/pwd.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/select.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/wchar.h
/usr/include/X11/X.h
/usr/include/X11/Xft/XftCompat.h
/usr/include/X11/Xfuncproto.h
/usr/include/X11/Xosdefs.h
/usr/include/X11/extensions/XKBstr.h
/usr/include/X11/extensions/Xrender.h
/usr/include/X11/keysymdef.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/floatn.h
/usr/include/bits/flt-eval-method.h
/usr/include/bits/fp-fast.h
/usr/include/bits/fp-logb.h
/usr/include/bits/getopt_posix.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/iscanonical.h
/usr/include/bits/libc-header-start.h
/usr/include/bits/locale.h
/usr/include/bits/math-finite.h
/usr/include/bits/math-vector.h
/usr/include/bits/mathcalls-helper-functions.h
/usr/include/bits/mathcalls-narrow.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathinline.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/sigevent-consts.h
/usr/include/bits/siginfo-consts.h
/usr/include/bits/signum.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/ss_flags.h
/usr/include/bits/stat.h
/usr/include/bits/stdint-intn.h
/usr/include/bits/stdint-uintn.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string_fortified.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/types/FILE.h
/usr/include/bits/types/__FILE.h
/usr/include/bits/types/__fpos64_t.h
/usr/include/bits/types/__fpos_t.h
/usr/include/bits/types/clock_t.h
/usr/include/bits/types/clockid_t.h
/usr/include/bits/types/cookie_io_functions_t.h
/usr/include/bits/types/error_t.h
/usr/include/bits/types/locale_t.h
/usr/include/bits/types/mbstate_t.h
/usr/include/bits/types/sig_atomic_t.h
/usr/include/bits/types/sigevent_t.h
/usr/include/bits/types/siginfo_t.h
/usr/include/bits/types/sigset_t.h
/usr/include/bits/types/sigval_t.h
/usr/include/bits/types/stack_t.h
/usr/include/bits/types/struct_FILE.h
/usr/include/bits/types/struct_itimerspec.h
/usr/include/bits/types/struct_rusage.h
/usr/include/bits/types/struct_sigstack.h
/usr/include/bits/types/struct_timespec.h
/usr/include/bits/types/struct_timeval.h
/usr/include/bits/types/struct_tm.h
/usr/include/bits/types/time_t.h
/usr/include/bits/types/timer_t.h
/usr/include/bits/types/wint_t.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/bits/wctype-wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/fontconfig/fontconfig.h
/usr/include/strings.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/X11/Xmd.h
/usr/include/X11/Xutil.h
/usr/include/X11/extensions/XKB.h
/usr/include/X11/extensions/render.h
/usr/include/asm/ioctls.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/floatn-common.h
/usr/include/bits/getopt_core.h
/usr/include/bits/libm-simd-decl-stubs.h
/usr/include/bits/local_lim.h
/usr/include/bits/siginfo-arch.h
/usr/include/bits/siginfo-consts-arch.h
/usr/include/bits/signum-generic.h
/usr/include/bits/strings_fortified.h
/usr/include/bits/thread-shared-types.h
/usr/include/bits/timex.h
/usr/include/bits/types/__locale_t.h
/usr/include/bits/types/__mbstate_t.h
/usr/include/bits/types/__sigset_t.h
/usr/include/bits/types/__sigval_t.h
/usr/include/bits/typesizes.h
/usr/include/bits/uintn-identity.h
/usr/include/bits/uio_lim.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/sys/stat.h
/usr/include/X11/Xdefs.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm/errno.h
/usr/include/bits/long-double.h
/usr/include/bits/pthreadtypes-arch.h
/usr/include/bits/statx.h
/usr/include/bits/types/struct_iovec.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/falloc.h
/usr/include/linux/limits.h
/usr/include/asm-generic/errno.h
/usr/include/linux/ioctl.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm/ioctl.h
/usr/include/asm-generic/ioctl.h
